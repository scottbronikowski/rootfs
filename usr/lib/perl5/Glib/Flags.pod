=head1 NAME

Glib::Flags -  Overloaded operators representing GLib flags

=cut

=head1 HIERARCHY

  Glib::Flags



=cut

=for object Glib::Flags Overloaded operators representing GLib flags

=for position DESCRIPTION

=head1 DESCRIPTION

Glib maps flag and enum values to the nicknames strings provided by the
underlying C libraries.  Representing flags this way in Perl is an interesting
problem, which Glib solves by using some cool overloaded operators. 

The functions described here actually do the work of those overloaded
operators.  See the description of the flags operators in the "This Is
Now That" section of L<Glib> for more info.

=cut




=head1 METHODS

=head2 scalar = $class-E<gt>B<new> ($a)

=over

=item * $a (scalar) 

=back

Create a new flags object with given bits.  This is for use from a
subclass, it's not possible to create a C<Glib::Flags> object as such.
For example,

    my $f1 = Glib::ParamFlags->new ('readable');
    my $f2 = Glib::ParamFlags->new (['readable','writable']);

An object like this can then be used with the overloaded operators.

=head2 scalar = $a-E<gt>B<all> ($b, $swap)

=over

=item * $b (scalar) 

=item * $swap (scalar) 

=back

=head2 aref = $f->B<as_arrayref>

=over

=back

Return the bits of $f as a reference to an array of strings, like
['flagbit1','flagbit2'].  This is the overload function for C<@{}>,
ie. arrayizing $f.  You can call it directly as a method too.

Note that @$f gives the bits as a list, but as_arrayref gives an arrayref.
If an arrayref is what you want then the method style
somefunc()->as_arrayref can be more readable than [@{somefunc()}].

=head2 bool = $f->B<bool>

=over

=back

Return 1 if any bits are set in $f, or 0 if none are set.  This is the
overload for $f in boolean context (like C<if>, etc).  You can call it
as a method to get a true/false directly too.

=head2 integer = $a-E<gt>B<eq> ($b, $swap)

=over

=item * $b (scalar) 

=item * $swap (integer) 

=back

=head2 integer = $a-E<gt>B<ge> ($b, $swap)

=over

=item * $b (scalar) 

=item * $swap (integer) 

=back

=head2 scalar = $a-E<gt>B<intersect> ($b, $swap)

=over

=item * $b (scalar) 

=item * $swap (scalar) 

=back

=head2 integer = $a-E<gt>B<ne> ($b, $swap)

=over

=item * $b (scalar) 

=item * $swap (integer) 

=back

=head2 scalar = $a-E<gt>B<sub> ($b, $swap)

=over

=item * $b (scalar) 

=item * $swap (scalar) 

=back

=head2 scalar = $a-E<gt>B<union> ($b, $swap)

=over

=item * $b (scalar) 

=item * $swap (scalar) 

=back

=head2 scalar = $a-E<gt>B<xor> ($b, $swap)

=over

=item * $b (scalar) 

=item * $swap (scalar) 

=back



=cut


=head1 SEE ALSO

L<Glib>


=cut


=head1 COPYRIGHT

Copyright (C) 2003-2011 by the gtk2-perl team.

This software is licensed under the LGPL.  See L<Glib> for a full notice.



=cut

