=head1 NAME

Mail::Transport::Receive - receive messages

=head1 INHERITANCE

 Mail::Transport::Receive
   is a Mail::Transport
   is a Mail::Reporter

 Mail::Transport::Receive is extended by
   Mail::Transport::IMAP4
   Mail::Transport::POP3

=head1 SYNOPSIS

 my $receiver = Mail::Transport::POP3->new(...);
 my $message = $receiver->receive($id);

=head1 DESCRIPTION

Each object which extends L<Mail::Transport::Receive|Mail::Transport::Receive> implement
a protocol which can get messages into your application.  The internals
of each implementation can differ quite a lot, so have a look at each
separate manual page as well.

Current message receivers:

=over 4

=item * L<Mail::Transport::POP3|Mail::Transport::POP3>

Implements the POP3 protocol.  See also L<Mail::Box::POP3|Mail::Box::POP3>.

=back

=head1 METHODS

=head2 Constructors

=over 4

=item Mail::Transport::Receive-E<gt>B<new>(OPTIONS)

See L<Mail::Transport/"METHODS">

=back

=head2 Receiving mail

=over 4

=item $obj-E<gt>B<receive>([UNIQUE-MESSAGE-ID])

Receive one message from the remote server.  Some receivers will provide
the next message automatically, other are random access and use the
specified ID.

=back

=head2 Server connection

=over 4

=item $obj-E<gt>B<findBinary>(NAME [, DIRECTORIES])

See L<Mail::Transport/"Server connection">

=item $obj-E<gt>B<remoteHost>

See L<Mail::Transport/"Server connection">

=item $obj-E<gt>B<retry>

See L<Mail::Transport/"Server connection">

=back

=head2 Error handling

=over 4

=item $obj-E<gt>B<AUTOLOAD>

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<addReport>(OBJECT)

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<defaultTrace>([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])

=item Mail::Transport::Receive-E<gt>B<defaultTrace>([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<errors>

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<log>([LEVEL [,STRINGS]])

=item Mail::Transport::Receive-E<gt>B<log>([LEVEL [,STRINGS]])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<logPriority>(LEVEL)

=item Mail::Transport::Receive-E<gt>B<logPriority>(LEVEL)

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<logSettings>

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<notImplemented>

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<report>([LEVEL])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<reportAll>([LEVEL])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<trace>([LEVEL])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<warnings>

See L<Mail::Reporter/"Error handling">

=back

=head2 Cleanup

=over 4

=item $obj-E<gt>B<DESTROY>

See L<Mail::Reporter/"Cleanup">

=item $obj-E<gt>B<inGlobalDestruction>

See L<Mail::Reporter/"Cleanup">

=back

=head1 DIAGNOSTICS

=over 4

=item Warning: Avoid program abuse: specify an absolute path for $exec.

Specifying explicit locations for executables of email transfer agents
should only be done with absolute file names, to avoid various pontential
security problems.

=item Warning: Executable $exec does not exist.

The explicitly indicated mail transfer agent does not exists. The normal
settings are used to find the correct location.

=item Error: Package $package does not implement $method.

Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.

=back

=head1 SEE ALSO

This module is part of Mail-Box distribution version 2.099,
built on July 07, 2011. Website: F<http://perl.overmeer.net/mailbox/>

=head1 LICENSE

Copyrights 2001-2011 by Mark Overmeer. For other contributors see ChangeLog.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See F<http://www.perl.com/perl/misc/Artistic.html>

