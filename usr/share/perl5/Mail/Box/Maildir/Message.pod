=head1 NAME

Mail::Box::Maildir::Message - one message in a Maildir folder

=head1 INHERITANCE

 Mail::Box::Maildir::Message
   is a Mail::Box::Dir::Message
   is a Mail::Box::Message
   is a Mail::Message
   is a Mail::Reporter

=head1 SYNOPSIS

 my $folder = new Mail::Box::Maildir ...
 my $message = $folder->message(10);

=head1 DESCRIPTION

A C<Mail::Box::Maildir::Message> represents one message in an
L<Mail::Box::Maildir|Mail::Box::Maildir> folder. Each message is stored in a separate file.

=head1 METHODS

=head2 Constructors

=over 4

=item $obj-E<gt>B<clone>(OPTIONS)

See L<Mail::Message/"Constructors">

=item Mail::Box::Maildir::Message-E<gt>B<new>(OPTIONS)

See L<Mail::Box::Dir::Message/"METHODS">

=back

=head2 Constructing a message

=over 4

=item $obj-E<gt>B<bounce>([RG-OBJECT|OPTIONS])

See L<Mail::Message::Construct::Bounce/"Constructing a message">

=item Mail::Box::Maildir::Message-E<gt>B<build>([MESSAGE|PART|BODY], CONTENT)

See L<Mail::Message::Construct::Build/"Constructing a message">

=item Mail::Box::Maildir::Message-E<gt>B<buildFromBody>(BODY, [HEAD], HEADERS)

See L<Mail::Message::Construct::Build/"Constructing a message">

=item $obj-E<gt>B<forward>(OPTIONS)

See L<Mail::Message::Construct::Forward/"Constructing a message">

=item $obj-E<gt>B<forwardAttach>(OPTIONS)

See L<Mail::Message::Construct::Forward/"Constructing a message">

=item $obj-E<gt>B<forwardEncapsulate>(OPTIONS)

See L<Mail::Message::Construct::Forward/"Constructing a message">

=item $obj-E<gt>B<forwardInline>(OPTIONS)

See L<Mail::Message::Construct::Forward/"Constructing a message">

=item $obj-E<gt>B<forwardNo>(OPTIONS)

See L<Mail::Message::Construct::Forward/"Constructing a message">

=item $obj-E<gt>B<forwardPostlude>

See L<Mail::Message::Construct::Forward/"Constructing a message">

=item $obj-E<gt>B<forwardPrelude>

See L<Mail::Message::Construct::Forward/"Constructing a message">

=item $obj-E<gt>B<forwardSubject>(STRING)

See L<Mail::Message::Construct::Forward/"Constructing a message">

=item Mail::Box::Maildir::Message-E<gt>B<read>(FILEHANDLE|SCALAR|REF-SCALAR|ARRAY-OF-LINES, OPTIONS)

See L<Mail::Message::Construct::Read/"Constructing a message">

=item $obj-E<gt>B<rebuild>(OPTIONS)

See L<Mail::Message::Construct::Rebuild/"Constructing a message">

=item $obj-E<gt>B<reply>(OPTIONS)

See L<Mail::Message::Construct::Reply/"Constructing a message">

=item $obj-E<gt>B<replyPrelude>([STRING|FIELD|ADDRESS|ARRAY-OF-THINGS])

See L<Mail::Message::Construct::Reply/"Constructing a message">

=item $obj-E<gt>B<replySubject>(STRING)

=item Mail::Box::Maildir::Message-E<gt>B<replySubject>(STRING)

See L<Mail::Message::Construct::Reply/"Constructing a message">

=back

=head2 The message

=over 4

=item $obj-E<gt>B<container>

See L<Mail::Message/"The message">

=item $obj-E<gt>B<copyTo>(FOLDER, OPTIONS)

See L<Mail::Box::Message/"The message">

=item $obj-E<gt>B<filename>([FILENAME])

Returns the current filename for this message.  If the FILENAME argument
is specified, a new filename will be set.  For maildir messages this
means that modifications are immediately performed: there will be
a rename (move) from the old name to the new name.  Labels may change
within in the message object as well.

=item $obj-E<gt>B<folder>([FOLDER])

See L<Mail::Box::Message/"The message">

=item $obj-E<gt>B<isDummy>

See L<Mail::Message/"The message">

=item $obj-E<gt>B<isPart>

See L<Mail::Message/"The message">

=item $obj-E<gt>B<messageId>

See L<Mail::Message/"The message">

=item $obj-E<gt>B<moveTo>(FOLDER, OPTIONS)

See L<Mail::Box::Message/"The message">

=item $obj-E<gt>B<print>([FILEHANDLE])

See L<Mail::Message/"The message">

=item $obj-E<gt>B<send>([MAILER], OPTIONS)

See L<Mail::Message/"The message">

=item $obj-E<gt>B<seqnr>([INTEGER])

See L<Mail::Box::Message/"The message">

=item $obj-E<gt>B<size>

See L<Mail::Message/"The message">

=item $obj-E<gt>B<toplevel>

See L<Mail::Message/"The message">

=item $obj-E<gt>B<write>([FILEHANDLE])

See L<Mail::Message/"The message">

=back

=head2 The header

=over 4

=item $obj-E<gt>B<bcc>

See L<Mail::Message/"The header">

=item $obj-E<gt>B<cc>

See L<Mail::Message/"The header">

=item $obj-E<gt>B<date>

See L<Mail::Message/"The header">

=item $obj-E<gt>B<destinations>

See L<Mail::Message/"The header">

=item $obj-E<gt>B<from>

See L<Mail::Message/"The header">

=item $obj-E<gt>B<get>(FIELDNAME)

See L<Mail::Message/"The header">

=item $obj-E<gt>B<guessTimestamp>

The filename of a C<Mail::Box::Maildir::Message> contains a timestamp.  This
is a wild guess about the actual time of sending of the message: it is the
time of receipt which may be seconds to hours off.  But is still a good
guess...  When the message header is not parsed, then this date is used.

=item $obj-E<gt>B<head>([HEAD])

See L<Mail::Message/"The header">

=item $obj-E<gt>B<nrLines>

See L<Mail::Message/"The header">

=item $obj-E<gt>B<sender>

See L<Mail::Message/"The header">

=item $obj-E<gt>B<study>(FIELDNAME)

See L<Mail::Message/"The header">

=item $obj-E<gt>B<subject>

See L<Mail::Message/"The header">

=item $obj-E<gt>B<timestamp>

See L<Mail::Message/"The header">

=item $obj-E<gt>B<to>

See L<Mail::Message/"The header">

=back

=head2 The body

=over 4

=item $obj-E<gt>B<body>([BODY])

See L<Mail::Message/"The body">

=item $obj-E<gt>B<contentType>

See L<Mail::Message/"The body">

=item $obj-E<gt>B<decoded>(OPTIONS)

See L<Mail::Message/"The body">

=item $obj-E<gt>B<encode>(OPTIONS)

See L<Mail::Message/"The body">

=item $obj-E<gt>B<isMultipart>

See L<Mail::Message/"The body">

=item $obj-E<gt>B<isNested>

See L<Mail::Message/"The body">

=item $obj-E<gt>B<parts>(['ALL'|'ACTIVE'|'DELETED'|'RECURSE'|FILTER])

See L<Mail::Message/"The body">

=back

=head2 Flags

=over 4

=item $obj-E<gt>B<delete>

See L<Mail::Message/"Flags">

=item $obj-E<gt>B<deleted>([BOOLEAN])

See L<Mail::Message/"Flags">

=item $obj-E<gt>B<isDeleted>

See L<Mail::Message/"Flags">

=item $obj-E<gt>B<isModified>

See L<Mail::Message/"Flags">

=item $obj-E<gt>B<label>(LABEL|PAIRS)

See L<Mail::Message/"Flags">

=item $obj-E<gt>B<labels>

See L<Mail::Message/"Flags">

=item $obj-E<gt>B<labelsToStatus>

See L<Mail::Message/"Flags">

=item $obj-E<gt>B<modified>([BOOLEAN])

See L<Mail::Message/"Flags">

=item $obj-E<gt>B<statusToLabels>

See L<Mail::Message/"Flags">

=back

=head2 The whole message as text

=over 4

=item $obj-E<gt>B<file>

See L<Mail::Message::Construct::Text/"The whole message as text">

=item $obj-E<gt>B<lines>

See L<Mail::Message::Construct::Text/"The whole message as text">

=item $obj-E<gt>B<printStructure>([FILEHANDLE|undef],[INDENT])

See L<Mail::Message::Construct::Text/"The whole message as text">

=item $obj-E<gt>B<string>

See L<Mail::Message::Construct::Text/"The whole message as text">

=back

=head2 Labels

=over 4

=item $obj-E<gt>B<labelsToFilename>

When the labels on a message change, this may implicate a change in
the message's filename.  The change will take place immediately.  The
new filename (which may be the same as the old filename) is returned.
C<undef> is returned when the rename is required but fails.

=back

=head2 Internals

=over 4

=item $obj-E<gt>B<accept>([BOOLEAN])

Accept a message for the folder.  This will move it from the C<new>
or C<tmp> sub-directories into the C<cur> sub-directory (or back when
the BOOLEAN is C<false>).  When you accept an already accepted message,
nothing will happen.

=item $obj-E<gt>B<clonedFrom>

See L<Mail::Message/"Internals">

=item Mail::Box::Maildir::Message-E<gt>B<coerce>(MESSAGE, OPTIONS)

See L<Mail::Message/"Internals">

=item $obj-E<gt>B<create>(FILENAME)

See L<Mail::Box::Dir::Message/"Internals">

=item $obj-E<gt>B<diskDelete>

See L<Mail::Box::Message/"Internals">

=item $obj-E<gt>B<isDelayed>

See L<Mail::Message/"Internals">

=item $obj-E<gt>B<loadBody>

See L<Mail::Box::Dir::Message/"Internals">

=item $obj-E<gt>B<loadHead>

See L<Mail::Box::Dir::Message/"Internals">

=item $obj-E<gt>B<parser>

See L<Mail::Box::Dir::Message/"Internals">

=item $obj-E<gt>B<readBody>(PARSER, HEAD [, BODYTYPE])

See L<Mail::Box::Message/"Internals">

=item $obj-E<gt>B<readFromParser>(PARSER, [BODYTYPE])

See L<Mail::Message/"Internals">

=item $obj-E<gt>B<readHead>(PARSER [,CLASS])

See L<Mail::Message/"Internals">

=item $obj-E<gt>B<recursiveRebuildPart>(PART, OPTIONS)

See L<Mail::Message::Construct::Rebuild/"Internals">

=item $obj-E<gt>B<storeBody>(BODY)

See L<Mail::Message/"Internals">

=item $obj-E<gt>B<takeMessageId>([STRING])

See L<Mail::Message/"Internals">

=back

=head2 Error handling

=over 4

=item $obj-E<gt>B<AUTOLOAD>

See L<Mail::Message::Construct/"METHODS">

=item $obj-E<gt>B<addReport>(OBJECT)

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<defaultTrace>([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])

=item Mail::Box::Maildir::Message-E<gt>B<defaultTrace>([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<errors>

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<log>([LEVEL [,STRINGS]])

=item Mail::Box::Maildir::Message-E<gt>B<log>([LEVEL [,STRINGS]])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<logPriority>(LEVEL)

=item Mail::Box::Maildir::Message-E<gt>B<logPriority>(LEVEL)

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<logSettings>

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<notImplemented>

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<report>([LEVEL])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<reportAll>([LEVEL])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<shortSize>([VALUE])

=item Mail::Box::Maildir::Message-E<gt>B<shortSize>([VALUE])

See L<Mail::Message/"Error handling">

=item $obj-E<gt>B<shortString>

See L<Mail::Message/"Error handling">

=item $obj-E<gt>B<trace>([LEVEL])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<warnings>

See L<Mail::Reporter/"Error handling">

=back

=head2 Cleanup

=over 4

=item $obj-E<gt>B<DESTROY>

See L<Mail::Message/"Cleanup">

=item $obj-E<gt>B<destruct>

See L<Mail::Box::Message/"Cleanup">

=item $obj-E<gt>B<inGlobalDestruction>

See L<Mail::Reporter/"Cleanup">

=back

=head1 DETAILS

=head2 Structure of a Message

=head3 The header

=head3 The body

=head2 Message object implementation

=head2 Message class implementation

=head2 Labels

=head3 Predefined labels

=head3 Status and X-Status fields

=head3 Flags in filename

When new messages arrive on system and have to be stored in a maildir folder,
they are put in the C<new> sub-directory of the folder (first created in
the C<tmp> sub-directory and then immediately moved to C<new>).
The following information was found at L<http://cr.yp.to/proto/maildir.html>.

Each message is written in a separate file.  The filename is
constructed from the time-of-arrival, a hostname, an unique component,
a syntax marker, and flags. For example C<1014220791.meteor.42:2,DF>.
The filename must match:

 my ($time, $unique, $hostname, $info)
    = $filename =~ m!^(\d+)\.(.*)\.(\w+)(\:.*)?$!;
 my ($semantics, $flags)
    = $info =~ m!([12])\,([DFPRST]*)$!;
 my @flags = split //, $flags;

When an application opens the folder, there may be messages in C<new>
which are new arival, and messages in C<cur>.  The latter are labeled
C<accepted>.  To move a message from C<new> to C<cur>, you have two
options with the same effect:

  $msg->accept;
  $msg->label(accept => 1);

See L<accept()|Mail::Box::Maildir::Message/"Internals">, L<label()|Mail::Message/"Flags">, L<Mail::Box::Maildir::new(accept_new)|Mail::Box::Maildir/"METHODS">,
and L<Mail::Box::Maildir::acceptMessages()|Mail::Box::Maildir/"Internals">

The messages are moved, and their name is immediately
extended with flags.  An example:

 new/897979431.meteor.42      may become
 cur/897979431.meteor.42:2,FS

The added characters C<':2,'> refer to the "second state of processing",
where the message has been inspected.  And the characters (which should
be in alphabetic order) mean

 D      => draft
 F      => flagged
 R      => replied  (answered)
 S      => seen
 T      => deleted  (tagged for deletion)

Some maildir clients support
 P      => passed   (resent/forwarded/bounced to someone else)

The flags will immediately change when L<label()|Mail::Message/"Flags"> or L<delete()|Mail::Message/"Flags"> is used,
which differs from other message implementations: maildir is stateless,
and should not break when applications crash.

=head1 DIAGNOSTICS

=over 4

=item Error: Cannot coerce a $class object into a $class object

=item Error: Cannot create parser for $filename.

For some reason (the previous message have told you already) it was not possible
to create a message parser for the specified filename.

=item Error: Cannot include forward source as $include.

Unknown alternative for the L<forward(include)|Mail::Message::Construct::Forward/"Constructing a message">.  Valid choices are
C<NO>, C<INLINE>, C<ATTACH>, and C<ENCAPSULATE>.

=item Error: Cannot include reply source as $include.

Unknown alternative for the C<include> option of L<reply()|Mail::Message::Construct::Reply/"Constructing a message">.  Valid
choices are C<NO>, C<INLINE>, and C<ATTACH>.

=item Error: Cannot write message to $filename: $!

When a modified or new message is written to disk, it is first written
to a temporary file in the folder directory.  For some reason, it is
impossible to create this file.

=item Error: Failed to move $new to $filename: $!

When a modified or new message is written to disk, it is first written
to a temporary file in the folder directory.  Then, the new file is
moved to replace the existing file.  Apparently, the latter fails.

=item Error: Method bounce requires To, Cc, or Bcc

The message L<bounce()|Mail::Message::Construct::Bounce/"Constructing a message"> method forwards a received message off to someone
else without modification; you must specified it's new destination.
If you have the urge not to specify any destination, you probably
are looking for L<reply()|Mail::Message::Construct::Reply/"Constructing a message">. When you wish to modify the content, use
L<forward()|Mail::Message::Construct::Forward/"Constructing a message">.

=item Error: Method forwardAttach requires a preamble

=item Error: Method forwardEncapsulate requires a preamble

=item Error: No address to create forwarded to.

If a forward message is created, a destination address must be specified.

=item Error: No default mailer found to send message.

The message L<send()|Mail::Message/"The message"> mechanism had not enough information to automatically
find a mail transfer agent to sent this message.  Specify a mailer
explicitly using the C<via> options.

=item Error: No rebuild rule $name defined.

=item Error: Only build() Mail::Message's; they are not in a folder yet

You may wish to construct a message to be stored in a some kind
of folder, but you need to do that in two steps.  First, create a
normal L<Mail::Message|Mail::Message>, and then add it to the folder.  During this
L<Mail::Box::addMessage()|Mail::Box/"The folder"> process, the message will get L<coerce()|Mail::Message/"Internals">-d
into the right message type, adding storage information and the like.

=item Error: Package $package does not implement $method.

Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.

=item Error: Unable to read delayed body.

For some reason, the header of the message could be read, but the body
cannot.  Probably the file has disappeared or the permissions were
changed during the progress of the program.

=item Error: Unable to read delayed head.

Mail::Box tries to be I<lazy> with respect to parsing messages.  When a
directory organized folder is opened, only the filenames of messages are
collected.  At first use, the messages are read from their file.  Apperently,
a message is used for the first time here, but has disappeared or is
unreadible for some other reason.

=item Error: coercion starts with some object

=back

=head1 SEE ALSO

This module is part of Mail-Box distribution version 2.099,
built on July 07, 2011. Website: F<http://perl.overmeer.net/mailbox/>

=head1 LICENSE

Copyrights 2001-2011 by Mark Overmeer. For other contributors see ChangeLog.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See F<http://www.perl.com/perl/misc/Artistic.html>

