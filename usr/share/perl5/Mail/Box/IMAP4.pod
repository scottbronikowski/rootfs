=head1 NAME

Mail::Box::IMAP4 - handle IMAP4 folders as client

=head1 INHERITANCE

 Mail::Box::IMAP4
   is a Mail::Box::Net
   is a Mail::Box
   is a Mail::Reporter

=head1 SYNOPSIS

 use Mail::Box::IMAP4;
 my $folder = new Mail::Box::IMAP4 folder => $ENV{MAIL}, ...;

=head1 DESCRIPTION

Maintain a folder which has its messages stored on a remote server.  The
communication between the client application and the server is implemented
using the IMAP4 protocol.  See also L<Mail::Server::IMAP4|Mail::Server::IMAP4>.

This class uses L<Mail::Transport::IMAP4|Mail::Transport::IMAP4> to hide the transport of
information, and focusses solely on the correct handling of messages
within a IMAP4 folder.  More than one IMAP4 folder can be handled by
one single IMAP4 connection.

=head1 OVERLOADED

=over 4

=item overload: B<"">

See L<Mail::Box/"OVERLOADED">

=item overload: B<@{}>

See L<Mail::Box/"OVERLOADED">

=item overload: B<cmp>

See L<Mail::Box/"OVERLOADED">

=back

=head1 METHODS

=head2 Constructors

=over 4

=item Mail::Box::IMAP4-E<gt>B<new>(OPTIONS)

The C<new> can have many OPTIONS.  Not only the ones listed here below,
but also all the OPTIONS for L<Mail::Transport::IMAP4::new()|Mail::Transport::IMAP4/"METHODS"> can be
passed.

The default depends on the value of L<new(cache_head)|Mail::Box::IMAP4/"METHODS">.

Without folder name, no folder is selected.  Only few methods are
available now, for instance L<listSubFolders()|Mail::Box/"Sub-folders"> to get the top-level
folder names.  Usually, the folder named C<INBOX> will be present.

 -Option           --Defined in     --Default
  access             Mail::Box        'r'
  body_delayed_type  Mail::Box        Mail::Message::Body::Delayed
  body_type          Mail::Box        Mail::Message::Body::Lines
  cache_body                          NO
  cache_head                          NO or DELAY
  cache_labels                        NO or DELAY
  coerce_options     Mail::Box        []
  create             Mail::Box        <false>
  extract            Mail::Box        10240
  field_type         Mail::Box        undef
  fix_headers        Mail::Box        <false>
  folder             Mail::Box        /
  folderdir          Mail::Box        <not used>
  head_delayed_type  Mail::Box        Mail::Message::Head::Delayed
  head_type          Mail::Box        Mail::Box::IMAP4::Head or Mail::Message::Head::Complete
  join_connection                     true
  keep_dups          Mail::Box        <false>
  lock_file          Mail::Box        undef
  lock_timeout       Mail::Box        1 hour
  lock_type          Mail::Box        'NONE'
  lock_wait          Mail::Box        10 seconds
  locker             Mail::Box        undef
  log                Mail::Reporter   'WARNINGS'
  manager            Mail::Box        undef
  message_type       Mail::Box        Mail::Box::IMAP4::Message
  multipart_type     Mail::Box        Mail::Message::Body::Multipart
  password           Mail::Box::Net   undef
  remove_when_empty  Mail::Box        <false>
  save_on_exit       Mail::Box        <true>
  server_name        Mail::Box::Net   undef
  server_port        Mail::Box::Net   143
  trace              Mail::Reporter   'WARNINGS'
  transporter                         Mail::Transport::IMAP4
  trusted            Mail::Box        <false>
  username           Mail::Box::Net   undef

=over 2

=item access => MODE

=item body_delayed_type => CLASS

=item body_type => CLASS|CODE

=item cache_body => 'NO'|'YES'|'DELAY'

Body objects are immutable, but may still cached or not.  In common
case, the body of a message is requested via L<Mail::Message::body()|Mail::Message/"The body">
or L<Mail::Message::decoded()|Mail::Message/"The body">.  This returns a handle to a body object.
You may decide wether that body object can be reused or not.  C<NO>
means: retreive the data each time again, C<YES> will cache the body data,
C<DELAY> will send the whole message when the folder is closed.

        [local cache]  [write]
 NO         no           no
 YES        yes          no
 DELAY      yes          yes

=item cache_head => 'NO'|'PARTIAL'|'DELAY'

For a read-only folder, C<DELAY> is the default, otherwise C<NO> is
chosen.  The four configuration parameter have subtile consequences.
To start with a table:

        [local cache]  [write]  [default head_type]
 NO         no           no     Mail::Box::IMAP4::Head
 PARTIAL    yes          no     Mail::Box::IMAP4::Head
 DELAY      yes          yes    Mail::Message::Head::Complete

The default C<head_type> is L<Mail::Box::IMAP4::Head|Mail::Box::IMAP4::Head>, the
default C<cached_head_type> is L<Mail::Message::Head::Complete|Mail::Message::Head::Complete>.

Having a local cache means that a lookup for a field is first done
in a local data-structure (which extends L<Mail::Message::Head::Partial|Mail::Message::Head::Partial>),
and only on the remote server if it was not found.  This is dangerous,
because your locally cached data can be out-of-sync with the server.
However, it may give you a nice performance benefit.

C<DELAY> will always collect the whole
header for you.  This is required when you want to look for Resent Groups
(See L<Mail::Message::Head::ResentGroup|Mail::Message::Head::ResentGroup>) or other field order dependent
header access.  A L<Mail::Message::Head::Delayed|Mail::Message::Head::Delayed> will be created first.

=item cache_labels => 'NO'|'WRITE'|'DELAY'

When labels from a message are received, these values can be kept. However,
this imposes dangers where the server's internal label storage may get out
of sync with your data.

With C<NO>, no caching will take place (but the performance will be
worse). With C<WRITE>, all label access will be cached, but written to
the server as well.  Both C<NO> and C<WRITE> will update the labels on
the served, even when the folder was opened read-only.  C<DELAY> will
not write the changed information to the server, but delay that till
the moment that the folder is closed.  It only works when the folder is
opened read/write or write is enforced.

The default is C<DELAY> for folders which where opened read-only.  This
means that you still can force an update with L<close(write)|Mail::Box/"The folder">.  For folders
which are opened read-write, the default is the safeset setting, which is
C<NO>.

=item coerce_options => ARRAY

=item create => BOOLEAN

=item extract => INTEGER | CODE | METHOD | 'LAZY'|'ALWAYS'

=item field_type => CLASS

=item fix_headers => BOOLEAN

=item folder => FOLDERNAME

=item folderdir => DIRECTORY

=item head_delayed_type => CLASS

=item head_type => CLASS

=item join_connection => BOOLEAN

Within this Mail::Box::IMAP4 class is registered which transporters are
already in use, i.e. which connections to the IMAP server are already
in established.  When this option is set, multiple folder openings on the
same server will try to reuse one connection.

=item keep_dups => BOOLEAN

=item lock_file => FILENAME

=item lock_timeout => SECONDS

=item lock_type => CLASS|STRING|ARRAY

=item lock_wait => SECONDS

=item locker => OBJECT

=item log => LEVEL

=item manager => MANAGER

=item message_type => CLASS

=item multipart_type => CLASS

=item password => STRING

=item remove_when_empty => BOOLEAN

=item save_on_exit => BOOLEAN

=item server_name => HOSTNAME

=item server_port => INTEGER

=item trace => LEVEL

=item transporter => OBJECT|CLASS

The name of the CLASS which will interface with the connection.  When you
implement your own extension to L<Mail::Transport::IMAP4|Mail::Transport::IMAP4>, you can either
specify a fully instantiated transporter OBJECT, or the name of your own
CLASS.  When an OBJECT is given, most other options will be ignored.

=item trusted => BOOLEAN

=item username => STRING

=back

example: 

 my $imap   = Mail::Box::IMAP4->new(username => 'myname',
    password => 'mypassword', server_name => 'imap.xs4all.nl');

 my $url    = 'imap4://user:password@imap.xs4all.nl');
 my $imap   = $mgr->open($url);

 my $client = Mail::IMAPClient->new(...);
 my $imap   = Mail::Box::IMAP4->new(imap_client => $client);

=back

=head2 The folder

=over 4

=item $obj-E<gt>B<addMessage>(MESSAGE, OPTIONS)

See L<Mail::Box/"The folder">

=item $obj-E<gt>B<addMessages>(MESSAGE [, MESSAGE, ...])

See L<Mail::Box/"The folder">

=item Mail::Box::IMAP4-E<gt>B<appendMessages>(OPTIONS)

See L<Mail::Box/"The folder">

=item $obj-E<gt>B<close>(OPTIONS)

Close the folder.  In the case of IMAP, more than one folder can use
the same connection, therefore, closing a folder does not always close
the connection to the server.  Only when no folder is using the
connection anymore, a logout will be invoked by
L<Mail::Transport::IMAP4::DESTROY()|Mail::Transport::IMAP4/"Cleanup">

 -Option      --Defined in     --Default
  force         Mail::Box        <false>
  save_deleted  Mail::Box        false
  write         Mail::Box        MODIFIED

=over 2

=item force => BOOLEAN

=item save_deleted => BOOLEAN

=item write => 'ALWAYS'|'NEVER'|'MODIFIED'

=back

=item $obj-E<gt>B<copyTo>(FOLDER, OPTIONS)

See L<Mail::Box/"The folder">

=item $obj-E<gt>B<delete>(OPTIONS)

See L<Mail::Box/"The folder">

=item $obj-E<gt>B<folderdir>([DIRECTORY])

See L<Mail::Box::Net/"METHODS">

=item $obj-E<gt>B<name>

See L<Mail::Box/"The folder">

=item $obj-E<gt>B<organization>

See L<Mail::Box/"The folder">

=item $obj-E<gt>B<size>

See L<Mail::Box/"The folder">

=item $obj-E<gt>B<type>

See L<Mail::Box/"The folder">

=item $obj-E<gt>B<update>(OPTIONS)

See L<Mail::Box/"The folder">

=item $obj-E<gt>B<url>

See L<Mail::Box/"The folder">

=back

=head2 Folder flags

=over 4

=item $obj-E<gt>B<access>

See L<Mail::Box/"Folder flags">

=item $obj-E<gt>B<isModified>

See L<Mail::Box/"Folder flags">

=item $obj-E<gt>B<modified>([BOOLEAN])

See L<Mail::Box/"Folder flags">

=item $obj-E<gt>B<writable>

See L<Mail::Box/"Folder flags">

=back

=head2 The messages

=over 4

=item $obj-E<gt>B<current>([NUMBER|MESSAGE|MESSAGE-ID])

See L<Mail::Box/"The messages">

=item $obj-E<gt>B<find>(MESSAGE-ID)

See L<Mail::Box/"The messages">

=item $obj-E<gt>B<findFirstLabeled>(LABEL, [BOOLEAN, [ARRAY-OF-MSGS]])

See L<Mail::Box/"The messages">

=item $obj-E<gt>B<message>(INDEX [,MESSAGE])

See L<Mail::Box/"The messages">

=item $obj-E<gt>B<messageId>(MESSAGE-ID [,MESSAGE])

See L<Mail::Box/"The messages">

=item $obj-E<gt>B<messageIds>

See L<Mail::Box/"The messages">

=item $obj-E<gt>B<messages>(['ALL',RANGE,'ACTIVE','DELETED',LABEL,!LABEL,FILTER])

See L<Mail::Box/"The messages">

=item $obj-E<gt>B<nrMessages>(OPTIONS)

See L<Mail::Box/"The messages">

=item $obj-E<gt>B<scanForMessages>(MESSAGE, MESSAGE-IDS, TIMESPAN, WINDOW)

See L<Mail::Box/"The messages">

=back

=head2 Sub-folders

=over 4

=item $obj-E<gt>B<listSubFolders>(OPTIONS)

=item Mail::Box::IMAP4-E<gt>B<listSubFolders>(OPTIONS)

See L<Mail::Box/"Sub-folders">

=item $obj-E<gt>B<nameOfSubFolder>(SUBNAME, [PARENTNAME])

=item Mail::Box::IMAP4-E<gt>B<nameOfSubFolder>(SUBNAME, [PARENTNAME])

See L<Mail::Box/"Sub-folders">

=item $obj-E<gt>B<openRelatedFolder>(OPTIONS)

See L<Mail::Box/"Sub-folders">

=item $obj-E<gt>B<openSubFolder>(SUBNAME, OPTIONS)

See L<Mail::Box/"Sub-folders">

=item $obj-E<gt>B<topFolderWithMessages>

=item Mail::Box::IMAP4-E<gt>B<topFolderWithMessages>

See L<Mail::Box/"Sub-folders">

=back

=head2 Internals

=over 4

=item $obj-E<gt>B<body>([BODY])

=item $obj-E<gt>B<coerce>(MESSAGE, OPTIONS)

See L<Mail::Box/"Internals">

=item $obj-E<gt>B<create>(FOLDER, OPTIONS)

=item Mail::Box::IMAP4-E<gt>B<create>(FOLDER, OPTIONS)

See L<Mail::Box::Net/"METHODS">

=item $obj-E<gt>B<createTransporter>(CLASS, OPTIONS)

Create a transporter object (an instance of L<Mail::Transport::IMAP4|Mail::Transport::IMAP4>), where
CLASS defines the exact object type.  As OPTIONS, everything which is
acceptable to a transporter initiation can be used (see
L<Mail::Transport::IMAP4::new()|Mail::Transport::IMAP4/"METHODS">.

 -Option         --Default
  join_connection  true

=over 2

=item join_connection => BOOLEAN

See L<new(join_connection)|Mail::Box::IMAP4/"METHODS">.  When false, the connection will never be shared
with other IMAP mail boxes.

=back

=item $obj-E<gt>B<determineBodyType>(MESSAGE, HEAD)

See L<Mail::Box/"Internals">

=item $obj-E<gt>B<fetch>(ARRAY-OF-MESSAGES|MESSAGE-SELECTION, INFO)

Low-level data retreival about one or more messages via IMAP4 from
the remote server. Some of this data may differ from the information
which is stored in the message objects which are created by MailBox,
so you should avoid the use of this method for your own purposes.
The IMAP implementation provides some wrappers around this, providing
the correct behavior.

An array of MESSAGES may be specified or some MESSAGE SELECTION,
acceptable to L<Mail::Box::messages()|Mail::Box/"The messages">.  Examples of the latter are
C<'ALL'>, C<'DELETED'>, or C<spam> (messages labelled to contain spam).

The INFO contains one or more attributes as defined by the IMAP protocol.
You have to read the full specs of the related RFCs to see these.

=item Mail::Box::IMAP4-E<gt>B<foundIn>([FOLDERNAME], OPTIONS)

See L<Mail::Box/"Internals">

=item $obj-E<gt>B<getHead>(MESSAGE)

Read the header for the specified message from the remote server.
C<undef> is returned in case the message disappeared.

=item $obj-E<gt>B<getHeadAndBody>(MESSAGE)

Read all data for the specified message from the remote server.
Return head and body of the mesasge as list, or an empty list
if the MESSAGE disappeared from the server.

=item $obj-E<gt>B<lineSeparator>([STRING|'CR'|'LF'|'CRLF'])

See L<Mail::Box/"Internals">

=item $obj-E<gt>B<locker>

See L<Mail::Box/"Internals">

=item $obj-E<gt>B<read>(OPTIONS)

See L<Mail::Box/"Internals">

=item $obj-E<gt>B<readMessages>(OPTIONS)

See L<Mail::Box/"Internals">

=item $obj-E<gt>B<storeMessage>(MESSAGE)

See L<Mail::Box/"Internals">

=item $obj-E<gt>B<toBeThreaded>(MESSAGES)

See L<Mail::Box/"Internals">

=item $obj-E<gt>B<toBeUnthreaded>(MESSAGES)

See L<Mail::Box/"Internals">

=item $obj-E<gt>B<transporter>([OBJECT])

Returns the object which is the interface to the IMAP4 protocol handler.
The IMAP4 handler has the current folder selected.
When an OBJECT is specified, it is set to be the transporter from
that moment on.  The OBJECT must extend L<Mail::Transport::IMAP4|Mail::Transport::IMAP4>.

=item $obj-E<gt>B<updateMessages>(OPTIONS)

See L<Mail::Box/"Internals">

=item $obj-E<gt>B<write>(OPTIONS)

The IMAP protocol usually writes the data immediately to the remote server,
because that's what the protocol wants.  However, some options to L<new()|Mail::Box::IMAP4/"METHODS">
may delay that to boost performance.  This method will, when the folder is
being closed, write that info after all.

 -Option      --Defined in     --Default
  force         Mail::Box        <false>
  save_deleted                   <false>

=over 2

=item force => BOOLEAN

=item save_deleted => BOOLEAN

You may be able to save the messages which are flagged for deletion now,
but they will be removed anyway when the folder is closed.

=back

=item $obj-E<gt>B<writeMessages>(OPTIONS)

 -Option     --Defined in     --Default
  messages     Mail::Box        <required>
  transporter                   <required>

=over 2

=item messages => ARRAY

=item transporter => OBJECT

=back

=back

=head2 Other methods

=over 4

=item $obj-E<gt>B<timespan2seconds>(TIME)

=item Mail::Box::IMAP4-E<gt>B<timespan2seconds>(TIME)

See L<Mail::Box/"Other methods">

=back

=head2 Error handling

=over 4

=item $obj-E<gt>B<AUTOLOAD>

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<addReport>(OBJECT)

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<defaultTrace>([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])

=item Mail::Box::IMAP4-E<gt>B<defaultTrace>([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<errors>

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<log>([LEVEL [,STRINGS]])

=item Mail::Box::IMAP4-E<gt>B<log>([LEVEL [,STRINGS]])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<logPriority>(LEVEL)

=item Mail::Box::IMAP4-E<gt>B<logPriority>(LEVEL)

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<logSettings>

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<notImplemented>

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<report>([LEVEL])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<reportAll>([LEVEL])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<trace>([LEVEL])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<warnings>

See L<Mail::Reporter/"Error handling">

=back

=head2 Cleanup

=over 4

=item $obj-E<gt>B<DESTROY>

See L<Mail::Box/"Cleanup">

=item $obj-E<gt>B<inGlobalDestruction>

See L<Mail::Reporter/"Cleanup">

=back

=head1 DIAGNOSTICS

=over 4

=item Warning: Cannot find head back for $uidl in $folder.

The header was read before, but now seems empty: the IMAP4 server does
not produce the header lines anymore.

=item Warning: Cannot read body for $uidl in $folder.

The header of the message was retreived from the IMAP4 server, but the
body is not read, for an unknown reason.

=item Error: Copying failed for one message.

For some reason, for instance disc full, removed by external process, or
read-protection, it is impossible to copy one of the messages.  Copying will
proceed for the other messages.

=item Error: Couldn't select IMAP4 folder $name

=item Error: Destination folder $name is not writable.

The folder where the messages are copied to is not opened with write
access (see L<new(access)|Mail::Box/"Constructors">).  This has no relation with write permission
to the folder which is controled by your operating system.

=item Warning: Different messages with id $msgid

The message id is discovered more than once within the same folder, but the
content of the message seems to be different.  This should not be possible:
each message must be unique.

=item Error: Folder $name not deleted: not writable.

The folder must be opened with write access via L<new(access)|Mail::Box/"Constructors">, otherwise
removing it will be refused.  So, you may have write-access according to
the operating system, but that will not automatically mean that this
C<delete> method permits you to.  The reverse remark is valid as well.

=item Notice: Impossible to keep deleted messages in IMAP

Some folder type have a 'deleted' flag which can be stored in the folder to
be performed later.  The folder keeps that knowledge even when the folder
is rewritten.  Well, IMAP4 cannot play that trick.

=item Error: Invalid timespan '$timespan' specified.

The string does not follow the strict rules of the time span syntax which
is permitted as parameter.

=item Warning: Message $uidl disappeared from $folder.

Trying to get the specific message from the server, but it appears to be
gone.

=item Warning: Message $uidl disappeared from $folder.

Trying to get the specific message from the server, but it appears to be
gone.

=item Warning: Message-id '$msgid' does not contain a domain.

According to the RFCs, message-ids need to contain a unique random part,
then an C<@>, and then a domain name.  This is made to avoid the creation
of two messages with the same id.  The warning emerges when the C<@> is
missing from the string.

=item Error: No IMAP4 transporter configured

=item Error: Package $package does not implement $method.

Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.

=item Error: Unable to create subfolder $name of $folder.

The copy includes the subfolders, but for some reason it was not possible
to copy one of these.  Copying will proceed for all other sub-folders.

=back

=head1 SEE ALSO

This module is part of Mail-Box distribution version 2.099,
built on July 07, 2011. Website: F<http://perl.overmeer.net/mailbox/>

=head1 LICENSE

Copyrights 2001-2011 by Mark Overmeer. For other contributors see ChangeLog.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See F<http://www.perl.com/perl/misc/Artistic.html>

