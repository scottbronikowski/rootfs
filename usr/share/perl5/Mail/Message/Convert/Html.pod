=head1 NAME

Mail::Message::Convert::Html - Format messages in HTML

=head1 INHERITANCE

 Mail::Message::Convert::Html
   is a Mail::Message::Convert
   is a Mail::Reporter

=head1 SYNOPSIS

 use Mail::Message::Convert::Html;
 my $Html = Mail::Message::Convert::Html->new;

 print $html->fieldToHtml($head);
 print $html->headToHtmlHead($head);
 print $html->headToHtmlTable($head);
 print $html->textToHtml($text);

=head1 DESCRIPTION

=head2 Converters between message objects

=head2 Other converters

The package contains various translators which handle HTML or XHTML
without the help of external modules.  There are more HTML related modules,
which do require extra packages to be installed.

=head1 METHODS

=head2 Constructors

=over 4

=item Mail::Message::Convert::Html-E<gt>B<new>(OPTIONS)

 -Option     --Defined in     --Default
  fields       Mail::Message::Convert  <see description>
  head_mailto                   <true>
  log          Mail::Reporter   'WARNINGS'
  produce                       HTML
  trace        Mail::Reporter   'WARNINGS'

=over 2

=item fields => NAMES|ARRAY-OF-NAMES|REGEXS

=item head_mailto => BOOLEAN

Whether to replace e-mail addresses in some header lines with links.

=item log => LEVEL

=item produce => 'HTML'|'XHTML'

Produce HTML or XHTML output.  The output is slightly different, even
html browsers will usually accept the XHTML data.

=item trace => LEVEL

=back

=back

=head2 Converting

=over 4

=item $obj-E<gt>B<fieldContentsToHtml>(FIELD, [SUBJECT])

Format one field from the header to HTML.  When the header line usually
contains e-mail addresses, the line is scanned and valid addresses
are linked with an C<mailto:> anchor.  The SUBJECT can be specified to
be included in that link.

=item $obj-E<gt>B<fieldToHtml>(FIELD, [SUBJECT])

Reformat one header line field to HTML.  The FIELD's name
is printed in bold, followed by the formatted field content,
which is produced by L<fieldContentsToHtml()|Mail::Message::Convert::Html/"Converting">.

=item $obj-E<gt>B<headToHtmlHead>(HEAD, META)

Translate the selected header lines (fields) to an html page header.  Each
selected field will get its own meta line with the same name as the line.
Furthermore, the C<Subject> field will become the C<title>,
and C<From> is used for the C<Author>.

Besides, you can specify your own meta fields, which will overrule header
fields.  Empty fields will not be included.  When a C<title> is specified,
this will become the html title, otherwise the C<Subject> field is
taken.  In list context, the lines are separately, where in scalar context
the whole text is returned as one.

If you need to add lines to the head (for instance, http-equiv lines), then
splice them before the last element in the returned list.

example: 

 my @head = $html->headToHtmlHead
     ( $head
     , description => 'This is a message'
     , generator   => 'Mail::Box'
     );
 splice @head, -1, 0, '<meta http-equiv=...>';
 print @head;

=item $obj-E<gt>B<headToHtmlTable>(HEAD, [TABLE-PARAMS])

Produce a display of the L<selectedFields()|Mail::Message::Convert/"Converting"> of the header in a
table shape.  The optional TABLE-PARAMS are added as parameters to the
produced TABLE tag.  In list context, the separate lines are returned.
In scalar context, everything is returned as one.

example: 

 print $html->headToHtmlTable($head, 'width="50%"');

=item $obj-E<gt>B<selectedFields>(HEAD)

See L<Mail::Message::Convert/"Converting">

=item $obj-E<gt>B<textToHtml>(LINES)

Translate one or more LINES from text into HTML.  Each line is taken one
after the other, and only simple things are translated.  C<textToHtml>
is able to convert large plain texts in a descent fashion.  In scalar
context, the resulting lines are returned as one.

=back

=head2 Error handling

=over 4

=item $obj-E<gt>B<AUTOLOAD>

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<addReport>(OBJECT)

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<defaultTrace>([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])

=item Mail::Message::Convert::Html-E<gt>B<defaultTrace>([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<errors>

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<log>([LEVEL [,STRINGS]])

=item Mail::Message::Convert::Html-E<gt>B<log>([LEVEL [,STRINGS]])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<logPriority>(LEVEL)

=item Mail::Message::Convert::Html-E<gt>B<logPriority>(LEVEL)

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<logSettings>

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<notImplemented>

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<report>([LEVEL])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<reportAll>([LEVEL])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<trace>([LEVEL])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<warnings>

See L<Mail::Reporter/"Error handling">

=back

=head2 Cleanup

=over 4

=item $obj-E<gt>B<DESTROY>

See L<Mail::Reporter/"Cleanup">

=item $obj-E<gt>B<inGlobalDestruction>

See L<Mail::Reporter/"Cleanup">

=back

=head1 DIAGNOSTICS

=over 4

=item Error: Package $package does not implement $method.

Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.

=back

=head1 SEE ALSO

This module is part of Mail-Box distribution version 2.099,
built on July 07, 2011. Website: F<http://perl.overmeer.net/mailbox/>

=head1 LICENSE

Copyrights 2001-2011 by Mark Overmeer. For other contributors see ChangeLog.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See F<http://www.perl.com/perl/misc/Artistic.html>

