=head1 NAME

Mail::Message::Part - a part of a message, but a message by itself

=head1 INHERITANCE

 Mail::Message::Part
   is a Mail::Message
   is a Mail::Reporter

=head1 SYNOPSIS

 my Mail::Message $message = ...;
 if($message->isMultipart) {
    my Mail::Message::Part $part;

    foreach $part ($message->body->parts) {
       $part->print(\*OUT);
       my $attached_head = $part->head;
       my $attached_body = $part->body;      # encoded as read
       my $attached_body = $part->decoded;   # transfer-encoding removed
    }
 }

=head1 DESCRIPTION

A C<Mail::Message::Part> object contains a message which is included in
the body of an other message.  For instance I<attachments> are I<parts>.

READ L<Mail::Message|Mail::Message> FIRST.  A part is a special message: it has a
reference to its parent message, and will usually not be sub-classed
into mail folder specific variants.

=head1 METHODS

=head2 Constructors

=over 4

=item $obj-E<gt>B<clone>(OPTIONS)

See L<Mail::Message/"Constructors">

=item Mail::Message::Part-E<gt>B<new>(OPTIONS)

Create a message part.

 -Option    --Defined in     --Default
  body        Mail::Message    undef
  body_type   Mail::Message    Mail::Message::Body::Lines
  container                    <required>
  deleted     Mail::Message    <false>
  field_type  Mail::Message    undef
  head        Mail::Message    <empty header>
  head_type   Mail::Message    Mail::Message::Head::Complete
  labels      Mail::Message    {}
  log         Mail::Reporter   'WARNINGS'
  messageId   Mail::Message    undef
  modified    Mail::Message    <false>
  trace       Mail::Reporter   'WARNINGS'
  trusted     Mail::Message    <false>

=over 2

=item body => OBJECT

=item body_type => CLASS

=item container => BODY

Reference to the parental L<Mail::Message::Body|Mail::Message::Body> object where this part
is a member of.  That object may be a L<Mail::Message::Body::Multipart|Mail::Message::Body::Multipart>
or a L<Mail::Message::Body::Nested|Mail::Message::Body::Nested>.

=item deleted => BOOLEAN

=item field_type => CLASS

=item head => OBJECT

=item head_type => CLASS

=item labels => ARRAY|HASH

=item log => LEVEL

=item messageId => STRING

=item modified => BOOLEAN

=item trace => LEVEL

=item trusted => BOOLEAN

=back

=back

=head2 Constructing a message

=over 4

=item $obj-E<gt>B<bounce>([RG-OBJECT|OPTIONS])

See L<Mail::Message::Construct::Bounce/"Constructing a message">

=item Mail::Message::Part-E<gt>B<build>([MESSAGE|PART|BODY], CONTENT)

See L<Mail::Message::Construct::Build/"Constructing a message">

=item Mail::Message::Part-E<gt>B<buildFromBody>(BODY, CONTAINER, HEADERS)

Shape a message part around a BODY.  Bodies have information about their
content in them, which is used to construct a header for the message.
Next to that, more HEADERS can be specified.  No headers are obligatory.
No extra headers are fabricated automatically.

example: 

 my $multi = Mail::Message::Body::Multipart->new;
 my $part  = Mail::Message::Part->buildFromBody($body, $multi);

=item $obj-E<gt>B<forward>(OPTIONS)

See L<Mail::Message::Construct::Forward/"Constructing a message">

=item $obj-E<gt>B<forwardAttach>(OPTIONS)

See L<Mail::Message::Construct::Forward/"Constructing a message">

=item $obj-E<gt>B<forwardEncapsulate>(OPTIONS)

See L<Mail::Message::Construct::Forward/"Constructing a message">

=item $obj-E<gt>B<forwardInline>(OPTIONS)

See L<Mail::Message::Construct::Forward/"Constructing a message">

=item $obj-E<gt>B<forwardNo>(OPTIONS)

See L<Mail::Message::Construct::Forward/"Constructing a message">

=item $obj-E<gt>B<forwardPostlude>

See L<Mail::Message::Construct::Forward/"Constructing a message">

=item $obj-E<gt>B<forwardPrelude>

See L<Mail::Message::Construct::Forward/"Constructing a message">

=item $obj-E<gt>B<forwardSubject>(STRING)

See L<Mail::Message::Construct::Forward/"Constructing a message">

=item Mail::Message::Part-E<gt>B<read>(FILEHANDLE|SCALAR|REF-SCALAR|ARRAY-OF-LINES, OPTIONS)

See L<Mail::Message::Construct::Read/"Constructing a message">

=item $obj-E<gt>B<rebuild>(OPTIONS)

See L<Mail::Message::Construct::Rebuild/"Constructing a message">

=item $obj-E<gt>B<reply>(OPTIONS)

See L<Mail::Message::Construct::Reply/"Constructing a message">

=item $obj-E<gt>B<replyPrelude>([STRING|FIELD|ADDRESS|ARRAY-OF-THINGS])

See L<Mail::Message::Construct::Reply/"Constructing a message">

=item $obj-E<gt>B<replySubject>(STRING)

=item Mail::Message::Part-E<gt>B<replySubject>(STRING)

See L<Mail::Message::Construct::Reply/"Constructing a message">

=back

=head2 The message

=over 4

=item $obj-E<gt>B<container>

See L<Mail::Message/"The message">

=item $obj-E<gt>B<isDummy>

See L<Mail::Message/"The message">

=item $obj-E<gt>B<isPart>

See L<Mail::Message/"The message">

=item $obj-E<gt>B<messageId>

See L<Mail::Message/"The message">

=item $obj-E<gt>B<print>([FILEHANDLE])

See L<Mail::Message/"The message">

=item $obj-E<gt>B<printEscapedFrom>(FILEHANDLE)

Prints the message part, but all lines which start with 'From ' will get
a leading E<gt>.  See L<Mail::Message::Body::printEscapedFrom()|Mail::Message::Body/"Access to the payload">.

=item $obj-E<gt>B<send>([MAILER], OPTIONS)

See L<Mail::Message/"The message">

=item $obj-E<gt>B<size>

See L<Mail::Message/"The message">

=item $obj-E<gt>B<toplevel>

See L<Mail::Message/"The message">

=item $obj-E<gt>B<write>([FILEHANDLE])

See L<Mail::Message/"The message">

=back

=head2 The header

=over 4

=item $obj-E<gt>B<bcc>

See L<Mail::Message/"The header">

=item $obj-E<gt>B<cc>

See L<Mail::Message/"The header">

=item $obj-E<gt>B<date>

See L<Mail::Message/"The header">

=item $obj-E<gt>B<destinations>

See L<Mail::Message/"The header">

=item $obj-E<gt>B<from>

See L<Mail::Message/"The header">

=item $obj-E<gt>B<get>(FIELDNAME)

See L<Mail::Message/"The header">

=item $obj-E<gt>B<guessTimestamp>

See L<Mail::Message/"The header">

=item $obj-E<gt>B<head>([HEAD])

See L<Mail::Message/"The header">

=item $obj-E<gt>B<nrLines>

See L<Mail::Message/"The header">

=item $obj-E<gt>B<sender>

See L<Mail::Message/"The header">

=item $obj-E<gt>B<study>(FIELDNAME)

See L<Mail::Message/"The header">

=item $obj-E<gt>B<subject>

See L<Mail::Message/"The header">

=item $obj-E<gt>B<timestamp>

See L<Mail::Message/"The header">

=item $obj-E<gt>B<to>

See L<Mail::Message/"The header">

=back

=head2 The body

=over 4

=item $obj-E<gt>B<body>([BODY])

See L<Mail::Message/"The body">

=item $obj-E<gt>B<contentType>

See L<Mail::Message/"The body">

=item $obj-E<gt>B<decoded>(OPTIONS)

See L<Mail::Message/"The body">

=item $obj-E<gt>B<encode>(OPTIONS)

See L<Mail::Message/"The body">

=item $obj-E<gt>B<isMultipart>

See L<Mail::Message/"The body">

=item $obj-E<gt>B<isNested>

See L<Mail::Message/"The body">

=item $obj-E<gt>B<parts>(['ALL'|'ACTIVE'|'DELETED'|'RECURSE'|FILTER])

See L<Mail::Message/"The body">

=back

=head2 Flags

=over 4

=item $obj-E<gt>B<delete>

See L<Mail::Message/"Flags">

=item $obj-E<gt>B<deleted>([BOOLEAN])

See L<Mail::Message/"Flags">

=item $obj-E<gt>B<isDeleted>

See L<Mail::Message/"Flags">

=item $obj-E<gt>B<isModified>

See L<Mail::Message/"Flags">

=item $obj-E<gt>B<label>(LABEL|PAIRS)

See L<Mail::Message/"Flags">

=item $obj-E<gt>B<labels>

See L<Mail::Message/"Flags">

=item $obj-E<gt>B<labelsToStatus>

See L<Mail::Message/"Flags">

=item $obj-E<gt>B<modified>([BOOLEAN])

See L<Mail::Message/"Flags">

=item $obj-E<gt>B<statusToLabels>

See L<Mail::Message/"Flags">

=back

=head2 The whole message as text

=over 4

=item $obj-E<gt>B<file>

See L<Mail::Message::Construct::Text/"The whole message as text">

=item $obj-E<gt>B<lines>

See L<Mail::Message::Construct::Text/"The whole message as text">

=item $obj-E<gt>B<printStructure>([FILEHANDLE|undef],[INDENT])

See L<Mail::Message::Construct::Text/"The whole message as text">

=item $obj-E<gt>B<string>

See L<Mail::Message::Construct::Text/"The whole message as text">

=back

=head2 Internals

=over 4

=item $obj-E<gt>B<clonedFrom>

See L<Mail::Message/"Internals">

=item Mail::Message::Part-E<gt>B<coerce>(BODY|MESSAGE, MULTIPART, HEADERS)

Transforms a BODY or MESSAGE to a real message part.  The MULTIPART
refers to the parental body.

When ta BODY is specified, extra HEADERS can be supplied as well.
Bodies are coerced into message parts by calling L<buildFromBody()|Mail::Message::Part/"METHODS">.
If you specify a MESSAGE residing in a folder, this message will
automatically be cloned.

=item $obj-E<gt>B<isDelayed>

See L<Mail::Message/"Internals">

=item $obj-E<gt>B<readBody>(PARSER, HEAD [, BODYTYPE])

See L<Mail::Message/"Internals">

=item $obj-E<gt>B<readFromParser>(PARSER, [BODYTYPE])

See L<Mail::Message/"Internals">

=item $obj-E<gt>B<readHead>(PARSER [,CLASS])

See L<Mail::Message/"Internals">

=item $obj-E<gt>B<recursiveRebuildPart>(PART, OPTIONS)

See L<Mail::Message::Construct::Rebuild/"Internals">

=item $obj-E<gt>B<storeBody>(BODY)

See L<Mail::Message/"Internals">

=item $obj-E<gt>B<takeMessageId>([STRING])

See L<Mail::Message/"Internals">

=back

=head2 Error handling

=over 4

=item $obj-E<gt>B<AUTOLOAD>

See L<Mail::Message::Construct/"METHODS">

=item $obj-E<gt>B<addReport>(OBJECT)

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<defaultTrace>([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])

=item Mail::Message::Part-E<gt>B<defaultTrace>([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<errors>

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<log>([LEVEL [,STRINGS]])

=item Mail::Message::Part-E<gt>B<log>([LEVEL [,STRINGS]])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<logPriority>(LEVEL)

=item Mail::Message::Part-E<gt>B<logPriority>(LEVEL)

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<logSettings>

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<notImplemented>

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<report>([LEVEL])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<reportAll>([LEVEL])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<shortSize>([VALUE])

=item Mail::Message::Part-E<gt>B<shortSize>([VALUE])

See L<Mail::Message/"Error handling">

=item $obj-E<gt>B<shortString>

See L<Mail::Message/"Error handling">

=item $obj-E<gt>B<trace>([LEVEL])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<warnings>

See L<Mail::Reporter/"Error handling">

=back

=head2 Cleanup

=over 4

=item $obj-E<gt>B<DESTROY>

See L<Mail::Message/"Cleanup">

=item $obj-E<gt>B<destruct>

Message parts can not be destructed per part: only whole messages can
be forcefully freed from memory.  Of course, you can L<delete()|Mail::Message/"Flags"> separate
parts, which only sets a flag not to write a part again.  Furthermore,
you may cosider L<rebuild()|Mail::Message::Construct::Rebuild/"Constructing a message"> to get rit of deleted parts.

=item $obj-E<gt>B<inGlobalDestruction>

See L<Mail::Reporter/"Cleanup">

=back

=head1 DIAGNOSTICS

=over 4

=item Error: Cannot include forward source as $include.

Unknown alternative for the L<forward(include)|Mail::Message::Construct::Forward/"Constructing a message">.  Valid choices are
C<NO>, C<INLINE>, C<ATTACH>, and C<ENCAPSULATE>.

=item Error: Cannot include reply source as $include.

Unknown alternative for the C<include> option of L<reply()|Mail::Message::Construct::Reply/"Constructing a message">.  Valid
choices are C<NO>, C<INLINE>, and C<ATTACH>.

=item Error: Method bounce requires To, Cc, or Bcc

The message L<bounce()|Mail::Message::Construct::Bounce/"Constructing a message"> method forwards a received message off to someone
else without modification; you must specified it's new destination.
If you have the urge not to specify any destination, you probably
are looking for L<reply()|Mail::Message::Construct::Reply/"Constructing a message">. When you wish to modify the content, use
L<forward()|Mail::Message::Construct::Forward/"Constructing a message">.

=item Error: Method forwardAttach requires a preamble

=item Error: Method forwardEncapsulate requires a preamble

=item Error: No address to create forwarded to.

If a forward message is created, a destination address must be specified.

=item Error: No default mailer found to send message.

The message L<send()|Mail::Message/"The message"> mechanism had not enough information to automatically
find a mail transfer agent to sent this message.  Specify a mailer
explicitly using the C<via> options.

=item Error: No rebuild rule $name defined.

=item Error: Only build() Mail::Message's; they are not in a folder yet

You may wish to construct a message to be stored in a some kind
of folder, but you need to do that in two steps.  First, create a
normal L<Mail::Message|Mail::Message>, and then add it to the folder.  During this
L<Mail::Box::addMessage()|Mail::Box/"The folder"> process, the message will get L<coerce()|Mail::Message::Part/"METHODS">-d
into the right message type, adding storage information and the like.

=item Error: Package $package does not implement $method.

Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.

=item Error: You cannot destruct message parts, only whole messages

Message parts can not be destructed per part: only whole messages can
be forcefully freed from memory. Consider L<delete()|Mail::Message/"Flags"> or L<rebuild()|Mail::Message::Construct::Rebuild/"Constructing a message">.

=back

=head1 SEE ALSO

This module is part of Mail-Box distribution version 2.099,
built on July 07, 2011. Website: F<http://perl.overmeer.net/mailbox/>

=head1 LICENSE

Copyrights 2001-2011 by Mark Overmeer. For other contributors see ChangeLog.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See F<http://www.perl.com/perl/misc/Artistic.html>

