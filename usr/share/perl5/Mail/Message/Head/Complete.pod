=head1 NAME

Mail::Message::Head::Complete - the header of one message

=head1 INHERITANCE

 Mail::Message::Head::Complete
   is a Mail::Message::Head
   is a Mail::Reporter

 Mail::Message::Head::Complete is extended by
   Mail::Message::Head::Partial
   Mail::Message::Replace::MailHeader

 Mail::Message::Head::Complete is realized by
   Mail::Message::Head::Delayed
   Mail::Message::Head::Subset

=head1 SYNOPSIS

 my $head = Mail::Message::Head::Complete->new;
 See Mail::Message::Head

=head1 DESCRIPTION

E-mail's message can be in various states: unread, partially read, and
fully read.  The class stores a message of which all header lines are
known for sure.

=head1 OVERLOADED

=over 4

=item overload: B<"">

See L<Mail::Message::Head/"OVERLOADED">

=item overload: B<bool>

See L<Mail::Message::Head/"OVERLOADED">

=back

=head1 METHODS

=head2 Constructors

=over 4

=item $obj-E<gt>B<build>([PAIR|FIELD]-LIST)

Undefined values are interpreted as empty field values, and therefore skipped.

=item $obj-E<gt>B<clone>([NAMES|ARRAY-OF-NAMES|REGEXS])

Make a copy of the header, optionally limited only to the header lines
specified by NAMES.  See L<grepNames()|Mail::Message::Head::Complete/"Access to the header"> on the way these fields can be
used.

example: 

 my $newhead = $head->clone('Subject', 'Received');

=item Mail::Message::Head::Complete-E<gt>B<new>(OPTIONS)

See L<Mail::Message::Head/"Constructors">

=back

=head2 The header

=over 4

=item $obj-E<gt>B<isDelayed>

See L<Mail::Message::Head/"The header">

=item $obj-E<gt>B<isEmpty>

See L<Mail::Message::Head/"The header">

=item $obj-E<gt>B<isModified>

See L<Mail::Message::Head/"The header">

=item $obj-E<gt>B<knownNames>

See L<Mail::Message::Head/"The header">

=item $obj-E<gt>B<message>([MESSAGE])

See L<Mail::Message::Head/"The header">

=item $obj-E<gt>B<modified>([BOOLEAN])

See L<Mail::Message::Head/"The header">

=item $obj-E<gt>B<nrLines>

Return the number of lines needed to display this header (including
the trailing newline)

=item $obj-E<gt>B<orderedFields>

See L<Mail::Message::Head/"The header">

=item $obj-E<gt>B<size>

Return the number of bytes needed to display this header (including
the trailing newline).  On systems which use CRLF as line separator,
the number of lines in the header (see L<nrLines()|Mail::Message::Head::Complete/"The header">) must be added to
find the actual size in the file.

=item $obj-E<gt>B<wrap>(INTEGER)

Re-fold all fields from the header to contain at most INTEGER number of
characters per line.

example: re-folding a header

 $msg->head->wrap(78);

=back

=head2 Access to the header

=over 4

=item $obj-E<gt>B<add>(FIELD | LINE | (NAME,BODY[,ATTRS]))

Add a field to the header.  If a field is added more than once, all values
are stored in the header, in the order they are added.

When a FIELD object is specified (some L<Mail::Message::Field|Mail::Message::Field> instance), that
will be added.  Another possibility is to specify a raw header LINE, or a
header line nicely split-up in NAME and BODY, in which case the
field constructor is called for you.

LINE or BODY specifications which are terminated by a new-line are considered
to be correctly folded.  Lines which are not terminated by a new-line will
be folded when needed: new-lines will be added where required.  It is strongly
advised to let MailBox do the folding for you.

The return value of this method is the L<Mail::Message::Field|Mail::Message::Field> object
which is created (or was specified).

example: 

 my $head  = Mail::Message::Head->new;
 $head->add('Subject: hi!');
 $head->add(From => 'me@home');
 my $field = Mail::Message::Field->new('To: you@there');
 $head->add($field);
 my Mail::Message::Field $s = $head->add(Sender => 'I');

=item $obj-E<gt>B<addListGroup>(OBJECT)

A I<list group> is a set of header fields which contain data about a
mailing list which was used to transmit the message.  See
L<Mail::Message::Head::ListGroup|Mail::Message::Head::ListGroup> for details about the implementation
of the OBJECT.

When you have a list group prepared, you can add it later using this
method.  You will get your private copy of the list group data in
return, because the same group can be used for multiple messages.

example: of adding a list group to a header

 my $lg = Mail::Message::Head::ListGroup->new(...);
 my $own_lg = $msg->head->addListGroup($lg);

=item $obj-E<gt>B<addResentGroup>(RESENT-GROUP|DATA)

Add a RESENT-GROUP (a L<Mail::Message::Head::ResentGroup|Mail::Message::Head::ResentGroup> object) to
the header.  If you specify DATA, that is used to create such group
first.  If no C<Received> line is specified, it will be created
for you.

These header lines have nothing to do with the user's sense
of C<reply> or C<forward> actions: these lines trace the e-mail
transport mechanism.

example: 

 my $rg = Mail::Message::Head::ResentGroup->new(head => $head, ...);
 $head->addResentGroup($rg);

 my $rg = $head->addResentGroup(From => 'me');

=item $obj-E<gt>B<addSpamGroup>(OBJECT)

A I<spam fighting group> is a set of header fields which contains data
which is used to fight spam.  See L<Mail::Message::Head::SpamGroup|Mail::Message::Head::SpamGroup>
for details about the implementation of the OBJECT.

When you have a spam group prepared, you can add it later using this
method.  You will get your private copy of the spam group data in
return, because the same group can be used for multiple messages.

example: of adding a spam group to a header

 my $sg = Mail::Message::Head::SpamGroup->new(...);
 my $own_sg = $msg->head->addSpamGroup($sg);

=item $obj-E<gt>B<count>(NAME)

Count the number of fields with this NAME.  Most fields will return 1:
only one occurance in the header.  As example, the C<Received> fields
are usually present more than once.

=item $obj-E<gt>B<delete>(NAME)

Remove the field with the specified name.  If the header contained
multiple lines with the same name, they will be replaced all together.
This method simply calls L<reset()|Mail::Message::Head::Complete/"Access to the header"> without replacement fields.
READ THE IMPORTANT WARNING IN L<removeField()|Mail::Message::Head::Complete/"Access to the header">

=item $obj-E<gt>B<get>(NAME [,INDEX])

See L<Mail::Message::Head/"Access to the header">

=item $obj-E<gt>B<grepNames>([NAMES|ARRAY-OF-NAMES|REGEXS])

Filter from all header fields those with names which start will any of the
specified list.  When no names are specified, all fields will be returned.
The list is ordered as they where read from file, or added later.

The NAMES are considered regular expressions, and will all be matched
case insensitive and attached to the front of the string only.  You may
also specify one or more prepared regexes.

example: 

 my @f  = $head->grepNames();       # same as $head->orderedFields
 my @f  = $head->grepNames('X-', 'Subject', ');
 my @to = $head->grepNames('To\b'); # will only select To

=item $obj-E<gt>B<listGroup>

Returns a I<list group> description: the set of headers which form
the information about mailing list software used to transport the
message.  See also L<addListGroup()|Mail::Message::Head::Complete/"Access to the header"> and L<removeListGroup()|Mail::Message::Head::Complete/"Access to the header">.

example: use of listGroup()

 if(my $lg = $msg->head->listGroup)
 {  $lg->print(\*STDERR);
    $lg->delete;
 }

 $msg->head->removeListGroup;

=item $obj-E<gt>B<names>

Returns a full ordered list of known field names, as defined in the
header.  Fields which were reset() to be empty will still be
listed here.

=item $obj-E<gt>B<print>([FILEHANDLE])

Print all headers to the specified FILEHANDLE, by default the selected
filehandle.  See L<printUndisclosed()|Mail::Message::Head::Complete/"Access to the header"> to limit the headers to include
only the public headers.

example: 

 $head->print(\*OUT);
 $head->print;

 my $fh = IO::File->new(...);
 $head->print($fh);

=item $obj-E<gt>B<printSelected>(FILEHANDLE, (STRING|REGEXP)s)

Like the usual L<print()|Mail::Message::Head::Complete/"Access to the header">, the header lines are printed to the specified
FILEHANDLE.  In this case, however, only the fields with names as specified by
STRING (case insensative) or REGEXP are printed.  They will stay the in-order
of the source header.

example: printing only a subset of the fields

 $head->printSelected(STDOUT, qw/Subject From To/, qr/^x\-(spam|xyz)\-/i)

=item $obj-E<gt>B<printUndisclosed>([FILEHANDLE])

Like the usual L<print()|Mail::Message::Head::Complete/"Access to the header">, the header lines are printed to the specified
FILEHANDLE, by default the selected filehandle.  In this case, however,
C<Bcc> and C<Resent-Bcc> lines are included.

=item $obj-E<gt>B<removeContentInfo>

Remove all body related fields from the header.  The header will become
partial.

=item $obj-E<gt>B<removeField>(FIELD)

Remove the specified FIELD object from the header.  This is useful when
there are possible more than one fields with the same name, and you
need to remove exactly one of them.  Also have a look at L<delete()|Mail::Message::Head::Complete/"Access to the header">,
L<reset()|Mail::Message::Head::Complete/"Access to the header">, and L<set()|Mail::Message::Head::Complete/"Access to the header">.

See also L<Mail::Message::Head::Partial::removeFields()|Mail::Message::Head::Partial/"Access to the header"> (mind the 's'
at the end of the name), which accepts a string or regular expression
as argument to select the fields to be removed.

WARNING WARNING WARNING: for performance reasons, the header administration
uses weak references (see L<Scalar::Util> method weaken()> to figure-out
which fields have been removed.  A header is a hash of field for fast search
and an array of weak references to remember the order of the fields, required
for printing.  If the field is removed from the hash, the weak-ref is set to
undef and the field not printed.

However... it is easy to disturb this process.  Example:
 my $msg = ....;                 # subject ref-count = 1 + 0 = 1
 $msg->head->delete('Subject');  # subject ref-count =     0 = 0: clean-up
 $msg->print;                    # subject doesn't show: ok

But
 my $msg = ....;                 # subject ref-count = 1 + 0 = 1
 my $s = $msg->head->get('subject'); # ref-count = 1 + 1 + 0 = 2
 $msg->head->delete('Subject');  # subject ref-count = 1 + 0 = 1: no clean-up
 $msg->print;                    # subject DOES show: not ok
 undef $s;                       # ref-count becomes 0: clean-up
 $msg->print;                    # subject doesn't show: ok

To avoid the latter situation, do not catch the field object, but only
the field content.  SAVE are all methods which return the text:
 my $s = $msg->head->get('subject')->body;
 my $s = $msg->head->get('subject')->unfoldedBody;
 my $s = $msg->head->get('subject')->foldedBody;
 my $s = $msg->head->get('subject')->foldedBody;
 my $s = $msg->get('subject');
 my $s = $msg->subject;
 my $s = $msg->string;

=item $obj-E<gt>B<removeFields>(STRING|REGEXP, [STRING|REGEXP, ...])

The header object is turned into a L<Mail::Message::Head::Partial|Mail::Message::Head::Partial> object
which has a set of fields removed.  Read about the implications and the
possibilities in L<Mail::Message::Head::Partial::removeFields()|Mail::Message::Head::Partial/"Access to the header">.

=item $obj-E<gt>B<removeFieldsExcept>(STRING|REGEXP, [STRING|REGEXP, ...])

The header object is turned into a L<Mail::Message::Head::Partial|Mail::Message::Head::Partial> object
which has a set of fields removed.  Read about the implications and the
possibilities in L<Mail::Message::Head::Partial::removeFieldsExcept()|Mail::Message::Head::Partial/"Access to the header">.

=item $obj-E<gt>B<removeListGroup>

Removes all fields related to mailing list administration at once.
The header object is turned into a L<Mail::Message::Head::Partial|Mail::Message::Head::Partial>
object.  Read about the implications and the possibilities in
L<Mail::Message::Head::Partial::removeListGroup()|Mail::Message::Head::Partial/"Access to the header">.

=item $obj-E<gt>B<removeResentGroups>

Removes all resent groups at once.  The header object is turned into
a L<Mail::Message::Head::Partial|Mail::Message::Head::Partial> object.  Read about the implications and the
possibilities in L<Mail::Message::Head::Partial::removeResentGroups()|Mail::Message::Head::Partial/"Access to the header">.

=item $obj-E<gt>B<removeSpamGroups>

Removes all fields which were added by various spam detection software
at once.  The header object is turned into a L<Mail::Message::Head::Partial|Mail::Message::Head::Partial>
object.  Read about the implications and the possibilities in
L<Mail::Message::Head::Partial::removeSpamGroups()|Mail::Message::Head::Partial/"Access to the header">.

=item $obj-E<gt>B<resentGroups>

Returns a list of L<Mail::Message::Head::ResentGroup|Mail::Message::Head::ResentGroup> objects which
each represent one intermediate point in the message's transmission in
the order as they appear in the header: the most recent one first.
See also L<addResentGroup()|Mail::Message::Head::Complete/"Access to the header"> and L<removeResentGroups()|Mail::Message::Head::Complete/"Access to the header">.

A resent group contains a set of header fields whose names start
with C<Resent-*>.  Before the first C<Resent> line is I<trace> information,
which is composed of an optional C<Return-Path> field and an required
C<Received> field.

=item $obj-E<gt>B<reset>(NAME, FIELDS)

Replace the values in the header fields named by NAME with the values
specified in the list of FIELDS. A single name can correspond to multiple
repeated fields.  READ THE IMPORTANT WARNING IN L<removeField()|Mail::Message::Head::Complete/"Access to the header">

Removing fields which are part of one of the predefined field groups is
not a smart idea.  You can better remove these fields as group, all
together.  For instance, the C<'Received'> lines are part of resent
groups, C<'X-Spam'> is past of a spam group, and C<List-Post> belongs
to a list group.  You can delete a whole group with
L<Mail::Message::Head::FieldGroup::delete()|Mail::Message::Head::FieldGroup/"The header">, or with methods which
are provided by L<Mail::Message::Head::Partial|Mail::Message::Head::Partial>.

If FIELDS is empty, the corresponding NAME fields will
be removed. The location of removed fields in the header order will be
remembered. Fields with the same name which are added later will appear at
the remembered position.  This is equivalent to the L<delete()|Mail::Message::Head::Complete/"Access to the header"> method.

example: 

 # reduce number of 'Keywords' lines to last 5)
 my @keywords = $head->get('Keywords');
 $head->reset('Keywords', @keywords[-5..-1]) if @keywords > 5;

 # Reduce the number of Received lines to only the last added one.
 my @rgs = $head->resentGroups;
 shift @rgs;     # keep this one (later is added in front)
 $_->delete foreach @rgs;

=item $obj-E<gt>B<set>(FIELD | LINE | (NAME, BODY [,ATTRS]))

The C<set> method is similar to the L<add()|Mail::Message::Head::Complete/"Access to the header"> method, and takes the same
options. However, existing values for fields will be removed before a new
value is added.  READ THE IMPORTANT WARNING IN L<removeField()|Mail::Message::Head::Complete/"Access to the header">

=item $obj-E<gt>B<spamDetected>

Returns whether one of the spam groups defines a report about spam.  If there
are not header fields in the message which relate to spam-detection
software, C<undef> is returned.  The spamgroups which report spam are returned.

example: 

 $message->delete if $message->spamDetected;

 call_spamassassin($message)
    unless defined $message->spamDetected;

=item $obj-E<gt>B<spamGroups>([NAMES])

Returns a list of L<Mail::Message::Head::SpamGroup|Mail::Message::Head::SpamGroup> objects, each collecting
some lines which contain spam fighting information.  When any NAMES are
given, then only these groups are returned.
See also L<addSpamGroup()|Mail::Message::Head::Complete/"Access to the header"> and L<removeSpamGroups()|Mail::Message::Head::Complete/"Access to the header">.

In scalar context, with exactly one NAME specified, that group will be
returned.  With more NAMES or without NAMES, a list will be returned
(which defaults to the length of the list in scalar context).

example: use of listGroup()

 my @sg = $msg->head->spamGroups;
 $sg[0]->print(\*STDERR);
 $sg[-1]->delete;

 my $sg = $msg->head->spamGroups('SpamAssassin');

=item $obj-E<gt>B<string>

Returns the whole header as one scalar (in scalar context) or list
of lines (list context).  Triggers completion.

=item $obj-E<gt>B<study>(NAME [,INDEX])

See L<Mail::Message::Head/"Access to the header">

=back

=head2 About the body

=over 4

=item $obj-E<gt>B<guessBodySize>

See L<Mail::Message::Head/"About the body">

=item $obj-E<gt>B<guessTimeStamp>

Make a guess about when the message was origanally posted, based on the
information found in the header's C<Date> field.

For some kinds of folders, L<Mail::Message::guessTimestamp()|Mail::Message/"The header"> may produce
a better result, for instance by looking at the modification time of the
file in which the message is stored.  Also some protocols, like POP can
supply that information.

=item $obj-E<gt>B<isMultipart>

See L<Mail::Message::Head/"About the body">

=item $obj-E<gt>B<recvstamp>

Returns an indication about when the message was sent, but only using the
C<Date> field in the header as last resort: we do not trust the sender of
the message to specify the correct date.  See L<timestamp()|Mail::Message::Head::Complete/"About the body"> when you do
trust the sender.

Many spam producers fake a date, which mess up the order of receiving
things.  The timestamp which is produced is derived from the Received
headers, if they are present, and C<undef> otherwise.

The timestamp is encoded as C<time> is on your system (see perldoc -f
time), and as such usable for the C<gmtime> and C<localtime> methods.

example: of time-sorting folders with received messages

 my $folder = $mgr->open('InBox');
 my @messages = sort {$a->recvstamp <=> $b->recvstamp}
                   $folder->messages;

example: of time-sorting messages of mixed origin

 my $folder = $mgr->open('MyFolder');

 # Pre-calculate timestamps to be sorted (for speed)
 my @stamps = map { [ ($_->timestamp || 0), $_ ] }
                     $folder->messages;

 my @sorted
   = map { $_->[1] }      # get the message for the stamp
       sort {$a->[0] <=> $b->[0]}   # stamps are numerics
          @stamps;

=item $obj-E<gt>B<timestamp>

Returns an indication about when the message was sent, with as
little guessing as possible.  In this case, the date as specified by the
sender is trusted.  See L<recvstamp()|Mail::Message::Head::Complete/"About the body"> when you do not want to trust the
sender.

The timestamp is encoded as C<time> is
on your system (see perldoc -f time), and as such usable for the C<gmtime>
and C<localtime> methods.

=back

=head2 Internals

=over 4

=item $obj-E<gt>B<addNoRealize>(FIELD)

See L<Mail::Message::Head/"Internals">

=item $obj-E<gt>B<addOrderedFields>(FIELDS)

See L<Mail::Message::Head/"Internals">

=item $obj-E<gt>B<createFromLine>

For some mail-folder types separate messages by a line starting with
'C<From >'.  If a message is moved to such folder from a folder-type
which does not support these separators, this method is called to produce
one.

=item $obj-E<gt>B<createMessageId>

Creates a message-id for this message.  This method will be run when
a new message is created, or a message is discovered without the
message-id header field.  Message-ids are required for detection of
message-threads.  See L<messageIdPrefix()|Mail::Message::Head::Complete/"Internals">.

=item $obj-E<gt>B<fileLocation>

See L<Mail::Message::Head/"Internals">

=item $obj-E<gt>B<load>

See L<Mail::Message::Head/"Internals">

=item $obj-E<gt>B<messageIdPrefix>([PREFIX, [HOSTNAME]|CODE])

=item Mail::Message::Head::Complete-E<gt>B<messageIdPrefix>([PREFIX, [HOSTNAME]|CODE])

When options are provided, it sets a new way to create message-ids,
as used by L<createMessageId()|Mail::Message::Head::Complete/"Internals">.  You have two choices: either by
providing a PREFIX and optionally a HOSTNAME, or a CODE reference.

The CODE reference will be called with the header as first argument.
You must ensure yourself that the returned value is RFC compliant.

The PREFIX defaults to C<mailbox-$$>, the HOSTNAME defaults to the
return of L<Sys::Hostname>'s method C<hostname()>.  Inbetween the
two, a nano-second time provided by L<Time::Hires> is used.  If that
module is not available, C<time> is called at the start of the program,
and incremented for each newly created id.

In any case, a subroutine will be created to be used.  A reference
to that will be returned.  When the method is called without arguments,
but no subroutine is defined yet, one will be created.

example: setting a message prefix

  $head->messageIdPrefix('prefix');
  Mail::Message::Head::Complete->messageIdPrefix('prefix');
  my $code = $head->messageIdPrefix('mailbox', 'nohost');

  sub new_msgid()
  {   my $head = shift;
      "myid-$$-${(rand 10000)}@example.com";
  }

  $many_msg->messageIdPrefix(\&new_msgid);
  Mail::Message::Head::Complete->messageIdPrefix(&new_msgid);

=item $obj-E<gt>B<moveLocation>(DISTANCE)

See L<Mail::Message::Head/"Internals">

=item $obj-E<gt>B<read>(PARSER)

See L<Mail::Message::Head/"Internals">

=item $obj-E<gt>B<setNoRealize>(FIELD)

See L<Mail::Message::Head/"Internals">

=back

=head2 Error handling

=over 4

=item $obj-E<gt>B<AUTOLOAD>

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<addReport>(OBJECT)

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<defaultTrace>([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])

=item Mail::Message::Head::Complete-E<gt>B<defaultTrace>([LEVEL]|[LOGLEVEL, TRACELEVEL]|[LEVEL, CALLBACK])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<errors>

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<log>([LEVEL [,STRINGS]])

=item Mail::Message::Head::Complete-E<gt>B<log>([LEVEL [,STRINGS]])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<logPriority>(LEVEL)

=item Mail::Message::Head::Complete-E<gt>B<logPriority>(LEVEL)

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<logSettings>

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<notImplemented>

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<report>([LEVEL])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<reportAll>([LEVEL])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<trace>([LEVEL])

See L<Mail::Reporter/"Error handling">

=item $obj-E<gt>B<warnings>

See L<Mail::Reporter/"Error handling">

=back

=head2 Cleanup

=over 4

=item $obj-E<gt>B<DESTROY>

See L<Mail::Reporter/"Cleanup">

=item $obj-E<gt>B<inGlobalDestruction>

See L<Mail::Reporter/"Cleanup">

=back

=head1 DIAGNOSTICS

=over 4

=item Warning: Cannot remove field $name from header: not found.

You ask to remove a field which is not known in the header.  Using
L<delete()|Mail::Message::Head::Complete/"Access to the header">, L<reset()|Mail::Message::Head::Complete/"Access to the header">, or L<set()|Mail::Message::Head::Complete/"Access to the header"> to do the job will not result
in warnings: those methods check the existence of the field first.

=item Warning: Field objects have an implied name ($name)

=item Error: Package $package does not implement $method.

Fatal error: the specific package (or one of its superclasses) does not
implement this method where it should. This message means that some other
related classes do implement this method however the class at hand does
not.  Probably you should investigate this and probably inform the author
of the package.

=back

=head1 SEE ALSO

This module is part of Mail-Box distribution version 2.099,
built on July 07, 2011. Website: F<http://perl.overmeer.net/mailbox/>

=head1 LICENSE

Copyrights 2001-2011 by Mark Overmeer. For other contributors see ChangeLog.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See F<http://www.perl.com/perl/misc/Artistic.html>

