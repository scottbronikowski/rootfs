=head1 NAME

User::Identity::Collection - base class for collecting roles of a user

=head1 INHERITANCE

 User::Identity::Collection
   is a User::Identity::Item

 User::Identity::Collection is extended by
   User::Identity::Collection::Emails
   User::Identity::Collection::Locations
   User::Identity::Collection::Systems
   User::Identity::Collection::Users

=head1 SYNOPSIS

 use User::Identity;
 use User::Identity::Collection;
 my $me    = User::Identity->new(...);
 my $set   = User::Identity::Collection::Emails->new(...);
 $me->addCollection($set);

 # Simpler
 use User::Identity;
 my $me    = User::Identity->new(...);
 my $set   = $me->addCollection(type => 'email', ...)
 my $set   = $me->addCollection('email', ...)

 my @roles = $me->collection('email');  # list of collected items

 my $coll  = $me->collection('email');  # a User::Identity::Collection
 my @roles = $coll->roles;
 my @roles = @$coll;                    # same, by overloading

 my $role  = $me->collection('email')->find($coderef);
 my $role  = $me->collection('location')->find('work');
 my $role  = $me->find(location => 'work');

=head1 DESCRIPTION

The C<User::Identity::Collection> object maintains a set user related
objects.  It helps selecting these objects, which is partially common to
all collections (for instance, each object has a name so you can search
on names), and sometimes specific to the extension of this collection.

Currently imlemented extensions are

=over 4

=item * I<people> is a L<collection of users|User::Identity::Collection::Users>

=item * I<whereabouts> are L<locations|User::Identity::Collection::Locations>

=item * a I<mailinglist> is a

L<collection of email addresses|User::Identity::Collection::Emails>

=item * a I<network> contains

L<groups of systems|User::Identity::Collection::Systems>

=back

=head1 OVERLOADED

overload: B<@{}>

=over 4

When the reference to a collection object is used as array-reference, it
will be shown as list of roles.

example: 

 my $locations = $ui->collection('location');
 foreach my $loc (@$location) ...
 print $location->[0];

=back

overload: B<stringification>

=over 4

Returns the name of the collection and a sorted list of defined items.

example: 

 print "$collection\n";  #   location: home, work

=back

=head1 METHODS

=head2 Constructors

User::Identity::Collection-E<gt>B<new>([NAME], OPTIONS)

=over 4

 Option     --Defined in     --Default
 description  User::Identity::Item  undef
 item_type                     <required>
 name         User::Identity::Item  <required>
 parent       User::Identity::Item  undef
 roles                         undef

. description => STRING

. item_type => CLASS

=over 4

The CLASS which is used to store the information for each of the maintained
objects within this collection.

=back

. name => STRING

. parent => OBJECT

. roles => ROLE|ARRAY

=over 4

Immediately add some roles to this collection.  In case of an ARRAY,
each element of the array is passed separately to L<addRole()|User::Identity::Collection/"Maintaining roles">. So,
you may end-up with an ARRAY of arrays each grouping a set of options
to create a role.

=back

=back

=head2 Attributes

$obj-E<gt>B<description>

=over 4

See L<User::Identity::Item/"Attributes">

=back

$obj-E<gt>B<itemType>

=over 4

Returns the type of the items collected.

=back

$obj-E<gt>B<name>([NEWNAME])

=over 4

See L<User::Identity::Item/"Attributes">

=back

$obj-E<gt>B<roles>

=over 4

Returns all defined roles within this collection.  Be warned: the rules
are returned in random (hash) order.

=back

=head2 Collections

$obj-E<gt>B<add>(COLLECTION, ROLE)

=over 4

See L<User::Identity::Item/"Collections">

=back

$obj-E<gt>B<addCollection>(OBJECT | ([TYPE], OPTIONS))

=over 4

See L<User::Identity::Item/"Collections">

=back

$obj-E<gt>B<collection>(NAME)

=over 4

See L<User::Identity::Item/"Collections">

=back

$obj-E<gt>B<parent>([PARENT])

=over 4

See L<User::Identity::Item/"Collections">

=back

$obj-E<gt>B<removeCollection>(OBJECT|NAME)

=over 4

See L<User::Identity::Item/"Collections">

=back

$obj-E<gt>B<type>

User::Identity::Collection-E<gt>B<type>

=over 4

See L<User::Identity::Item/"Collections">

=back

$obj-E<gt>B<user>

=over 4

See L<User::Identity::Item/"Collections">

=back

=head2 Maintaining roles

$obj-E<gt>B<addRole>(ROLE| ( [NAME],OPTIONS ) | ARRAY-OF-OPTIONS)

=over 4

Adds a new role to this collection.  ROLE is an object of the right type
(depends on the extension of this module which type that is) or a list
of OPTIONS which are used to create such role.  The options can also be
passed as reference to an array.  The added role is returned.

example: 

 my $uicl = User::Identity::Collection::Locations->new;

 my $uil  = User::Identity::Location->new(home => ...);
 $uicl->addRole($uil);

 $uicl->addRole( home => address => 'street 32' );
 $uicl->addRole( [home => address => 'street 32'] );

Easier

 $ui      = User::Identity;
 $ui->add(location => 'home', address => 'street 32' );
 $ui->add(location => [ 'home', address => 'street 32' ] );

=back

$obj-E<gt>B<removeRole>(ROLE|NAME)

=over 4

The deleted role is returned (if it existed).

=back

$obj-E<gt>B<renameRole>(ROLE|OLDNAME, NEWNAME)

=over 4

Give the role a different name, and move it in the collection.

=back

$obj-E<gt>B<sorted>

=over 4

Returns the roles sorted by name, alphabetically and case-sensitive.

=back

=head2 Searching

$obj-E<gt>B<find>(NAME|CODE|undef)

=over 4

Find the object with the specified NAME in this collection.  With C<undef>,
a randomly selected role is returned.

When a code reference is specified, all collected roles are scanned one
after the other (in unknown order).  For each role,

 CODE->($object, $collection)

is called.  When the CODE returns true, the role is selected.  In list context,
all selected roles are returned.  In scalar context, the first match is
returned and the scan is aborted immediately.

example: 

 my $emails = $ui->collection('emails');
 $emails->find('work');

 sub find_work($$) {
    my ($mail, $emails) = @_;
    $mail->location->name eq 'work';
 }
 my @at_work = $emails->find(\&find_work);
 my @at_work = $ui->find(location => \&find_work);
 my $any     = $ui->find(location => undef );

=back

=head1 DIAGNOSTICS

Error: $object is not a collection.

=over 4

The first argument is an object, but not of a class which extends
L<User::Identity::Collection|User::Identity::Collection>.

=back

Error: Cannot create a $type to add this to my collection.

=over 4

Some options are specified to create a $type object, which is native to
this collection.  However, for some reason this failed.

=back

Error: Cannot load collection module for $type ($class).

=over 4

Either the specified $type does not exist, or that module named $class returns
compilation errors.  If the type as specified in the warning is not
the name of a package, you specified a nickname which was not defined.
Maybe you forgot the 'require' the package which defines the nickname.

=back

Error: Cannot rename $name into $newname: already exists

=over 4

=back

Error: Cannot rename $name into $newname: doesn't exist

=over 4

=back

Error: Creation of a collection via $class failed.

=over 4

The $class did compile, but it was not possible to create an object
of that class using the options you specified.

=back

Error: Don't know what type of collection you want to add.

=over 4

If you add a collection, it must either by a collection object or a
list of options which can be used to create a collection object.  In
the latter case, the type of collection must be specified.

=back

Warning: No collection $name

=over 4

The collection with $name does not exist and can not be created.

=back

Error: Wrong type of role for $collection: requires a $expect but got a $type

=over 4

Each $collection groups sets of roles of one specific type ($expect).  You
cannot add objects of a different $type.

=back

=head1 SEE ALSO

This module is part of User-Identity distribution version 0.93,
built on December 24, 2009. Website: F<http://perl.overmeer.net/userid/>

=head1 LICENSE

Copyrights 2003,2004,2007-2009 by Mark Overmeer <perl@overmeer.net>. For other contributors see Changes.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See F<http://www.perl.com/perl/misc/Artistic.html>

