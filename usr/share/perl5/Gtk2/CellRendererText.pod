=head1 NAME

Gtk2::CellRendererText - wrapper for GtkCellRendererText

=cut

=head1 HIERARCHY

  Glib::Object
  +----Glib::InitiallyUnowned
       +----Gtk2::Object
            +----Gtk2::CellRenderer
                 +----Gtk2::CellRendererText



=cut


=head1 METHODS

=head2 cellrenderer = Gtk2::CellRendererText-E<gt>B<new> 

=head2 $renderer-E<gt>B<set_fixed_height_from_font> ($number_of_rows)

=over

=item * $number_of_rows (integer) 

=back



=cut


=head1 PROPERTIES

=over

=item 'align-set' (boolean : default false : readable / writable / private)

Whether this tag affects the alignment mode

=item 'alignment' (Pango::Alignment : default "left" : readable / writable / private)

How to align the lines

=item 'attributes' (Pango::AttrList : default undef : readable / writable / private)

A list of style attributes to apply to the text of the renderer

=item 'background' (string : default undef : writable / private)

Background color as a string

=item 'background-gdk' (Gtk2::Gdk::Color : default undef : readable / writable / private)

Background color as a GdkColor

=item 'background-set' (boolean : default false : readable / writable / private)

Whether this tag affects the background color

=item 'editable' (boolean : default false : readable / writable / private)

Whether the text can be modified by the user

=item 'editable-set' (boolean : default false : readable / writable / private)

Whether this tag affects text editability

=item 'ellipsize' (Pango::EllipsizeMode : default "none" : readable / writable / private)

The preferred place to ellipsize the string, if the cell renderer does not have enough room to display the entire string

=item 'ellipsize-set' (boolean : default false : readable / writable / private)

Whether this tag affects the ellipsize mode

=item 'family' (string : default undef : readable / writable / private)

Name of the font family, e.g. Sans, Helvetica, Times, Monospace

=item 'family-set' (boolean : default false : readable / writable / private)

Whether this tag affects the font family

=item 'font' (string : default undef : readable / writable / private)

Font description as a string, e.g. "Sans Italic 12"

=item 'font-desc' (Pango::FontDescription : default undef : readable / writable / private)

Font description as a PangoFontDescription struct

=item 'foreground' (string : default undef : writable / private)

Foreground color as a string

=item 'foreground-gdk' (Gtk2::Gdk::Color : default undef : readable / writable / private)

Foreground color as a GdkColor

=item 'foreground-set' (boolean : default false : readable / writable / private)

Whether this tag affects the foreground color

=item 'language' (string : default undef : readable / writable / private)

The language this text is in, as an ISO code. Pango can use this as a hint when rendering the text. If you don't understand this parameter, you probably don't need it

=item 'language-set' (boolean : default false : readable / writable / private)

Whether this tag affects the language the text is rendered as

=item 'markup' (string : default undef : writable / private)

Marked up text to render

=item 'rise' (integer : default 0 : readable / writable / private)

Offset of text above the baseline (below the baseline if rise is negative)

=item 'rise-set' (boolean : default false : readable / writable / private)

Whether this tag affects the rise

=item 'scale' (double : default 1 : readable / writable / private)

Font scaling factor

=item 'scale-set' (boolean : default false : readable / writable / private)

Whether this tag scales the font size by a factor

=item 'single-paragraph-mode' (boolean : default false : readable / writable / private)

Whether or not to keep all text in a single paragraph

=item 'size' (integer : default 0 : readable / writable / private)

Font size

=item 'size-points' (double : default 0 : readable / writable / private)

Font size in points

=item 'size-set' (boolean : default false : readable / writable / private)

Whether this tag affects the font size

=item 'stretch' (Pango::Stretch : default "normal" : readable / writable / private)

Font stretch

=item 'stretch-set' (boolean : default false : readable / writable / private)

Whether this tag affects the font stretch

=item 'strikethrough' (boolean : default false : readable / writable / private)

Whether to strike through the text

=item 'strikethrough-set' (boolean : default false : readable / writable / private)

Whether this tag affects strikethrough

=item 'style' (Pango::Style : default "normal" : readable / writable / private)

Font style

=item 'style-set' (boolean : default false : readable / writable / private)

Whether this tag affects the font style

=item 'text' (string : default undef : readable / writable / private)

Text to render

=item 'underline' (Pango::Underline : default "none" : readable / writable / private)

Style of underline for this text

=item 'underline-set' (boolean : default false : readable / writable / private)

Whether this tag affects underlining

=item 'variant' (Pango::Variant : default "normal" : readable / writable / private)

Font variant

=item 'variant-set' (boolean : default false : readable / writable / private)

Whether this tag affects the font variant

=item 'weight' (integer : default 400 : readable / writable / private)

Font weight

=item 'weight-set' (boolean : default false : readable / writable / private)

Whether this tag affects the font weight

=item 'width-chars' (integer : default -1 : readable / writable / private)

The desired width of the label, in characters

=item 'wrap-mode' (Pango::WrapMode : default "char" : readable / writable / private)

How to break the string into multiple lines, if the cell renderer does not have enough room to display the entire string

=item 'wrap-width' (integer : default -1 : readable / writable / private)

The width at which the text is wrapped

=back



=cut


=head1 SIGNALS

=over

=item B<edited> (Gtk2::CellRendererText, string, string)

=back



=cut


=head1 ENUMS AND FLAGS

=head2 enum Pango::Alignment

=over

=item * 'left' / 'PANGO_ALIGN_LEFT'

=item * 'center' / 'PANGO_ALIGN_CENTER'

=item * 'right' / 'PANGO_ALIGN_RIGHT'

=back


=head2 enum Pango::EllipsizeMode

=over

=item * 'none' / 'PANGO_ELLIPSIZE_NONE'

=item * 'start' / 'PANGO_ELLIPSIZE_START'

=item * 'middle' / 'PANGO_ELLIPSIZE_MIDDLE'

=item * 'end' / 'PANGO_ELLIPSIZE_END'

=back


=head2 enum Pango::Stretch

=over

=item * 'ultra-condensed' / 'PANGO_STRETCH_ULTRA_CONDENSED'

=item * 'extra-condensed' / 'PANGO_STRETCH_EXTRA_CONDENSED'

=item * 'condensed' / 'PANGO_STRETCH_CONDENSED'

=item * 'semi-condensed' / 'PANGO_STRETCH_SEMI_CONDENSED'

=item * 'normal' / 'PANGO_STRETCH_NORMAL'

=item * 'semi-expanded' / 'PANGO_STRETCH_SEMI_EXPANDED'

=item * 'expanded' / 'PANGO_STRETCH_EXPANDED'

=item * 'extra-expanded' / 'PANGO_STRETCH_EXTRA_EXPANDED'

=item * 'ultra-expanded' / 'PANGO_STRETCH_ULTRA_EXPANDED'

=back


=head2 enum Pango::Style

=over

=item * 'normal' / 'PANGO_STYLE_NORMAL'

=item * 'oblique' / 'PANGO_STYLE_OBLIQUE'

=item * 'italic' / 'PANGO_STYLE_ITALIC'

=back


=head2 enum Pango::Underline

=over

=item * 'none' / 'PANGO_UNDERLINE_NONE'

=item * 'single' / 'PANGO_UNDERLINE_SINGLE'

=item * 'double' / 'PANGO_UNDERLINE_DOUBLE'

=item * 'low' / 'PANGO_UNDERLINE_LOW'

=item * 'error' / 'PANGO_UNDERLINE_ERROR'

=back


=head2 enum Pango::Variant

=over

=item * 'normal' / 'PANGO_VARIANT_NORMAL'

=item * 'small-caps' / 'PANGO_VARIANT_SMALL_CAPS'

=back


=head2 enum Pango::WrapMode

=over

=item * 'word' / 'PANGO_WRAP_WORD'

=item * 'char' / 'PANGO_WRAP_CHAR'

=item * 'word-char' / 'PANGO_WRAP_WORD_CHAR'

=back




=cut


=head1 SEE ALSO

L<Gtk2>, L<Glib::Object>, L<Glib::InitiallyUnowned>, L<Gtk2::Object>, L<Gtk2::CellRenderer>


=cut


=head1 COPYRIGHT

Copyright (C) 2003-2008 by the gtk2-perl team.

This software is licensed under the LGPL.  See L<Gtk2> for a full notice.



=cut

