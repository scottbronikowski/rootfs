/* Auto-generated by genmsg_cpp for file /root/ros/geometry/tf/srv/FrameGraph.srv */
#ifndef TF_SERVICE_FRAMEGRAPH_H
#define TF_SERVICE_FRAMEGRAPH_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace tf
{
template <class ContainerAllocator>
struct FrameGraphRequest_ {
  typedef FrameGraphRequest_<ContainerAllocator> Type;

  FrameGraphRequest_()
  {
  }

  FrameGraphRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::tf::FrameGraphRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tf::FrameGraphRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct FrameGraphRequest
typedef  ::tf::FrameGraphRequest_<std::allocator<void> > FrameGraphRequest;

typedef boost::shared_ptr< ::tf::FrameGraphRequest> FrameGraphRequestPtr;
typedef boost::shared_ptr< ::tf::FrameGraphRequest const> FrameGraphRequestConstPtr;


template <class ContainerAllocator>
struct FrameGraphResponse_ {
  typedef FrameGraphResponse_<ContainerAllocator> Type;

  FrameGraphResponse_()
  : dot_graph()
  {
  }

  FrameGraphResponse_(const ContainerAllocator& _alloc)
  : dot_graph(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _dot_graph_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  dot_graph;


  typedef boost::shared_ptr< ::tf::FrameGraphResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tf::FrameGraphResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct FrameGraphResponse
typedef  ::tf::FrameGraphResponse_<std::allocator<void> > FrameGraphResponse;

typedef boost::shared_ptr< ::tf::FrameGraphResponse> FrameGraphResponsePtr;
typedef boost::shared_ptr< ::tf::FrameGraphResponse const> FrameGraphResponseConstPtr;

struct FrameGraph
{

typedef FrameGraphRequest Request;
typedef FrameGraphResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct FrameGraph
} // namespace tf

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tf::FrameGraphRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tf::FrameGraphRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tf::FrameGraphRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::tf::FrameGraphRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::tf::FrameGraphRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tf/FrameGraphRequest";
  }

  static const char* value(const  ::tf::FrameGraphRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tf::FrameGraphRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::tf::FrameGraphRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::tf::FrameGraphRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::tf::FrameGraphResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::tf::FrameGraphResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::tf::FrameGraphResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c4af9ac907e58e906eb0b6e3c58478c0";
  }

  static const char* value(const  ::tf::FrameGraphResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc4af9ac907e58e90ULL;
  static const uint64_t static_value2 = 0x6eb0b6e3c58478c0ULL;
};

template<class ContainerAllocator>
struct DataType< ::tf::FrameGraphResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tf/FrameGraphResponse";
  }

  static const char* value(const  ::tf::FrameGraphResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::tf::FrameGraphResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string dot_graph\n\
\n\
\n\
";
  }

  static const char* value(const  ::tf::FrameGraphResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tf::FrameGraphRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FrameGraphRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::tf::FrameGraphResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.dot_graph);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FrameGraphResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<tf::FrameGraph> {
  static const char* value() 
  {
    return "c4af9ac907e58e906eb0b6e3c58478c0";
  }

  static const char* value(const tf::FrameGraph&) { return value(); } 
};

template<>
struct DataType<tf::FrameGraph> {
  static const char* value() 
  {
    return "tf/FrameGraph";
  }

  static const char* value(const tf::FrameGraph&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<tf::FrameGraphRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c4af9ac907e58e906eb0b6e3c58478c0";
  }

  static const char* value(const tf::FrameGraphRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<tf::FrameGraphRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tf/FrameGraph";
  }

  static const char* value(const tf::FrameGraphRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<tf::FrameGraphResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c4af9ac907e58e906eb0b6e3c58478c0";
  }

  static const char* value(const tf::FrameGraphResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<tf::FrameGraphResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "tf/FrameGraph";
  }

  static const char* value(const tf::FrameGraphResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // TF_SERVICE_FRAMEGRAPH_H

