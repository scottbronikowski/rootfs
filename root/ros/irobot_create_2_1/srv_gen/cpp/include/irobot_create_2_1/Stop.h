/* Auto-generated by genmsg_cpp for file /root/ros/irobot_create_2_1/srv/Stop.srv */
#ifndef IROBOT_CREATE_2_1_SERVICE_STOP_H
#define IROBOT_CREATE_2_1_SERVICE_STOP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace irobot_create_2_1
{
template <class ContainerAllocator>
struct StopRequest_ {
  typedef StopRequest_<ContainerAllocator> Type;

  StopRequest_()
  : stop(false)
  {
  }

  StopRequest_(const ContainerAllocator& _alloc)
  : stop(false)
  {
  }

  typedef uint8_t _stop_type;
  uint8_t stop;


  typedef boost::shared_ptr< ::irobot_create_2_1::StopRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::irobot_create_2_1::StopRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StopRequest
typedef  ::irobot_create_2_1::StopRequest_<std::allocator<void> > StopRequest;

typedef boost::shared_ptr< ::irobot_create_2_1::StopRequest> StopRequestPtr;
typedef boost::shared_ptr< ::irobot_create_2_1::StopRequest const> StopRequestConstPtr;


template <class ContainerAllocator>
struct StopResponse_ {
  typedef StopResponse_<ContainerAllocator> Type;

  StopResponse_()
  : success(false)
  {
  }

  StopResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


  typedef boost::shared_ptr< ::irobot_create_2_1::StopResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::irobot_create_2_1::StopResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StopResponse
typedef  ::irobot_create_2_1::StopResponse_<std::allocator<void> > StopResponse;

typedef boost::shared_ptr< ::irobot_create_2_1::StopResponse> StopResponsePtr;
typedef boost::shared_ptr< ::irobot_create_2_1::StopResponse const> StopResponseConstPtr;

struct Stop
{

typedef StopRequest Request;
typedef StopResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Stop
} // namespace irobot_create_2_1

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::irobot_create_2_1::StopRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::irobot_create_2_1::StopRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::irobot_create_2_1::StopRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "71f1172402e56b82716ca71681cded6b";
  }

  static const char* value(const  ::irobot_create_2_1::StopRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x71f1172402e56b82ULL;
  static const uint64_t static_value2 = 0x716ca71681cded6bULL;
};

template<class ContainerAllocator>
struct DataType< ::irobot_create_2_1::StopRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "irobot_create_2_1/StopRequest";
  }

  static const char* value(const  ::irobot_create_2_1::StopRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::irobot_create_2_1::StopRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool stop\n\
\n\
";
  }

  static const char* value(const  ::irobot_create_2_1::StopRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::irobot_create_2_1::StopRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::irobot_create_2_1::StopResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::irobot_create_2_1::StopResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::irobot_create_2_1::StopResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::irobot_create_2_1::StopResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::irobot_create_2_1::StopResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "irobot_create_2_1/StopResponse";
  }

  static const char* value(const  ::irobot_create_2_1::StopResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::irobot_create_2_1::StopResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
\n\
";
  }

  static const char* value(const  ::irobot_create_2_1::StopResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::irobot_create_2_1::StopResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::irobot_create_2_1::StopRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.stop);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StopRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::irobot_create_2_1::StopResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StopResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<irobot_create_2_1::Stop> {
  static const char* value() 
  {
    return "5fb7f99d98a30bfd9eeddbb34b138b31";
  }

  static const char* value(const irobot_create_2_1::Stop&) { return value(); } 
};

template<>
struct DataType<irobot_create_2_1::Stop> {
  static const char* value() 
  {
    return "irobot_create_2_1/Stop";
  }

  static const char* value(const irobot_create_2_1::Stop&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<irobot_create_2_1::StopRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5fb7f99d98a30bfd9eeddbb34b138b31";
  }

  static const char* value(const irobot_create_2_1::StopRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<irobot_create_2_1::StopRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "irobot_create_2_1/Stop";
  }

  static const char* value(const irobot_create_2_1::StopRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<irobot_create_2_1::StopResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5fb7f99d98a30bfd9eeddbb34b138b31";
  }

  static const char* value(const irobot_create_2_1::StopResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<irobot_create_2_1::StopResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "irobot_create_2_1/Stop";
  }

  static const char* value(const irobot_create_2_1::StopResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // IROBOT_CREATE_2_1_SERVICE_STOP_H

