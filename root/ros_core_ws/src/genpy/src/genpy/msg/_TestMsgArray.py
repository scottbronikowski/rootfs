"""autogenerated by genmsg_py from TestMsgArray.msg. Do not edit."""
import genpy
import struct

import genpy.msg

class TestMsgArray(genpy.Message):
  _md5sum = "e75eac49334a57b5055be2d573580cc2"
  _type = "genpy/TestMsgArray"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """TestString[] strings
TestString[1] fixed_strings

================================================================================
MSG: genpy/TestString
string data

"""
  __slots__ = ['strings','fixed_strings']
  _slot_types = ['genpy/TestString[]','genpy/TestString[1]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       strings,fixed_strings
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(TestMsgArray, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.strings is None:
        self.strings = []
      if self.fixed_strings is None:
        self.fixed_strings = [genpy.msg.TestString()]
    else:
      self.strings = []
      self.fixed_strings = [genpy.msg.TestString()]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      length = len(self.strings)
      buff.write(_struct_I.pack(length))
      for val1 in self.strings:
        _x = val1.data
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x.encode()))
      for val1 in self.fixed_strings:
        _x = val1.data
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x.encode()))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.strings = []
      for i in range(0, length):
        val1 = genpy.msg.TestString()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.data = str[start:end]
        self.strings.append(val1)
      self.fixed_strings = []
      for i in range(0, 1):
        val1 = genpy.msg.TestString()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.data = str[start:end]
        self.fixed_strings.append(val1)
      return self
    except struct.error as e:
      raise genpy.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      length = len(self.strings)
      buff.write(_struct_I.pack(length))
      for val1 in self.strings:
        _x = val1.data
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x.encode()))
      for val1 in self.fixed_strings:
        _x = val1.data
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x.encode()))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.strings = []
      for i in range(0, length):
        val1 = genpy.msg.TestString()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.data = str[start:end]
        self.strings.append(val1)
      self.fixed_strings = []
      for i in range(0, 1):
        val1 = genpy.msg.TestString()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.data = str[start:end]
        self.fixed_strings.append(val1)
      return self
    except struct.error as e:
      raise genpy.message.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.message.struct_I
