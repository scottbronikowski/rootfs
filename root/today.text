



USE A SOCKET INSTEAD OF FILE DESCRIPTOR TO COMMUNICATE BETWEEN GPIO AND MONITOR!!!!  READ WILL BLOCK!!!

Paper deadlines:
AAAI: 10Sep14-abstract, 15Sep14-final paper (conference 25-29Jan15 Austin, TX)
ICRA: 15Sep14-abstract, 12Feb15-final paper (conference 25-30May15, Seattle, WA) 
      (last conference 31May-5June14, paper deadline was 16Sep13)
IROS: 18Feb15-abstract, 8Jul15-final paper (conference 28Sep-2Oct15, Hamburg, Germany)
      (last conference 14-18Sep14, paper deadline was 6Feb14)

Buffers
----------------------------------------

    toollib-camera.h      3356  C++/l		  ~/source/camera/toollib-camera.h
    toollib-camera.cpp   18692  C++/l		  ~/source/camera/toollib-camera.cpp
    run_cameras.cpp       1263  C++/l		  ~/source/camera/run_cameras.cpp
    Makefile               894  GNUmakefile	  ~/source/camera/Makefile
    today.text           11347  Text		  ~/today.text



Old notes
--------------------------
13 Mar 14
-- Discovered that 1. Raw PGR images are 1/4 the size of BGRU-converted PGR (and Imlib) images, 2. Raw PGR images can be converted to BGR (vice BGRU) for a 25% reduction in size);
-- Looking into sending raw PGR images across network, but first need to have flycapture libraries installed on seykhl in order to reconstruct the PGR image and convert it to color (specifically need PGR Image class, along with PixelFormat and BayerTileFormat data types);
-- Got 4g dongle working--comes up as eth0 automatically, then must call 'dhclient eth0' to get local IP, should be set to connect to internet automatically now, but if not, use 'wget -T 30 http://192.168.32.2/condata?action=connect';
-- Generic USB Wifi dongle "sort-of" working--causes crashes after sustained data transfer.  Need to look at how it's set up.  Added lines for wlan2 in /etc/network/interfaces;
-- try UDP sockets instead of TCP for less overhead??

14 Mar 14
-- started on sending the raw PGR image across the network piece by piece...need to finish receiver and test

17 Mar 14
-- First test of sending raw images across network successful, images saved via PGR methods as color PPM.  Getting ~1.2-1.3 frames/sec/cam.
-- Need to look into ways to speed up transfer to the 5-8 f/s/c range (possibly compression, alternate wifi, ???)
-- First effort at using TP-LINK TL-W822N USB Wifi adapter. Driver installed and works, but still need to have it come up automatically on boot. First test of transfer gets ~2.9 f/s/c. Getting same 'task crda blocked' message as with other USB Wifi--not sure if I can just ignore it

18 Mar 14
-- apt-get install libnl1 libnl-dev
-- changed /sys/module/cfg80211/parameters/ieee80211_regdom from '00' to 'US' using 'cat US >> ...' in an attempt to try to fix crda error message -- FILE NOT IN GIT
------
-- changing of /sys/module/cfg80211/parameters/ieee80211_regdom did not work--file gets rewritten at boot
-- attempting to uninstall crda, wireless-crda, wireless-regdb to fix
   apt-get purge crda wireless-crda wireless-regdb
-- purge of crda/regdb seemed to work
-- still having issues with USB port quitting after a certain amount of time (non-deterministic)
-- added 'modprobe g_multi' to /etc/init.d/gpio-monitor.sh to load module needed to enable USB OTG port as second USB
------
-- Modified CustomImageEx.cpp with methods to just transfer image data on first image to see if it speeds things up...still need to finish work on camera-server.cpp to get it to break out of fork before we can see if it speeds things up or not

19 Mar 14
-- Commit before incorporating miniz.c compression
-- Noticed some issues with USB OTG port when cameras were connected to it--sometimes gave error 'musb_host_rx 1625: Rx interrupt with no errors or packet!' which would cause image capture to stop.  Couldn't find an easy workaround, so went back to putting cameras and wifi in main USB port.
-- Finished mod of camera-server.cpp to break out of forked receive process when no image data received--no significant speedup.
-------
-- Testing of miniz.c compression showed it to be worse than just sending uncompressed images via wifi (~0.5 f/s/c to get miniz-compressed data vs. ~3.5 f/s/c for uncompressed data over 802.11n or ~1.2 f/s/c for 802.11g)
-- Now trying 'snappy' from Google

20 Mar 14
-- attempted setting non-blocking send sockets with fcntl--improved speed, but got garbled images on workstation end...maybe need to adapt recv calls?
-- UDP (DGRAM) sockets might be a possibility, but would require a complete refiguring of the send/receive code.
-- ***Got framerate to ~8 f/s/c (close to rate at which cameras produce) by 1) changing save location on seykhl to /aux vice /home, and 2) changing pano cam to 640x480 greyscale.   If pano cam stays at 1240x934 color, framerate ~4.75 f/s/c
----------------
-- Removed g_multi.ko load from gpio-monitor.sh and added it to g-multi.sh with priority 01
----------------
-- Tested snappy compression -- results in a 10-15% reduction in buffer size, currently a bug with Send/ReceiveMetadataCompressed

21 Mar 14
-- Got connected to PAL3.0 with changes to /etc/network/interfaces and /etc/wpa_supplicant.conf
-- Checked raw frame rate (w/o sending)--seemed to top out around 17 fps, set it to 15 fps
-- Experimented with putting one of the cameras onto the secondary USB of the gumstix, but the fastest capture rate was with both cameras and the wifi adapter plugged into the main USB
-- Still need to look into compressing data prior to sending across network
-----------
-- Started work on using jpeg-compressor from Google, but haven't gotten it to work yet.

31 Mar 14
-- Got jpeg-compressor working. Getting good compression ratios (~95-97%), but at the cost of framerate--w/o compression, getting 15 f/s/c, with compression < 1 f/s/c.  Working on improving that.
-- Switched pano cam back to greyscale by calling PGR_SetCameraNEW from within PGR_StartCameras.  Now Gumstix can produce ~17-24 f/s/c without compression.
-- After testing jpeg-compressor using only 640x480 images, best framerate was about 2.5 f/s/c, regardless of parameters settings.
-- Installed OpenCV based on http://docs.opencv.org/doc/tutorials/introduction/linux_install/linux_install.html#linux-installation

1 Apr 14
-- Got OpenCV working with PGR images to encode in memory and checked via decoding and saving.  Next need to work on sending across network.
(test jpeg-compressor on workstation -- compiles then crashes on workstation, won't compile on laptop)

2 Apr 14
-- Got images sending across network.  With JPEG compression set at 50 (range 0-100), can get images across network as fast as Gumstix can produce them (~9.5-11.5 f/s/c).  With JPEG compression at default (95), Gumstix produces images ~8.6 f/s/c, sends ~6.5-7 f/s/c.
-- Changed PGR_GetFrame() and OpenCV_CompressFrame() to differentiate between 3-channel color images from front cam and 1-channel grayscale images from pano cam--now getting ~13 f/s/c across network with quality at 75, ~14 f/s/c with quality at 50.
-- Saving across network is working (quality = 75) at ~11.9-12.5 f/s/c.  Can save as either .jpg or .png, doesn't seem to affect speed
(first attempt at libjpeg-turbo/OpenCV install: cmake -DENABLE_VFPV3=ON -DENABLE_NEON=ON -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. )

3 Apr 14
-- Attempted to install libjpeg-turbo then recompile/reinstall OpenCV with NEON and VFPv3 enabled.  Loosely followed instructions at http://blog.lemoneerlabs.com/3rdParty/Darling_BBB_30fps_DRAFT.html#XMatthew_cvdecode and https://github.com/aumuell/libjpeg-turbo/blob/master/BUILDING.txt
-- apt-get install g++-4.6-multilib g++-multilib gcc-4.6-multilib gcc-multilib (used to attempt to get past libjpeg-turbo configure error--not sure if needed)
-- Downloaded libjpeg-turbo-1.3.0 from http://sourceforge.net/projects/libjpeg-turbo/files/1.3.0/libjpeg-turbo-1.3.0.tar.gz
-- Went to libjpeg-turbo-1.3.0/build and ran:
   ../configure CPPFLAGS='-O3 -march=armv7-a -mcpu=cortex-a8 -mtune=cortex-a8 -mfpu=neon -mfloat-abi=hard -fPIC'
   make
   make install prefix=/usr/local libdir=/usr/local/lib
   make install

   	Output:
	----------------------------------------------------------------------
	Libraries have been installed in:
	   /opt/libjpeg-turbo/lib
	   (/usr/local/lib)

	   If you ever happen to want to link against installed libraries
	   in a given directory, LIBDIR, you must either use libtool, and
	   specify the full pathname of the library, or use the `-LLIBDIR'
	   flag during linking and do at least one of the following:
	      - add LIBDIR to the `LD_LIBRARY_PATH' environment variable
	      	during execution
	      - add LIBDIR to the `LD_RUN_PATH' environment variable
                during linking
	      - use the `-Wl,--rpath -Wl,LIBDIR' linker flag
   	      - have your system administrator add LIBDIR to `/etc/ld.so.conf'

	See any operating system documentation about shared libraries for
	more information, such as the ld(1) and ld.so(8) manual pages.
	 ---------------------------------------------------------------------- 
-- Then went to ~/opencv-2.4.8/release and ran:
     cmake -D CMAKE_C_FLAGS='-O3 -march=armv7-a -mcpu=cortex-a8 -mtune=cortex-a8 \
     -mfpu=neon -mfloat-abi=hard -fPIC' -D CMAKE_CXX_FLAGS='-O3 -march=armv7-a \
     -mcpu=cortex-a8 -mtune=cortex-a8 -mfpu=neon -mfloat-abi=hard -fPIC' \
     -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local \
     -D BUILD_PYTHON_SUPPORT=ON -DWITH_JPEG=ON -DBUILD_JPEG=OFF \
     -DJPEG_INCLUDE_DIR=/usr/local/include/ \
     -DJPEG_LIBRARY=/usr/local/lib/libjpeg.a -DUSE_VFPV3=ON -DUSE_NEON=ON \
     -DENABLE_VFPV3=ON -DENABLE_NEON=ON .. 
     make
     make install
-- When complete, did a make clean and then make on CustomImageEx.cpp.  Did not see any improvment in OpenCV compression speed (~12 f/s/c with compression on, ~17-24 f/s/c with compression off).
-- Have machine shop working on mounting brace for USB wifi adapter

4 Apr 14
-- apt-get install libv4l-dev v4l-utils qv4l2 v4l2ucp
-- Installed mounting brace for USB wifi adapter from machine shop

14 Apr 14
--Moved code for monitor and motor_control from ~/test_code/ to ~/source/*. Put symlinks to headers in ~/include. Have executables in ~/bin.  Created makefiles for each to automate compilation.
------
--Moved CustomImageEx to ~/source/camera and broke it into toollib-camera.cpp/h and run-cameras.cpp.  Reconfigured Makefile to make run_cameras executable and put it int ~/bin.  Committing here prior to massive rework of run-cameras.cpp and cleanup of toollib-camera.cpp.
--Also moved Flycapture includes from ~/test_code/flycapture/include to ~/include, and libs from ~/test_code/flycapture/lib to ~/lib (with symlinks in /usr/local/lib.
-------
--Cleaned up toollib-camera.cpp/h
--Reconfigured run_cameras to use an infinite loop for capturing.  Killing the process with Ctrl-C doesn't seem to do any harm (so far), but I will still work on implementing a signal handler so that the PGR_StopAndCleanup() function can get called before exit.
