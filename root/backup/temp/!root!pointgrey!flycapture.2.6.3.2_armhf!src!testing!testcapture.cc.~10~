//Test functions for Point Grey cameras on Gumstix
//built using API from flycapture.2.6.3.2_armhf
//starting file was FlyCapture2Test.cpp
//Author: Scott Bronikowski
//Date: 13 February 2014

#include <stdio.h>
#include "FlyCapture2.h"
#include "RoverCamDefs.h"
#include <sys/stat.h>
#include <sys/time.h>

using namespace FlyCapture2;

//prototypes
void PrintBuildInfo();
void PrintCameraInfo(CameraInfo* pCamInfo);
void PrintError(Error error);

int RunAllCameras(int k_numImages, int numCameras);

long long int GetTimeInUsec(void);

int main(int argc, char** argv)
{  
  //PrintBuildInfo();

  Error error;
  
  // Since this application saves images in the OUTPUT_DIR folder
  // we must ensure that the folder exists and we have permission 
  //to write to this folder. If we do not have permission, fail right away.
  struct stat sb;

  if (!(stat(OUTPUT_DIR, &sb) == 0 && S_ISDIR(sb.st_mode)))
  {
    if (mkdir(OUTPUT_DIR, S_IRWXU | S_IRGRP | S_IROTH | S_IXGRP | S_IXOTH) != 0)
    {
      printf("Error creating directory %s\n",OUTPUT_DIR);
      return -1;
    }
  }
  char tempFileName[512];
  sprintf(tempFileName, "%stest.txt",OUTPUT_DIR);
  FILE* tempFile = fopen(tempFileName, "w+");
  if (tempFile == NULL)
  {
    printf("Failed to create file in current folder.  Please check permissions.\n");
    return -1;
  }
  fclose(tempFile);
  remove(tempFileName);

  //if we get here, we know the directory exists and we can write to it

  int numPics = default_num_pics;
  if (argc < 2)
  {
    printf("Defaulting to %i pictures per camera.\n",numPics);
  }
  else
  {
    numPics = atoi(argv[1]);
    printf("Taking %i pictures per camera.\n",numPics);
  }

  
  BusManager busMgr;
  unsigned int numCameras;
  error = busMgr.GetNumOfCameras(&numCameras);
  if (error != PGRERROR_OK)
  {
    PrintError( error );
    return -1;
  }
  
  printf( "Number of cameras detected: %u\n", numCameras );
  
  printf("\nAttempting old method\n");
  RunAllCameras(numPics, numCameras);  

  
  printf( "Done! Press Enter to exit...\n" );
  getchar();
  
  return 0;
}

int RunAllCameras(int k_numImages, int numCameras)
{
  
  //PGRGuid guid;
  PGRGuid guid[numCameras];
  BusManager busMgr;
  Error error;
  Camera cam[numCameras];
  char cam_string[numCameras][512];
  
  // Connect to all cameras
  for (int i = 0; i < numCameras; i++)
  {
    error = busMgr.GetCameraFromIndex(i, &guid[i]);
    if (error != PGRERROR_OK)
    {
      PrintError( error );
      return -1;
    }
    
    error = cam[i].Connect(&guid[i]);
    if (error != PGRERROR_OK)
    {
      PrintError( error );
      return -1;
    }
    
    // Get the camera information
    CameraInfo camInfo;
    error = cam[i].GetCameraInfo(&camInfo);
    if (error != PGRERROR_OK)
    {
      PrintError( error );
      return -1;
    }
    
    PrintCameraInfo(&camInfo);        
    
    //now compare serial number 
    if (camInfo.serialNumber == front_cam_serial)
    {
      printf("This is the front camera.\n");
      sprintf(cam_string[i], "Front_camera_");
    } 
    else if (camInfo.serialNumber == pano_cam_serial)
    {
      printf("This is the panoramic camera.\n");
      sprintf(cam_string[i], "Panoramic_camera_");
    }
    else
    {
      printf("Serial Number not recognized.\n");
      sprintf(cam_string[i], "unknown_camera_%d_",camInfo.serialNumber);
    }
    
    error = cam[i].SetVideoModeAndFrameRate(VID_MODE,F_RATE);
    if (error != PGRERROR_OK)
    {
      PrintError( error );
      printf("Error setting video mode and frame rate. \n"
	     "This example requires cameras to be able to set to %s at %s. \n", 
	     VID_MODE_STR,F_RATE_STR);
      printf("If your camera does not support this mode, please edit the source code and recompile the application. \n"
	     "Press Enter to exit. \n");
      getchar();
      return -1;
    }
    
    // Start capturing images **SHOULD WORK HERE BUT HANGS
    error = cam[i].StartCapture();
    if (error != PGRERROR_OK)
    {
      PrintError( error );
      return -1;
    }
    
    // else
    // {
    // 	printf("capture started\n");
    // }
  }
  
  printf("Camera initialization complete, moving to capture with %s at %s\n",
	 VID_MODE_STR, F_RATE_STR);
  
  Image rawImage;    
  Image convertedImage;
  struct point_grey_image *send_image;
  send_image = (point_grey_image*) malloc(sizeof(struct point_grey_image));
  //struct timeval start_time, stop_time;
  long long int start_time, stop_time;
  //main capture loop--get time here to check speed
  //gettimeofday(&start_time, NULL);
  start_time = GetTimeInUsec();
  for ( int imageCnt=0; imageCnt < k_numImages; imageCnt++ )
  {
    for (int i = 0; i < numCameras; i++)
    {
      // // Start capturing images ***WORKS HERE BUT SLOW
      // error = cam[i].StartCapture();
      // if (error != PGRERROR_OK)
      // {
      //   PrintError( error );
      //   return -1;
      // }
      // else
      // {
      //   printf("capture started\n");
      //}
      
      // Retrieve an image
      error = cam[i].RetrieveBuffer( &rawImage );
      if (error != PGRERROR_OK)
      {
	PrintError( error );
	continue;
      }
      
      printf( "%s Grabbed image %d\n", cam_string[i], imageCnt );
      
      // Create a converted image
      
      
      // Convert the raw image
      //error = rawImage.Convert( PIXEL_FORMAT_MONO16, &convertedImage ); /*seemed to cause crash*/
      //error = rawImage.Convert( PIXEL_FORMAT_MONO8, &convertedImage ); //original
      error = rawImage.Convert( PIXEL_FORMAT_RGB, &convertedImage );
      if (error != PGRERROR_OK)
      {
	PrintError( error );
	return -1;
      }  
      //printf("Converted image size: %u\n",convertedImage.GetDataSize());
      
      
      send_image->rows = convertedImage.GetRows();
      send_image->cols = convertedImage.GetCols();
      send_image->data = convertedImage.GetData();
      //printf("Rows %u, Cols %u\n",send_image->rows, send_image->cols);
      printf("Converted image in pointer to send_image struct, ready to send\n");
      
      //***SEND DATA HERE BEFORE END OF INNER LOOP***//////
      
      
      // //save the final image
      // if (imageCnt == (k_numImages - 1))
      // {
      // 	// Create a unique filename
      // 	char filename[512];
      // 	sprintf(filename, "%sOLD_TEST%sfinal.ppm",OUTPUT_DIR,cam_string[i]);
      // 	// Save the image. If a file format is not passed in, then the file
      // 	// extension is parsed to attempt to determine the file format.
      // 	error = convertedImage.Save(filename);
      // 	if (error != PGRERROR_OK)
      // 	{
      //     PrintError( error );
      //     return -1;
      // 	}  
      // 	printf("saved image %s\n",filename);
      // }
      // // Stop capturing images ****NOT SURE WHY THIS WORKS HERE and not in other loop
      // error = cam[i].StopCapture();
      // if (error != PGRERROR_OK)
      // {
      //   PrintError( error );
      //   return -1;
      // }      
      
    } //numCameras loop         
  }  //numImages loop
  stop_time = GetTimeInUsec();
  //do some math to show how many images over time
  long long int elapsed = stop_time - start_time;
  float images_per_sec = (float)k_numImages / ((float)elapsed / 1000000);
  printf("Summary: %i images per camera  taken in %lli microseconds (%f images/sec/cam)\n",
	 k_numImages, elapsed, images_per_sec );
  
  //don't need send_image anymore, so free it
  free(send_image);
  
  //loop through cameras one more time to stop & disconnect
  for (int i = 0; i < numCameras; i++)
  {
    // Stop capturing images **SHOULD WORK HERE
    error = cam[i].StopCapture();
    if (error != PGRERROR_OK)
    {
      PrintError( error );
      return -1;
    }      
    
    // Disconnect the camera
    error = cam[i].Disconnect();
    if (error != PGRERROR_OK)
    {
      PrintError( error );
      return -1;
    }
  }
  return 0;
}



void PrintBuildInfo()
{
  FC2Version fc2Version;
  Utilities::GetLibraryVersion( &fc2Version );
  char version[128];
  sprintf(version, 
	  "FlyCapture2 library version: %d.%d.%d.%d\n", 
	  fc2Version.major, fc2Version.minor, fc2Version.type, fc2Version.build );
  
  printf("%s", version );
  
  char timeStamp[512];
  sprintf( timeStamp, "Application build date: %s %s\n\n", __DATE__, __TIME__ );
  
  printf("%s", timeStamp );
}

void PrintCameraInfo( CameraInfo* pCamInfo )
{
  printf("\n*** CAMERA INFORMATION ***\n"
	 "Serial number - %u\n"
	 "Camera model - %s\n"
	 "Camera vendor - %s\n"
	 "Sensor - %s\n"
	 "Resolution - %s\n"
	 "Firmware version - %s\n"
	 "Firmware build time - %s\n\n",
	 pCamInfo->serialNumber,
	 pCamInfo->modelName,
	 pCamInfo->vendorName,
	 pCamInfo->sensorInfo,
	 pCamInfo->sensorResolution,
	 pCamInfo->firmwareVersion,
	 pCamInfo->firmwareBuildTime );
}

void PrintError( Error error )
{
  error.PrintErrorTrace();
}







long long int GetTimeInUsec(void)
{
  struct timeval tv;
  gettimeofday(&tv,NULL);
  long long int ret = tv.tv_usec;
  ret += (tv.tv_sec * 1000 * 1000);
  return ret;
}
