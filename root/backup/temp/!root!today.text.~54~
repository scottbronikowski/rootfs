






USE A SOCKET INSTEAD OF FILE DESCRIPTOR TO COMMUNICATE BETWEEN GPIO AND MONITOR!!!!  READ WILL BLOCK!!!

Paper deadlines:
AAAI: 10Sep14-abstract, 15Sep14-final paper (conference 25-29Jan15 Austin, TX)
ICRA: 15Sep14-abstract, 12Feb15-final paper (conference 25-30May15, Seattle, WA) 
      (last conference 31May-5June14, paper deadline was 16Sep13)
IROS: 18Feb15-abstract, 8Jul15-final paper (conference 28Sep-2Oct15, Hamburg, Germany)
      (last conference 14-18Sep14, paper deadline was 6Feb14)

Buffers
----------------------------------------
.   install.sh            3106  Shell-script[bas  ~/realtek/RTL8188C_8192C_USB_linux_v4.0.2_9000.20130911/install.sh
    output_of_install.t: 21807  Text		  ~/realtek/RTL8188C_8192C_USB_linux_v4.0.2_9000.20130911/output_of_install.text
    Makefile|rtl8188C_8: 17292  GNUmakefile	  ~/realtek/RTL8188C_8192C_USB_linux_v4.0.2_9000.20130911/driver/rtl8188C_8192C_usb_linux_v4.0.2_9000.20130911/Makefile
    today.text           24670  Text		  ~/today.text
    Makefile|omap3-pwm|    364  GNUmakefile	  /omap3-pwm/Makefile
    overo-source-me.txt    543  Text		  /omap3-pwm/overo-source-me.txt
    servo-control.sh       630  Shell-script[bas  /etc/init.d/servo-control.sh
    gpio-monitor.sh       1137  Shell-script[bas  /etc/init.d/gpio-monitor.sh
    servo-control.sh       630  Shell-script[bas  /etc/init.d/servo-control.sh
    g-multi.sh             531  Shell-script[bas  /etc/init.d/g-multi.sh
    motor_control.h       4707  C++/l		  ~/source/motor_control/motor_control.h
    emperor.cpp          10020  C++/l		  ~/source/emperor/emperor.cpp
    emperor.h             1634  C++/l		  ~/source/emperor/emperor.h
    motor_control_functi: 7126  C++/l		  ~/source/motor_control/motor_control_functions.cpp
    Makefile              1514  GNUmakefile	  ~/source/emperor/Makefile
    monitor.h             1161  C++/l		  ~/source/monitor/monitor.h
    monitor.cpp           3064  C++/l		  ~/source/monitor/monitor.cpp
    toollib-camera.h      3356  C++/l		  ~/source/camera/toollib-camera.h
    toollib-camera.cpp   18914  C++/l		  ~/source/camera/toollib-camera.cpp
    run_cameras.cpp       1640  C++/l		  ~/source/camera/run_cameras.cpp


Old notes
--------------------------
13 Mar 14
-- Discovered that 1. Raw PGR images are 1/4 the size of BGRU-converted PGR (and Imlib) images, 2. Raw PGR images can be converted to BGR (vice BGRU) for a 25% reduction in size);
-- Looking into sending raw PGR images across network, but first need to have flycapture libraries installed on seykhl in order to reconstruct the PGR image and convert it to color (specifically need PGR Image class, along with PixelFormat and BayerTileFormat data types);
-- Got 4g dongle working--comes up as eth0 automatically, then must call 'dhclient eth0' to get local IP, should be set to connect to internet automatically now, but if not, use 'wget -T 30 http://192.168.32.2/condata?action=connect';
-- Generic USB Wifi dongle "sort-of" working--causes crashes after sustained data transfer.  Need to look at how it's set up.  Added lines for wlan2 in /etc/network/interfaces;
-- try UDP sockets instead of TCP for less overhead??

14 Mar 14
-- started on sending the raw PGR image across the network piece by piece...need to finish receiver and test

17 Mar 14
-- First test of sending raw images across network successful, images saved via PGR methods as color PPM.  Getting ~1.2-1.3 frames/sec/cam.
-- Need to look into ways to speed up transfer to the 5-8 f/s/c range (possibly compression, alternate wifi, ???)
-- First effort at using TP-LINK TL-W822N USB Wifi adapter. Driver installed and works, but still need to have it come up automatically on boot. First test of transfer gets ~2.9 f/s/c. Getting same 'task crda blocked' message as with other USB Wifi--not sure if I can just ignore it

18 Mar 14
-- apt-get install libnl1 libnl-dev
-- changed /sys/module/cfg80211/parameters/ieee80211_regdom from '00' to 'US' using 'cat US >> ...' in an attempt to try to fix crda error message -- FILE NOT IN GIT
------
-- changing of /sys/module/cfg80211/parameters/ieee80211_regdom did not work--file gets rewritten at boot
-- attempting to uninstall crda, wireless-crda, wireless-regdb to fix
   apt-get purge crda wireless-crda wireless-regdb
-- purge of crda/regdb seemed to work
-- still having issues with USB port quitting after a certain amount of time (non-deterministic)
-- added 'modprobe g_multi' to /etc/init.d/gpio-monitor.sh to load module needed to enable USB OTG port as second USB
------
-- Modified CustomImageEx.cpp with methods to just transfer image data on first image to see if it speeds things up...still need to finish work on camera-server.cpp to get it to break out of fork before we can see if it speeds things up or not

19 Mar 14
-- Commit before incorporating miniz.c compression
-- Noticed some issues with USB OTG port when cameras were connected to it--sometimes gave error 'musb_host_rx 1625: Rx interrupt with no errors or packet!' which would cause image capture to stop.  Couldn't find an easy workaround, so went back to putting cameras and wifi in main USB port.
-- Finished mod of camera-server.cpp to break out of forked receive process when no image data received--no significant speedup.
-------
-- Testing of miniz.c compression showed it to be worse than just sending uncompressed images via wifi (~0.5 f/s/c to get miniz-compressed data vs. ~3.5 f/s/c for uncompressed data over 802.11n or ~1.2 f/s/c for 802.11g)
-- Now trying 'snappy' from Google

20 Mar 14
-- attempted setting non-blocking send sockets with fcntl--improved speed, but got garbled images on workstation end...maybe need to adapt recv calls?
-- UDP (DGRAM) sockets might be a possibility, but would require a complete refiguring of the send/receive code.
-- ***Got framerate to ~8 f/s/c (close to rate at which cameras produce) by 1) changing save location on seykhl to /aux vice /home, and 2) changing pano cam to 640x480 greyscale.   If pano cam stays at 1240x934 color, framerate ~4.75 f/s/c
----------------
-- Removed g_multi.ko load from gpio-monitor.sh and added it to g-multi.sh with priority 01
----------------
-- Tested snappy compression -- results in a 10-15% reduction in buffer size, currently a bug with Send/ReceiveMetadataCompressed

21 Mar 14
-- Got connected to PAL3.0 with changes to /etc/network/interfaces and /etc/wpa_supplicant.conf
-- Checked raw frame rate (w/o sending)--seemed to top out around 17 fps, set it to 15 fps
-- Experimented with putting one of the cameras onto the secondary USB of the gumstix, but the fastest capture rate was with both cameras and the wifi adapter plugged into the main USB
-- Still need to look into compressing data prior to sending across network
-----------
-- Started work on using jpeg-compressor from Google, but haven't gotten it to work yet.

31 Mar 14
-- Got jpeg-compressor working. Getting good compression ratios (~95-97%), but at the cost of framerate--w/o compression, getting 15 f/s/c, with compression < 1 f/s/c.  Working on improving that.
-- Switched pano cam back to greyscale by calling PGR_SetCameraNEW from within PGR_StartCameras.  Now Gumstix can produce ~17-24 f/s/c without compression.
-- After testing jpeg-compressor using only 640x480 images, best framerate was about 2.5 f/s/c, regardless of parameters settings.
-- Installed OpenCV based on http://docs.opencv.org/doc/tutorials/introduction/linux_install/linux_install.html#linux-installation

1 Apr 14
-- Got OpenCV working with PGR images to encode in memory and checked via decoding and saving.  Next need to work on sending across network.
(test jpeg-compressor on workstation -- compiles then crashes on workstation, won't compile on laptop)

2 Apr 14
-- Got images sending across network.  With JPEG compression set at 50 (range 0-100), can get images across network as fast as Gumstix can produce them (~9.5-11.5 f/s/c).  With JPEG compression at default (95), Gumstix produces images ~8.6 f/s/c, sends ~6.5-7 f/s/c.
-- Changed PGR_GetFrame() and OpenCV_CompressFrame() to differentiate between 3-channel color images from front cam and 1-channel grayscale images from pano cam--now getting ~13 f/s/c across network with quality at 75, ~14 f/s/c with quality at 50.
-- Saving across network is working (quality = 75) at ~11.9-12.5 f/s/c.  Can save as either .jpg or .png, doesn't seem to affect speed
(first attempt at libjpeg-turbo/OpenCV install: cmake -DENABLE_VFPV3=ON -DENABLE_NEON=ON -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local .. )

3 Apr 14
-- Attempted to install libjpeg-turbo then recompile/reinstall OpenCV with NEON and VFPv3 enabled.  Loosely followed instructions at http://blog.lemoneerlabs.com/3rdParty/Darling_BBB_30fps_DRAFT.html#XMatthew_cvdecode and https://github.com/aumuell/libjpeg-turbo/blob/master/BUILDING.txt
-- apt-get install g++-4.6-multilib g++-multilib gcc-4.6-multilib gcc-multilib (used to attempt to get past libjpeg-turbo configure error--not sure if needed)
-- Downloaded libjpeg-turbo-1.3.0 from http://sourceforge.net/projects/libjpeg-turbo/files/1.3.0/libjpeg-turbo-1.3.0.tar.gz
-- Went to libjpeg-turbo-1.3.0/build and ran:
   ../configure CPPFLAGS='-O3 -march=armv7-a -mcpu=cortex-a8 -mtune=cortex-a8 -mfpu=neon -mfloat-abi=hard -fPIC'
   make
   make install prefix=/usr/local libdir=/usr/local/lib
   make install

   	Output:
	----------------------------------------------------------------------
	Libraries have been installed in:
	   /opt/libjpeg-turbo/lib
	   (/usr/local/lib)

	   If you ever happen to want to link against installed libraries
	   in a given directory, LIBDIR, you must either use libtool, and
	   specify the full pathname of the library, or use the `-LLIBDIR'
	   flag during linking and do at least one of the following:
	      - add LIBDIR to the `LD_LIBRARY_PATH' environment variable
	      	during execution
	      - add LIBDIR to the `LD_RUN_PATH' environment variable
                during linking
	      - use the `-Wl,--rpath -Wl,LIBDIR' linker flag
   	      - have your system administrator add LIBDIR to `/etc/ld.so.conf'

	See any operating system documentation about shared libraries for
	more information, such as the ld(1) and ld.so(8) manual pages.
	 ---------------------------------------------------------------------- 
-- Then went to ~/opencv-2.4.8/release and ran:
     cmake -D CMAKE_C_FLAGS='-O3 -march=armv7-a -mcpu=cortex-a8 -mtune=cortex-a8 \
     -mfpu=neon -mfloat-abi=hard -fPIC' -D CMAKE_CXX_FLAGS='-O3 -march=armv7-a \
     -mcpu=cortex-a8 -mtune=cortex-a8 -mfpu=neon -mfloat-abi=hard -fPIC' \
     -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local \
     -D BUILD_PYTHON_SUPPORT=ON -DWITH_JPEG=ON -DBUILD_JPEG=OFF \
     -DJPEG_INCLUDE_DIR=/usr/local/include/ \
     -DJPEG_LIBRARY=/usr/local/lib/libjpeg.a -DUSE_VFPV3=ON -DUSE_NEON=ON \
     -DENABLE_VFPV3=ON -DENABLE_NEON=ON .. 
     make
     make install
-- When complete, did a make clean and then make on CustomImageEx.cpp.  Did not see any improvment in OpenCV compression speed (~12 f/s/c with compression on, ~17-24 f/s/c with compression off).
-- Have machine shop working on mounting brace for USB wifi adapter

4 Apr 14
-- apt-get install libv4l-dev v4l-utils qv4l2 v4l2ucp
-- Installed mounting brace for USB wifi adapter from machine shop

14 Apr 14
--Moved code for monitor and motor_control from ~/test_code/ to ~/source/*. Put symlinks to headers in ~/include. Have executables in ~/bin.  Created makefiles for each to automate compilation.
------
--Moved CustomImageEx to ~/source/camera and broke it into toollib-camera.cpp/h and run-cameras.cpp.  Reconfigured Makefile to make run_cameras executable and put it int ~/bin.  Committing here prior to massive rework of run-cameras.cpp and cleanup of toollib-camera.cpp.
--Also moved Flycapture includes from ~/test_code/flycapture/include to ~/include, and libs from ~/test_code/flycapture/lib to ~/lib (with symlinks in /usr/local/lib.
-------
--Cleaned up toollib-camera.cpp/h
--Reconfigured run_cameras to use an infinite loop for capturing.  Killing the process with Ctrl-C doesn't seem to do any harm (so far), but I will still work on implementing a signal handler so that the PGR_StopAndCleanup() function can get called before exit.

15 Apr 14
--Implemented signal handler in run_cameras.cpp.  Can now exit cleanly from by sending 'pkill run_cameras' either locally or over ssh.

17 Apr 14
--Switched over to backup gumstix in an effort to troubleshoot USB EMI failure.  All external systems functional after switchover.  Also changed USB cable running between gumstix and hub from one that I had shorted to an uncut cable.
--Testing camera transmission to see if/when USB fails:
	  Internal wifi on qobi-office:  ran for ~48 minutes until battery died (intermittent whole-system pauses/hangs...but images resume after ~5 sec or less)
	  Internal wifi on PAL: ran for 29 minutes until I stopped the test to do a driving test (did not notice the hangs above)
	  USB wifi on qobi-office: (skipped these and went to drive testing)
	  USB wifi on PAL: (skipped these and went to drive testing)
  ***Did not see USB EMI failure after over an hour and a half of operation (split between 2 tests due to a reboot for a battery change)
-- 40-pin header configuration:
   5 = right encoder yellow	
   6 = right encoder green
   7 = left encoder yellow
   8 = left encoder green
   10 = motors
   15 = GND (with 16)
   16 = VCC 1.8V to level shifters (with 15)
   23 = Rear bump GPIO 184 RED (with 24)
   24 = Front bump GPIO 185 YELLOW (with 23)
   25 = GND to bump switches (with 26)
   26 = VCC 1.8V to bump switch pullups (with 25)
   27 = ultrasonic yellow (with 29)
   28 = PWM10 - pan servo
   29 = ultrasonic red (with 27)
   30 = PWM9 - tilt servo
--apt-get install hwinfo
--Drive testing results:
	Internal wifi on PAL: Performance OK, but still have occasions when connection seems to hang--which seem to coincide with AP handoffs (as observed by running iwconfig)
	USB wifi on PAL: Very similar performance.  Long hangs that sometimes seem to resolve themselves sometimes.  However, had to terminate the test when a hang didn't recover after ~2 minutes of waiting--and then after I had walked out and recovered the robot, system was still moderately non-responsive to console commands.  Interestingly, when I went to terminate the Scheme GUI I noticed that it flashed an image of me carrying the robot back from several minutes prior--implying that somewhere there is a buffer of images that haven't been sent/received yet.  That seems to make sense, since I am using TCP sockets (SOCK_STREAM).  Perhaps I need to switch to UDP sockets to allow images to be dropped (and possibly RTP on top of UDP).
-- Removed g-multi.sh from startup to kill driver for USB OTG (update-rc.d -f /etc/init.d/g-multi.sh remove) -- previously had 01 priority.
-- Made changes to /etc/modprobe.d/blacklist.conf and /etc/modules recommended in http://www.ajaykumarsingh.com/linux/tp-link-tl-wn822n-300mbps-high-gain-wireless-n-usb-adapter-not-working-on-ubuntu-12-04.html in order to see if it helps with wifi handoffs.

18 Apr 14
--apt-get install wavemon (monitors wifi connection statistics similar to iptraf)
--Making some tweaks to /etc/wpa_supplicant.conf and /etc/network/interfaces to see if it improves connectivity to PAL--tried 'wpa-roam' vice 'wpa-conf' but that didn't seem to work--did comment out all networks other than PAL from wpa_supplicant.conf
--Added 'sleep 5' to /etc/init.d/keepalive-ping.sh prior to the ping call to allow time for new /etc/network/interfaces and /etc/wpa_supplicant.conf to bring network up.  Also removed 'sleep 15' from /etc/init.d/time-update.sh

23 Apr 14
--Started working on master program (~/source/emperor) that will listen for commands from seykhl and then start threads or call functions as needed.

24 Apr 14
--apt-get install lsof
--Have control message-passing infrastructure working between rover and seykhl.  On vader-rover, emperor 'calls home' to open a socket to seykhl and then listens for commands on that socket.  Currently have start_cameras and stop_cameras working (had to make some tweaks to toollib-camera.cpp to explicitly close sockets to get cameras to start again after being stopped--previously that had been getting taken care of when I terminated run_cameras with a SIGINT).  Next working on getting pan and tilt to work from right thumb stick.

25 Apr 14
--apt-get install gdb
--Got pan and tilt servos working from right thumbstick of gamepad controller.  

28 Apr 14
--Have motor commands receiving and parsing properly on rover side.  Have implemented duplicate command checking on seykhl side, so may need to remove analogous code in emperor (observing slow execution of commands once received).
--Started implementing the sending of commands from emperor to motors--not functional yet.

29 Apr 14
--Tracked down slowness of pan/tilt execution to tcdrain() used to send integer speeds to motors. tcdrain() is necessary to ensure that integers get sent to motor controllers--removing it results in missed motor commands.  Reduced tcdrain wait time to minimum allowable (100ms), and also implemented code to skip sending motor command when motor command is a repeat.  That seemed to resolve the problem.
--Finished implementation of command parsing and sending to motors within emperor.cpp.  Also removed debugging printfs.
----
--First modifications to motor_control.h in attempt to correct leftward pull while driving.
----
--Final corrections to fix leftward pull.  Corrected by slowing right motors ~30% (see motor_control.h for details).

30 Apr 14
--Started modifications to emperor to add data logging.  Opened socket connection in first part of main().  Need to finish timestamp and send operation in emperor_log_data().

1 May 14
--First draft of data logging functional.  Need to filter pan/tilt commands in a way similar to how I filter motor commands to prevent excessive logging (currently in the log, every motor command is preceded by a pan/tilt command, even when the pan/tilt is unchanged).
--Have logging working for all pan/tilt and motor commands without duplicates.
--Integrated all bump switch monitor functions into emperor in a separate thread (emperor_monitor_bump_switches()).  Removed old monitor executable from startup--no longer needed (had been startup priority 98).

5 May 14
--Implemented sending of camera start and stop messages (toollib-camera.cpp, Network_StartCameras() and PGR_StopAndCleanup()).
--Completed and debugged implementation of sending individual timestamps for images.  Needed to use a send of "0" before sending camera stop message in order to get OpenCV_ReceiveFrame() on workstation to exit and not interpret 1st 4 bytes of camera stop message as an int representing compressed image size.

6 May 14
--Troubleshot slow framerate issue in emperor using new modifications to CustomImageEx.cpp.  Found problem was in the emperor_monitor_bump_switches() thread -- it was using ~95% processor without cameras running.  I am using select() with a blocking read() in order to allow the loop to exit when I change the global boolean gpio_thread_should_die.  However, the select() call takes the timeval timeout parameter as a pointer, and select() updates that value, which caused it to get set to 0 and cause subsequent select() calls to return immediately.  I changed the loop to set my timeval timeout variable inside each loop, ensuring that the timeout is set to 100 ms on every call to select().  CPU usage is now <1% without cameras running, and framerate is up to ~11-15 fps per camera (counted using timestamps in log files).
----
--Video saving working on seykhl.

19 May 14
--First attempts at using rotary encoders on wheels.  All example/test code downloaded so far has used too much (~50%+) CPU to be useful.  Looking into developing kernel-space interrupt handler to count ticks.

20 May 14
--Started working on modifying the libbeagle (BeagleBone) code gathered from bwgz.org.  My first thought is that the slowness comes from the fact that every time the GPIO class reads a GPIO value, it opens, reads, and closes the file.  Trying to modify the code so that it opens a file descriptor in the constructor and just reads from that fd when getting the value.  Don't have it working just yet--still troubleshooting.

21 May 14
--Have libbeagle code reading from a file descriptor opened in the GPIO constructor, but not sure what good it's doing me.  CPU usage on the test program is down to ~39% (from ~50%), but still too high to be useful while cameras are running.  Still think it might be better to have a kernel module running that counts ticks and keeps direction, and then reports that info out to user-space on demand.
----
--Tested libbeagle code modified with a SIGALRM timer to fire the code that checks the state of the GPIO lines.  Based on 30:1 gearing on the motors and 400 pulses per revolution on the encoders, need to be able to capture 12,000 pulses per second if the wheel is turning at 1 revolution per second (motors are capable of 200 rpm or 3.33 revolutions per second) times 2 (because of two encoders).  Attempting to run the SIGALRM timer set at 40 microseconds (25,000 iterations per second) resulted in a runing time of ~5.6 seconds, and it should have taken 1 second.  I think that I can conclude from this that this code is unusable for my purposes--I think that the concept of polling the devices for their data, rather than being driven by hardware interrupts, is the wrong way to go.
--I believe that I need to develop a kernel module that responds to interrupts caused by the state changes on the encoder data lines.  In my research I have found rotary_encoder.h (on the gumstix at /usr/src/linux-headers.../include/linux) and rotary_encoder.c (not found on the gumstix, but a couple different versions on various code sites).  These files appear to be a part of the Linux kernel.  I think my best bet is to figure out how to build this kernel module and make it work with my hardware.

22 May 14
--Edited kernel config to have rotary_encoder built as a kernel module by running 'make xconfig' from ~/build/linux-omap-3.5 (dot in checkbox indicates build as module, vice check mark that indicates build into kernel), then compiled (all) kernel modules by running 'make ARCH=arm CROSS_COMPILE=<EMPTY QUOTES> modules' from same location. ** Module would not load via either modprobe or insmod--need to research error messages more--possibly compiled with wrong command or need Module.symvers somewhere while compiling.

23 May 14
--In an effort to get kernel modules to compile properly on Gumstix (via how-to located at http://gumstix.8.x6.nabble.com/Linaro-linux-source-has-no-makefiles-help-td4967421.html, Larry Martin 21Jun13), tried the following:
     #apt-get install devscripts
     #apt-get install fakeroot build-essential kexec-tools kernel-wedge
     #apt-get build-dep linux
     #apt-get install git-core libncurses5 libncurses5-dev libelf-dev asciidoc binutils-dev
     --in ~/build/linux-omap-3.5:
     backup .config file
     #make mrproper
     #cp /path/to/config-backup .config
     #make prepare
     #make scripts
     #make && make modules_install (left running over the weekend)

27 May 14
--Kernel modules finished compilation without error, but when I try to load rotary_encoder.ko using 'modprobe rotary_encoder' I get an error stating 'Invalid module format'.  Not sure what the error is, because when I call 'modinfo rotary_encoder' the first entry on the vermagic line matches the output of `uname -r`, so the kernel versions should be the same.  The dmesg entry for that command is 'rotary_encoder: disagrees about version of symbol module_layout'.
--Had to replace *.ko, *.mod.c, *.mod.o, *.o, modules.order in ~/build/linux-omap-3.5/drivers/omap3-pwm and ~/build/linux-omap-3.5/drivers/gpio-event/module from old git commits (from January).  These were the kernel modules for the PWM (servos) and gpio-event monitor (bump switches), respectively.  They were apparently deleted during the make process on Friday.
----
*******JUST REVERTED LAST 3 COMMITS****************
--Reverted 27 May, 23 May, 22 May commits because I rebooted the Gumstix and discovered that the kernel module compilation work done on those days actually deleted/destroyed all of my previously functional kernel modules, probably somewhere in the make process.  Gumstix was unable to boot with correct drivers for USB, wifi, etc.  Reverting back to 21 May commit fixed the problem.
---
--Was able to recompile pwm.ko in /omap3-pwm using command 'make ARCH=arm CROSS_COMPILE=<EMPTYQUOTES> -C /root/build/linux-omap-3.5 M=`pwd` modules', but it would not load with either insmod or modprobe.  Looking at modinfo for both versions of pwm.ko, I see the difference in the vermagic string is that the one that works has ARMv7 and the one that doesn't has ARMv6 as the second-to-last entry.  Also, the working pwm.ko is significantly smaller (17K vs. 134K).
--Look more closely at realtek folder--the install.sh there was able to compile the wifi kernel module (8192cu.ko) that has the correct vermagic string.  Need to see what it does that the other modules need to do.
