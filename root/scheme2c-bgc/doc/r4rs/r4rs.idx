(index-entry "object" "rm" main 3)
(index-entry "read" "tt" aux 3)
(index-entry "read" "tt" aux 3)
(index-entry "essential" "rm" main 3)
(index-entry "error" "rm" main 3)
(index-entry "implementation restriction" "rm" main 4)
(index-entry "unspecified" "rm" main 4)
(index-entry "?" "tt" aux 4)
(index-entry "?" "tt" aux 4)
(index-entry "!" "tt" aux 4)
(index-entry "!" "tt" aux 4)
(index-entry "->" "tt" aux 4)
(index-entry "list->vector" "tt" aux 4)
(index-entry "->" "tt" aux 5)
(index-entry "Foo" "tt" aux 5)
(index-entry "FOO" "tt" aux 5)
(index-entry "identifier" "rm" main 5)
(index-entry "+" "tt" aux 5)
(index-entry "-" "tt" aux 5)
(index-entry "..." "tt" aux 5)
(index-entry "syntactic keyword" "rm" aux 5)
(index-entry "keyword" "rm" aux 5)
(index-entry "variable" "rm" aux 5)
(index-entry "Whitespace" "rm" main 5)
(index-entry "comment" "rm" main 5)
(index-entry ";" "tt" main 5)
(index-entry "keyword" "rm" aux 6)
(index-entry "syntactic keyword" "rm" aux 6)
(index-entry "identifier" "rm" aux 6)
(index-entry "variable" "rm" main 6)
(index-entry "binding" "rm" main 6)
(index-entry "binding construct" "rm" main 6)
(index-entry "lambda expression{}" "rm" aux 6)
(index-entry "let" "tt" aux 6)
(index-entry "let*" "tt" aux 6)
(index-entry "letrec" "tt" aux 6)
(index-entry "do" "tt" aux 6)
(index-entry "region" "rm" main 6)
(index-entry "unbound" "rm" main 6)
(index-entry "bound" "rm" main 6)
(index-entry "top level environment" "rm" aux 6)
(index-entry "true" "rm" main 6)
(index-entry "false" "rm" main 6)
(index-entry "quote" "tt" aux 6)
(index-entry "read" "tt" aux 6)
(index-entry "write" "tt" aux 6)
(index-entry "type" "rm" main 7)
(index-entry "location" "rm" main 7)
(index-entry "car" "tt" aux 7)
(index-entry "vector-ref" "tt" aux 7)
(index-entry "string-ref" "tt" aux 7)
(index-entry "eqv?" "tt" aux 7)
(index-entry "constant" "rm" aux 7)
(index-entry "mutable" "rm" aux 7)
(index-entry "immutable" "rm" aux 7)
(index-entry "symbol->string" "tt" aux 7)
(index-entry "variable" "rm" aux 7)
(index-entry "unbound" "rm" aux 7)
(index-entry "quote" "tt" main 7)
(index-entry "'" "tt" main 7)
(index-entry "constant" "rm" aux 7)
(index-entry "set-car!" "tt" aux 7)
(index-entry "string-set!" "tt" aux 7)
(index-entry "constant" "rm" aux 7)
(index-entry "call" "rm" main 8)
(index-entry "procedure call" "rm" main 8)
(index-entry "+" "tt" aux 8)
(index-entry "*" "tt" aux 8)
(index-entry "combination" "rm" main 8)
(index-entry "lambda" "tt" main 8)
(index-entry "eqv?" "tt" aux 8)
(index-entry "eq?" "tt" aux 8)
(index-entry "if" "tt" main 8)
(index-entry "if" "tt" main 8)
(index-entry "if" "tt" aux 8)
(index-entry "true" "rm" aux 8)
(index-entry "set!" "tt" main 9)
(index-entry "region" "rm" aux 9)
(index-entry "set!" "tt" aux 9)
(index-entry "set!" "tt" aux 9)
(index-entry "cond" "tt" main 9)
(index-entry "else" "tt" main 9)
(index-entry "=>" "tt" main 9)
(index-entry "cond" "tt" aux 9)
(index-entry "true" "rm" aux 9)
(index-entry "cond" "tt" aux 9)
(index-entry "case" "tt" main 9)
(index-entry "else" "tt" aux 9)
(index-entry "case" "tt" aux 9)
(index-entry "eqv?" "tt" aux 9)
(index-entry "case" "tt" aux 9)
(index-entry "case" "tt" aux 9)
(index-entry "case" "tt" aux 9)
(index-entry "and" "tt" main 9)
(index-entry "or" "tt" main 9)
(index-entry "let" "tt" aux 10)
(index-entry "let*" "tt" aux 10)
(index-entry "letrec" "tt" aux 10)
(index-entry "region" "rm" aux 10)
(index-entry "let" "tt" aux 10)
(index-entry "let*" "tt" aux 10)
(index-entry "letrec" "tt" aux 10)
(index-entry "let" "tt" main 10)
(index-entry "region" "rm" aux 10)
(index-entry "let" "tt" aux 10)
(index-entry "let*" "tt" main 10)
(index-entry "Let*" "tt" aux 10)
(index-entry "let" "tt" aux 10)
(index-entry "region" "rm" aux 10)
(index-entry "let*" "tt" aux 10)
(index-entry "letrec" "tt" main 10)
(index-entry "letrec" "tt" aux 10)
(index-entry "region" "rm" aux 10)
(index-entry "letrec" "tt" aux 10)
(index-entry "letrec" "tt" aux 10)
(index-entry "begin" "tt" main 10)
(index-entry "sequence" "tt" aux 11)
(index-entry "begin" "tt" aux 11)
(index-entry "do" "tt" main 11)
(index-entry "Do" "tt" aux 11)
(index-entry "Do" "tt" aux 11)
(index-entry "do" "tt" aux 11)
(index-entry "do" "tt" aux 11)
(index-entry "region" "rm" aux 11)
(index-entry "do" "tt" aux 11)
(index-entry "do" "tt" aux 11)
(index-entry "let" "tt" main 11)
(index-entry "let" "tt" aux 11)
(index-entry "let" "tt" aux 11)
(index-entry "do" "tt" aux 11)
(index-entry "let" "tt" aux 11)
(index-entry "let" "tt" aux 11)
(index-entry "delay" "tt" main 11)
(index-entry "delay" "tt" aux 11)
(index-entry "force" "tt" aux 11)
(index-entry "lazy evaluation" "rm" main 11)
(index-entry "call by need" "rm" main 11)
(index-entry "promise" "rm" main 11)
(index-entry "force" "tt" aux 11)
(index-entry "force" "tt" aux 11)
(index-entry "delay" "tt" aux 11)
(index-entry "quasiquote" "tt" main 11)
(index-entry "backquote" "rm" aux 11)
(index-entry "comma" "rm" aux 11)
(index-entry "," "tt" main 11)
(index-entry "at-sign" "rm" aux 11)
(index-entry "foo" "tt" aux 12)
(index-entry "write" "tt" aux 12)
(index-entry "`" "tt" main 12)
(index-entry "quasiquote" "tt" aux 12)
(index-entry "unquote" "tt" aux 12)
(index-entry "unquote-splicing" "tt" aux 12)
(index-entry "definition" "rm" main 12)
(index-entry "define" "tt" main 12)
(index-entry "begin" "tt" aux 12)
(index-entry "set!" "tt" aux 12)
(index-entry "set!" "tt" aux 12)
(index-entry "unbound" "rm" aux 12)
(index-entry "lambda" "tt" aux 13)
(index-entry "let" "tt" aux 13)
(index-entry "let*" "tt" aux 13)
(index-entry "letrec" "tt" aux 13)
(index-entry "define" "tt" aux 13)
(index-entry "internal definition" "rm" main 13)
(index-entry "letrec" "tt" aux 13)
(index-entry "let" "tt" aux 13)
(index-entry "letrec" "tt" aux 13)
(index-entry "initial environment" "rm" main 13)
(index-entry "top level environment" "rm" main 13)
(index-entry "abs" "tt" aux 13)
(index-entry "+" "tt" aux 13)
(index-entry "t" "sharpfoo" aux 13)
(index-entry "f" "sharpfoo" aux 13)
(index-entry "if" "tt" aux 13)
(index-entry "cond" "tt" aux 13)
(index-entry "and" "tt" aux 13)
(index-entry "or" "tt" aux 13)
(index-entry "do" "tt" aux 13)
(index-entry "true" "rm" aux 13)
(index-entry "false" "rm" aux 13)
(index-entry "true" "rm" aux 13)
(index-entry "false" "rm" aux 13)
(index-entry "nil" "tt" aux 13)
(index-entry "not" "tt" main 13)
(index-entry "Not" "tt" aux 13)
(index-entry "boolean?" "tt" main 13)
(index-entry "Boolean?" "tt" aux 13)
(index-entry "predicate" "rm" main 13)
(index-entry "equivalence predicate" "rm" main 13)
(index-entry "eq?" "tt" aux 13)
(index-entry "equal?" "tt" aux 13)
(index-entry "Eqv?" "tt" aux 13)
(index-entry "eq?" "tt" aux 13)
(index-entry "eqv?" "tt" main 13)
(index-entry "eqv?" "tt" aux 13)
(index-entry "eqv?" "tt" aux 13)
(index-entry "eqv?" "tt" aux 13)
(index-entry "eqv?" "tt" aux 14)
(index-entry "=" "tt" aux 14)
(index-entry "exact" "rm" aux 14)
(index-entry "inexact" "rm" aux 14)
(index-entry "char=?" "tt" aux 14)
(index-entry "eqv?" "tt" aux 14)
(index-entry "=" "tt" aux 14)
(index-entry "char=?" "tt" aux 14)
(index-entry "eqv?" "tt" aux 14)
(index-entry "eqv?" "tt" aux 14)
(index-entry "eqv?" "tt" aux 14)
(index-entry "Gen-counter" "tt" aux 14)
(index-entry "Gen-loser" "tt" aux 14)
(index-entry "eqv?" "tt" aux 14)
(index-entry "eqv?" "tt" aux 15)
(index-entry "eq?" "tt" main 15)
(index-entry "Eq?" "tt" aux 15)
(index-entry "eqv?" "tt" aux 15)
(index-entry "eqv?" "tt" aux 15)
(index-entry "Eq?" "tt" aux 15)
(index-entry "eqv?" "tt" aux 15)
(index-entry "Eq?" "tt" aux 15)
(index-entry "eqv?" "tt" aux 15)
(index-entry "Eq?" "tt" aux 15)
(index-entry "eqv?" "tt" aux 15)
(index-entry "eq?" "tt" aux 15)
(index-entry "eqv?" "tt" aux 15)
(index-entry "eqv?" "tt" aux 15)
(index-entry "eq?" "tt" aux 15)
(index-entry "Eq?" "tt" aux 15)
(index-entry "eqv?" "tt" aux 15)
(index-entry "eqv?" "tt" aux 15)
(index-entry "equal?" "tt" main 15)
(index-entry "Equal?" "tt" aux 15)
(index-entry "eqv?" "tt" aux 15)
(index-entry "equal?" "tt" aux 15)
(index-entry "Equal?" "tt" aux 15)
(index-entry "pair" "rm" main 15)
(index-entry "dotted pair" "rm" main 15)
(index-entry "cons" "tt" aux 15)
(index-entry "car" "tt" aux 15)
(index-entry "cdr" "tt" aux 15)
(index-entry "set-car!" "tt" aux 15)
(index-entry "set-cdr!" "tt" aux 15)
(index-entry "empty list" "rm" aux 15)
(index-entry "empty list" "rm" main 15)
(index-entry "empty list" "rm" aux 15)
(index-entry "improper list" "rm" main 16)
(index-entry "set-cdr!" "tt" aux 16)
(index-entry "read" "tt" aux 16)
(index-entry "'" "tt" aux 16)
(index-entry "," "tt" aux 16)
(index-entry "quote" "tt" aux 16)
(index-entry "quasiquote" "tt" aux 16)
(index-entry "unquote" "tt" aux 16)
(index-entry "unquote-splicing" "tt" aux 16)
(index-entry "read" "tt" aux 16)
(index-entry "pair?" "tt" main 16)
(index-entry "Pair?" "tt" aux 16)
(index-entry "cons" "tt" main 16)
(index-entry "eqv?" "tt" aux 16)
(index-entry "car" "tt" main 16)
(index-entry "empty list" "rm" aux 16)
(index-entry "cdr" "tt" main 16)
(index-entry "set-car!" "tt" main 16)
(index-entry "set-car!" "tt" aux 16)
(index-entry "set-cdr!" "tt" main 16)
(index-entry "set-cdr!" "tt" aux 16)
(index-entry "caar" "tt" main 16)
(index-entry "cadr" "tt" main 16)
(index-entry "cdddar" "tt" main 16)
(index-entry "cddddr" "tt" main 16)
(index-entry "car" "tt" aux 16)
(index-entry "cdr" "tt" aux 16)
(index-entry "caddr" "tt" aux 16)
(index-entry "null?" "tt" main 16)
(index-entry "empty list" "rm" aux 16)
(index-entry "list?" "tt" main 16)
(index-entry "list" "tt" main 17)
(index-entry "length" "tt" main 17)
(index-entry "append" "tt" main 17)
(index-entry "reverse" "tt" main 17)
(index-entry "list-tail" "tt" main 17)
(index-entry "List-tail" "tt" aux 17)
(index-entry "list-ref" "tt" main 17)
(index-entry "memq" "tt" main 17)
(index-entry "memv" "tt" main 17)
(index-entry "member" "tt" main 17)
(index-entry "Memq" "tt" aux 17)
(index-entry "eq?" "tt" aux 17)
(index-entry "memv" "tt" aux 17)
(index-entry "eqv?" "tt" aux 17)
(index-entry "member" "tt" aux 17)
(index-entry "equal?" "tt" aux 17)
(index-entry "assq" "tt" main 17)
(index-entry "assv" "tt" main 17)
(index-entry "assoc" "tt" main 17)
(index-entry "Assq" "tt" aux 17)
(index-entry "eq?" "tt" aux 17)
(index-entry "assv" "tt" aux 17)
(index-entry "eqv?" "tt" aux 17)
(index-entry "assoc" "tt" aux 17)
(index-entry "equal?" "tt" aux 17)
(index-entry "memq" "tt" aux 17)
(index-entry "memv" "tt" aux 17)
(index-entry "member" "tt" aux 17)
(index-entry "assq" "tt" aux 17)
(index-entry "assv" "tt" aux 17)
(index-entry "assoc" "tt" aux 17)
(index-entry "eqv?" "tt" aux 18)
(index-entry "identifier" "rm" aux 18)
(index-entry "read" "tt" aux 18)
(index-entry "write" "tt" aux 18)
(index-entry "eqv?" "tt" aux 18)
(index-entry "string\discretionary {->}{}{->}{}symbol" "tt" aux 18)
(index-entry "symbol?" "tt" main 18)
(index-entry "symbol->string" "tt" main 18)
(index-entry "read" "tt" aux 18)
(index-entry "string\discretionary {->}{}{->}{}symbol" "tt" aux 18)
(index-entry "string\discretionary {->}{}{->}{}symbol" "tt" aux 18)
(index-entry "string-set!" "tt" aux 18)
(index-entry "string->symbol" "tt" main 18)
(index-entry "symbol\discretionary {->}{}{->}{}string" "tt" aux 18)
(index-entry "number" "rm" aux 18)
(index-entry "numerical types" "rm" aux 19)
(index-entry "number?" "tt" aux 19)
(index-entry "complex?" "tt" aux 19)
(index-entry "real?" "tt" aux 19)
(index-entry "rational?" "tt" aux 19)
(index-entry "integer?" "tt" aux 19)
(index-entry "exactness" "rm" main 19)
(index-entry "+" "tt" aux 19)
(index-entry "inexact->exact" "tt" aux 19)
(index-entry "implementation restriction" "rm" aux 19)
(index-entry "length" "tt" aux 19)
(index-entry "vector-length" "tt" aux 19)
(index-entry "string-length" "tt" aux 19)
(index-entry "/" "tt" aux 20)
(index-entry "sqrt" "tt" aux 20)
(index-entry "sqrt" "tt" aux 20)
(index-entry "b" "sharpfoo" aux 20)
(index-entry "o" "sharpfoo" aux 20)
(index-entry "d" "sharpfoo" aux 20)
(index-entry "x" "sharpfoo" aux 20)
(index-entry "e" "sharpfoo" aux 20)
(index-entry "i" "sharpfoo" aux 20)
(index-entry "s" "tt" aux 20)
(index-entry "f" "tt" aux 20)
(index-entry "d" "tt" aux 20)
(index-entry "l" "tt" aux 20)
(index-entry "e" "tt" aux 20)
(index-entry "number?" "tt" main 20)
(index-entry "complex?" "tt" main 20)
(index-entry "real?" "tt" main 20)
(index-entry "rational?" "tt" main 20)
(index-entry "integer?" "tt" main 20)
(index-entry "rational?" "tt" aux 21)
(index-entry "real?" "tt" aux 21)
(index-entry "complex?" "tt" aux 21)
(index-entry "number?" "tt" aux 21)
(index-entry "exact?" "tt" main 21)
(index-entry "inexact?" "tt" main 21)
(index-entry "=" "tt" main 21)
(index-entry "<" "tt" main 21)
(index-entry ">" "tt" main 21)
(index-entry "<=" "tt" main 21)
(index-entry ">=" "tt" main 21)
(index-entry "=" "tt" aux 21)
(index-entry "zero?" "tt" aux 21)
(index-entry "zero?" "tt" main 21)
(index-entry "positive?" "tt" main 21)
(index-entry "negative?" "tt" main 21)
(index-entry "odd?" "tt" main 21)
(index-entry "even?" "tt" main 21)
(index-entry "max" "tt" main 21)
(index-entry "min" "tt" main 21)
(index-entry "min" "tt" aux 21)
(index-entry "max" "tt" aux 21)
(index-entry "+" "tt" main 21)
(index-entry "*" "tt" main 21)
(index-entry "-" "tt" main 21)
(index-entry "-" "tt" main 21)
(index-entry "-" "tt" main 21)
(index-entry "/" "tt" main 21)
(index-entry "/" "tt" main 21)
(index-entry "/" "tt" main 21)
(index-entry "abs" "tt" main 21)
(index-entry "Abs" "tt" aux 21)
(index-entry "quotient" "tt" main 22)
(index-entry "remainder" "tt" main 22)
(index-entry "modulo" "tt" main 22)
(index-entry "quotient" "tt" aux 22)
(index-entry "Remainder" "tt" aux 22)
(index-entry "modulo" "tt" aux 22)
(index-entry "remainder" "tt" aux 22)
(index-entry "modulo" "tt" aux 22)
(index-entry "gcd" "tt" main 22)
(index-entry "lcm" "tt" main 22)
(index-entry "numerator" "tt" main 22)
(index-entry "denominator" "tt" main 22)
(index-entry "floor" "tt" main 22)
(index-entry "ceiling" "tt" main 22)
(index-entry "truncate" "tt" main 22)
(index-entry "round" "tt" main 22)
(index-entry "Floor" "tt" aux 22)
(index-entry "Ceiling" "tt" aux 22)
(index-entry "Truncate" "tt" aux 22)
(index-entry "Round" "tt" aux 22)
(index-entry "Round" "tt" aux 22)
(index-entry "inexact->exact" "tt" aux 22)
(index-entry "rationalize" "tt" main 22)
(index-entry "Rationalize" "tt" aux 22)
(index-entry "simplest rational" "rm" main 22)
(index-entry "exp" "tt" main 23)
(index-entry "log" "tt" main 23)
(index-entry "sin" "tt" main 23)
(index-entry "cos" "tt" main 23)
(index-entry "tan" "tt" main 23)
(index-entry "asin" "tt" main 23)
(index-entry "acos" "tt" main 23)
(index-entry "atan" "tt" main 23)
(index-entry "atan" "tt" main 23)
(index-entry "Log" "tt" aux 23)
(index-entry "Asin" "tt" aux 23)
(index-entry "acos" "tt" aux 23)
(index-entry "atan" "tt" aux 23)
(index-entry "atan" "tt" aux 23)
(index-entry "sqrt" "tt" main 23)
(index-entry "expt" "tt" main 23)
(index-entry "make-rectangular" "tt" main 23)
(index-entry "make-polar" "tt" main 23)
(index-entry "real-part" "tt" main 23)
(index-entry "imag-part" "tt" main 23)
(index-entry "magnitude" "tt" main 23)
(index-entry "angle" "tt" main 23)
(index-entry "make-rectangular" "tt" aux 23)
(index-entry "make-polar" "tt" aux 23)
(index-entry "real-part" "tt" aux 23)
(index-entry "imag-part" "tt" aux 23)
(index-entry "magnitude" "tt" aux 23)
(index-entry "angle" "tt" aux 23)
(index-entry "angle" "tt" aux 23)
(index-entry "Magnitude" "tt" aux 23)
(index-entry "abs" "tt" aux 23)
(index-entry "abs" "tt" aux 23)
(index-entry "magnitude" "tt" aux 23)
(index-entry "exact->inexact" "tt" main 23)
(index-entry "inexact->exact" "tt" main 23)
(index-entry "Exact\discretionary {->}{}{->}{}inexact" "tt" aux 23)
(index-entry "Inexact\discretionary {->}{}{->}{}exact" "tt" aux 23)
(index-entry "number->string" "tt" main 23)
(index-entry "number->string" "tt" main 23)
(index-entry "number\discretionary {->}{}{->}{}string" "tt" aux 23)
(index-entry "number\discretionary {->}{}{->}{}string" "tt" aux 24)
(index-entry "string->number" "tt" main 24)
(index-entry "string->number" "tt" main 24)
(index-entry "string->number" "tt" aux 24)
(index-entry "string->number" "tt" aux 24)
(index-entry "String->number" "tt" aux 24)
(index-entry "string->number" "tt" aux 24)
(index-entry "string->number" "tt" aux 24)
(index-entry "string->number" "tt" aux 24)
(index-entry "string->number" "tt" aux 24)
(index-entry "char?" "tt" main 24)
(index-entry "char=?" "tt" main 24)
(index-entry "char<?" "tt" main 24)
(index-entry "char>?" "tt" main 24)
(index-entry "char<=?" "tt" main 24)
(index-entry "char>=?" "tt" main 24)
(index-entry "char-ci=?" "tt" main 25)
(index-entry "char-ci<?" "tt" main 25)
(index-entry "char-ci>?" "tt" main 25)
(index-entry "char-ci<=?" "tt" main 25)
(index-entry "char-ci>=?" "tt" main 25)
(index-entry "char=?" "tt" aux 25)
(index-entry "char-alphabetic?" "tt" main 25)
(index-entry "char-numeric?" "tt" main 25)
(index-entry "char-whitespace?" "tt" main 25)
(index-entry "char-upper-case?" "tt" main 25)
(index-entry "char-lower-case?" "tt" main 25)
(index-entry "char->integer" "tt" main 25)
(index-entry "integer->char" "tt" main 25)
(index-entry "char\discretionary {->}{}{->}{}integer" "tt" aux 25)
(index-entry "char\discretionary {->}{}{->}{}integer" "tt" aux 25)
(index-entry "integer\discretionary {->}{}{->}{}char" "tt" aux 25)
(index-entry "char<=?" "tt" aux 25)
(index-entry "<=" "tt" aux 25)
(index-entry "integer\discretionary {->}{}{->}{}char" "tt" aux 25)
(index-entry "char-upcase" "tt" main 25)
(index-entry "char-downcase" "tt" main 25)
(index-entry "char-upcase" "tt" aux 25)
(index-entry "char-downcase" "tt" aux 25)
(index-entry "valid indexes" "rm" main 25)
(index-entry "string?" "tt" main 25)
(index-entry "make-string" "tt" main 25)
(index-entry "make-string" "tt" main 25)
(index-entry "Make-string" "tt" aux 25)
(index-entry "string" "tt" main 25)
(index-entry "string-length" "tt" main 25)
(index-entry "string-ref" "tt" main 25)
(index-entry "String-ref" "tt" aux 25)
(index-entry "string-set!" "tt" main 26)
(index-entry "String-set!" "tt" aux 26)
(index-entry "string=?" "tt" main 26)
(index-entry "string-ci=?" "tt" main 26)
(index-entry "String-ci=?" "tt" aux 26)
(index-entry "string=?" "tt" aux 26)
(index-entry "string<?" "tt" main 26)
(index-entry "string>?" "tt" main 26)
(index-entry "string<=?" "tt" main 26)
(index-entry "string>=?" "tt" main 26)
(index-entry "string-ci<?" "tt" main 26)
(index-entry "string-ci>?" "tt" main 26)
(index-entry "string-ci<=?" "tt" main 26)
(index-entry "string-ci>=?" "tt" main 26)
(index-entry "string<?" "tt" aux 26)
(index-entry "char<?" "tt" aux 26)
(index-entry "string=?" "tt" aux 26)
(index-entry "string-ci=?" "tt" aux 26)
(index-entry "substring" "tt" main 26)
(index-entry "Substring" "tt" aux 26)
(index-entry "string-append" "tt" main 26)
(index-entry "string->list" "tt" main 26)
(index-entry "list->string" "tt" main 26)
(index-entry "String\discretionary {->}{}{->}{}list" "tt" aux 26)
(index-entry "List\discretionary {->}{}{->}{}string" "tt" aux 26)
(index-entry "String\discretionary {->}{}{->}{}list" "tt" aux 26)
(index-entry "list\discretionary {->}{}{->}{}string" "tt" aux 26)
(index-entry "equal?" "tt" aux 26)
(index-entry "string-copy" "tt" main 26)
(index-entry "string-fill!" "tt" main 26)
(index-entry "valid indexes" "rm" aux 26)
(index-entry "vector?" "tt" main 26)
(index-entry "make-vector" "tt" main 26)
(index-entry "make-vector" "tt" main 26)
(index-entry "vector" "tt" main 27)
(index-entry "list" "tt" aux 27)
(index-entry "vector-length" "tt" main 27)
(index-entry "vector-ref" "tt" main 27)
(index-entry "Vector-ref" "tt" aux 27)
(index-entry "vector-set!" "tt" main 27)
(index-entry "Vector-set!" "tt" aux 27)
(index-entry "vector-set!" "tt" aux 27)
(index-entry "vector->list" "tt" main 27)
(index-entry "list->vector" "tt" main 27)
(index-entry "Vector->list" "tt" aux 27)
(index-entry "List->vector" "tt" aux 27)
(index-entry "vector-fill!" "tt" main 27)
(index-entry "vector-fill!" "tt" aux 27)
(index-entry "procedure?" "tt" aux 27)
(index-entry "procedure?" "tt" main 27)
(index-entry "apply" "tt" main 27)
(index-entry "apply" "tt" main 27)
(index-entry "map" "tt" main 27)
(index-entry "Map" "tt" aux 27)
(index-entry "for-each" "tt" main 28)
(index-entry "for-each" "tt" aux 28)
(index-entry "map" "tt" aux 28)
(index-entry "for-each" "tt" aux 28)
(index-entry "map" "tt" aux 28)
(index-entry "for-each" "tt" aux 28)
(index-entry "for-each" "tt" aux 28)
(index-entry "force" "tt" main 28)
(index-entry "delay" "tt" aux 28)
(index-entry "promise" "rm" aux 28)
(index-entry "Force" "tt" aux 28)
(index-entry "delay" "tt" aux 28)
(index-entry "delay" "tt" aux 28)
(index-entry "force" "tt" aux 28)
(index-entry "force" "tt" aux 28)
(index-entry "make-promise" "tt" aux 28)
(index-entry "make-promise" "tt" aux 28)
(index-entry "delay" "tt" aux 28)
(index-entry "force" "tt" aux 28)
(index-entry "force" "tt" aux 28)
(index-entry "cdr" "tt" aux 28)
(index-entry "+" "tt" aux 28)
(index-entry "call-with-current-continuation" "tt" main 28)
(index-entry "call-with-current-continuation" "tt" aux 28)
(index-entry "escape procedure" "rm" main 28)
(index-entry "call-with-current-continuation" "tt" aux 29)
(index-entry "call-with-current-continuation" "tt" aux 29)
(index-entry "call-with-current-continuation" "tt" aux 29)
(index-entry "call-with-current-continuation" "tt" aux 29)
(index-entry "continuation" "rm" main 29)
(index-entry "Call-with-current-continuation" "tt" aux 29)
(index-entry "return" "tt" aux 29)
(index-entry "catch" "tt" aux 29)
(index-entry "catch" "tt" aux 29)
(index-entry "call-with-current-continuation" "tt" aux 29)
(index-entry "call/cc" "tt" aux 29)
(index-entry "port" "rm" main 29)
(index-entry "call-with-input-file" "tt" main 29)
(index-entry "call-with-output-file" "tt" main 29)
(index-entry "call-with-input-file" "tt" aux 29)
(index-entry "call-with-output-file" "tt" aux 29)
(index-entry "call-with-current-continuation" "tt" aux 29)
(index-entry "call-with-input-file" "tt" aux 29)
(index-entry "call-with-output-file" "tt" aux 29)
(index-entry "input-port?" "tt" main 29)
(index-entry "output-port?" "tt" main 29)
(index-entry "current-input-port" "tt" main 30)
(index-entry "current-output-port" "tt" main 30)
(index-entry "with-input-from-file" "tt" main 30)
(index-entry "with-output-to-file" "tt" main 30)
(index-entry "with-input-from-file" "tt" aux 30)
(index-entry "with-output-to-file" "tt" aux 30)
(index-entry "current-input-port" "tt" aux 30)
(index-entry "current-output-port" "tt" aux 30)
(index-entry "With-input-from-file" "tt" aux 30)
(index-entry "with-output-to-file" "tt" aux 30)
(index-entry "open-input-file" "tt" main 30)
(index-entry "open-output-file" "tt" main 30)
(index-entry "close-input-port" "tt" main 30)
(index-entry "close-output-port" "tt" main 30)
(index-entry "read" "tt" main 30)
(index-entry "read" "tt" main 30)
(index-entry "Read" "tt" aux 30)
(index-entry "Read" "tt" aux 30)
(index-entry "current-input-port" "tt" aux 30)
(index-entry "read-char" "tt" main 30)
(index-entry "read-char" "tt" main 30)
(index-entry "current-input-port" "tt" aux 30)
(index-entry "peek-char" "tt" main 30)
(index-entry "peek-char" "tt" main 30)
(index-entry "current-input-port" "tt" aux 30)
(index-entry "peek-char" "tt" aux 30)
(index-entry "read-char" "tt" aux 30)
(index-entry "read-char" "tt" aux 30)
(index-entry "peek-char" "tt" aux 30)
(index-entry "peek-char" "tt" aux 30)
(index-entry "peek-char" "tt" aux 30)
(index-entry "read-char" "tt" aux 30)
(index-entry "eof-object?" "tt" main 30)
(index-entry "read" "tt" aux 30)
(index-entry "char-ready?" "tt" main 30)
(index-entry "char-ready?" "tt" main 30)
(index-entry "char-ready" "tt" aux 30)
(index-entry "read-char" "tt" aux 30)
(index-entry "char-ready?" "tt" aux 30)
(index-entry "current-input-port" "tt" aux 30)
(index-entry "Char-ready?" "tt" aux 30)
(index-entry "char-ready?" "tt" aux 31)
(index-entry "char-ready?" "tt" aux 31)
(index-entry "write" "tt" main 31)
(index-entry "write" "tt" main 31)
(index-entry "Write" "tt" aux 31)
(index-entry "current-output-port" "tt" aux 31)
(index-entry "display" "tt" main 31)
(index-entry "display" "tt" main 31)
(index-entry "write-char" "tt" aux 31)
(index-entry "write" "tt" aux 31)
(index-entry "Display" "tt" aux 31)
(index-entry "current-output-port" "tt" aux 31)
(index-entry "Write" "tt" aux 31)
(index-entry "display" "tt" aux 31)
(index-entry "write" "tt" aux 31)
(index-entry "display" "tt" aux 31)
(index-entry "newline" "tt" main 31)
(index-entry "newline" "tt" main 31)
(index-entry "current-output-port" "tt" aux 31)
(index-entry "write-char" "tt" main 31)
(index-entry "write-char" "tt" main 31)
(index-entry "current-output-port" "tt" aux 31)
(index-entry "load" "tt" main 31)
(index-entry "load" "tt" aux 31)
(index-entry "load" "tt" aux 31)
(index-entry "current-input-port" "tt" aux 31)
(index-entry "current-output-port" "tt" aux 31)
(index-entry "Load" "tt" aux 31)
(index-entry "load" "tt" aux 31)
(index-entry "transcript-on" "tt" main 31)
(index-entry "transcript-off" "tt" main 31)
(index-entry "transcript-on" "tt" aux 31)
(index-entry "transcript-off" "tt" aux 31)
(index-entry "token" "rm" aux 32)
(index-entry "identifier" "rm" aux 32)
(index-entry "comment" "rm" aux 32)
(index-entry "keyword" "rm" aux 32)
(index-entry "syntactic keyword" "rm" aux 32)
(index-entry "variable" "rm" aux 32)
(index-entry "i" "sharpfoo" aux 32)
(index-entry "e" "sharpfoo" aux 32)
(index-entry "b" "sharpfoo" aux 32)
(index-entry "o" "sharpfoo" aux 32)
(index-entry "x" "sharpfoo" aux 32)
(index-entry "read" "tt" aux 33)
(index-entry "lambda" "tt" aux 34)
(index-entry "lambda" "tt" aux 35)
(index-entry "if" "tt" aux 35)
(index-entry "set!" "tt" aux 35)
(index-entry "<" "tt" aux 36)
(index-entry "+" "tt" aux 36)
(index-entry "car" "tt" aux 36)
(index-entry "set-car!" "tt" aux 36)
(index-entry "set-car!" "tt" aux 36)
(index-entry "apply" "tt" aux 36)
(index-entry "values-list" "tt" aux 36)
(index-entry "call-with-current-continuation" "tt" aux 36)
(index-entry "lambda" "tt" aux 36)
(index-entry "if" "tt" aux 36)
(index-entry "set!" "tt" aux 36)
(index-entry "memv" "tt" aux 37)
(index-entry "let" "tt" aux 37)
(index-entry "begin" "tt" aux 37)
(index-entry "do" "tt" aux 37)
(index-entry "do" "tt" aux 37)
(index-entry "do" "tt" aux 37)
(index-entry "do" "tt" aux 37)
(index-entry "force" "tt" aux 38)
(index-entry "boolean?" "tt" aux 38)
(index-entry "pair?" "tt" aux 38)
(index-entry "symbol?" "tt" aux 38)
(index-entry "number?" "tt" aux 38)
(index-entry "char?" "tt" aux 38)
(index-entry "string?" "tt" aux 38)
(index-entry "vector?" "tt" aux 38)
(index-entry "procedure?" "tt" aux 38)
(index-entry "lambda" "tt" aux 38)
(index-entry "let" "tt" aux 38)
(index-entry "letrec" "tt" aux 38)
(index-entry "do" "tt" aux 38)
(index-entry "begin" "tt" aux 38)
(index-entry "eqv?" "tt" aux 38)
(index-entry "Rationalize" "tt" aux 38)
(index-entry "number->string" "tt" aux 38)
(index-entry "string->number" "tt" aux 38)
(index-entry "Integer->char" "tt" aux 38)
(index-entry "force" "tt" aux 38)
(index-entry "t" "tt" aux 38)
(index-entry "nil" "tt" aux 38)
(index-entry "approximate" "tt" aux 38)
(index-entry "last-pair" "tt" aux 38)
(index-entry "list?" "tt" aux 38)
(index-entry "peek-char" "tt" aux 38)
(index-entry "case" "tt" aux 38)
(index-entry "and" "tt" aux 38)
(index-entry "or" "tt" aux 38)
(index-entry "quasiquote" "tt" aux 38)
(index-entry "append" "tt" aux 38)
(index-entry "+" "tt" aux 38)
(index-entry "*" "tt" aux 38)
(index-entry "-" "tt" aux 38)
(index-entry "/" "tt" aux 38)
(index-entry "=" "tt" aux 38)
(index-entry "<" "tt" aux 38)
(index-entry ">" "tt" aux 38)
(index-entry "<=" "tt" aux 38)
(index-entry ">=" "tt" aux 38)
(index-entry "map" "tt" aux 38)
(index-entry "for-each" "tt" aux 38)
(index-entry "Integrate-system" "tt" aux 39)
(index-entry "integrate-system" "tt" aux 39)
(index-entry "Runge-Kutta-4" "tt" aux 39)
(index-entry "Runge-Kutta-4" "tt" aux 39)
(index-entry "Map-streams" "tt" aux 39)
(index-entry "map" "tt" aux 39)
(index-entry "integrate-system" "tt" aux 39)
(index-entry "macro" "rm" main 40)
(index-entry "syntactic keyword" "rm" aux 40)
(index-entry "keyword" "rm" aux 40)
(index-entry "macro keyword" "rm" aux 40)
(index-entry "macro use" "rm" aux 40)
(index-entry "macro transformer" "rm" aux 40)
(index-entry "keyword" "rm" aux 40)
(index-entry "hygienic" "rm" main 40)
(index-entry "referentially transparent" "rm" main 40)
(index-entry "let-syntax" "tt" main 41)
(index-entry "letrec-syntax" "tt" main 41)
(index-entry "define-syntax" "tt" main 41)
(index-entry "syntax-rules" "tt" main 42)
(index-entry "syntax" "tt" main 44)
(index-entry "identifier?" "tt" main 44)
(index-entry "unwrap-syntax" "tt" main 44)
(index-entry "free-identifier=?" "tt" main 44)
(index-entry "bound-identifier=?" "tt" main 45)
(index-entry "identifier->symbol" "tt" main 45)
(index-entry "generate-identifier" "tt" main 45)
(index-entry "generate-identifier" "tt" main 45)
(index-entry "construct-identifier" "tt" main 45)
