;; C declaration file for /usr/include/X11/Xlib.h

; Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts,
; and the Massachusetts Institute of Technology, Cambridge, Massachusetts.
;
;                         All Rights Reserved
;
; Permission to use, copy, modify, and distribute this software and its 
; documentation for any purpose and without fee is hereby granted, 
; provided that the above copyright notice appear in all copies and that
; both that copyright notice and this permission notice appear in 
; supporting documentation, and that the names of Digital or MIT not be
; used in advertising or publicity pertaining to distribution of the
; software without specific, written prior permission.  
;
; DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
; ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
; DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
; ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
; WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
; ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
; SOFTWARE.

; *	Xlib.h - Header definition and support file for the C subroutine
; *	interface library (Xlib) to the X Window System Protocol (V11).
; *	Structures and symbols starting with "_" are private to the library.

(const QueuedAlready 0)
(const QueuedAfterReading 1)
(const QueuedAfterFlush 2)
(const AllPlanes -1)

(typedef int Bool)
(typedef (Bool *proc) BoolPROC)
(typedef int Status)

; * Extensions need a way to hang private data on some structures.

(typedef (struct) XExtData)
(typedef (XExtData *) XExtDataP)

; * Data structure for setting graphics context.
 
(typedef (struct 
	(int function)		  ;; logical operation 
	(unsignedlong plane_mask) ;; plane mask 
	(unsignedlong foreground) ;; foreground pixel 
	(unsignedlong background) ;; background pixel 
	(int line_width)	  ;; line width 
	(int line_style) 	  ;; LineSolid, LineOnOffDash, LineDoubleDash 
	(int cap_style)	  	  ;; CapNotLast, CapButt, 
				  ;;  CapRound, CapProjecting 
	(int join_style)	  ;; JoinMiter, JoinRound, JoinBevel 
	(int fill_style)	  ;; FillSolid, FillTiled, 
				  ;;  FillStippled, FillOpaeueStippled 
	(int fill_rule)	  	  ;; EvenOddRule, WindingRule 
	(int arc_mode)		  ;; ArcChord, ArcPieSlice 
	(Pixmap tile)		  ;; tile pixmap for tiling operations 
	(Pixmap stipple)	  ;; stipple 1 plane pixmap for stipping 
	(int ts_x_origin)	  ;; offset for tile or stipple operations 
	(int ts_y_origin)
        (Font font)	          ;; default text font for text operations 
	(int subwindow_mode)      ;; ClipByChildren, IncludeInferiors 
	(int graphics_exposures)  ;; boolean, should exposures be generated 
	(int clip_x_origin)	  ;; origin for clipping 
	(int clip_y_origin)
	(Pixmap clip_mask)	  ;; bitmap clipping; other calls for rects 
	(int dash_offset)	  ;; patterned/dashed line information 
	(char dashes)
) XGCValues)

(typedef (XGCValues *) XGCValuesP)

; * Graphics context.  All Xlib routines deal in this rather than
; * in raw protocol GContext ID's.  This is so that the library can keep
; * a "shadow" set of values, and thus avoid passing values over the
; * wire which are not in fact changing. 

(typedef (struct) _XGC)
(typedef (_XGC *) GC)

; * Visual structure; contains information about colormapping possible.
 
(typedef (struct 
	(XExtDataP ext_data) ;; hook for extension to hang data 
	(VisualID visualid)	;; visual id of this visual 
	(int class)		;; class of screen (monochrome, etc.) 
	(unsignedlong red_mask)	;; mask values
	(unsignedlong green_mask)
	(unsignedlong blue_mask)
	(int bits_per_rgb)	;; log base 2 of distinct color values 
	(int map_entries)	;; color map entries 
) Visual)

(typedef (Visual *) VisualP)

; * Depth structure; contains information for each possible depth.
 	
(typedef (struct 
	(int depth)		;; this depth (Z) of the depth 
	(int nvisuals)		;; number of Visual types at this depth 
	(VisualP visuals)	;; list of visuals possible at this depth 
) Depth)

(typedef (Depth *) DepthP)

; * Information about the screen.
 
(typedef (struct 
	(XExtDataP ext_data)	;; hook for extension to hang data 
	(DisplayP display) 	;; back pointer to display structure 
	(Window root)		;; Root window id. 
	(int width)		;; width and height of screen
	(int height)
	(int mwidth)		;; width and height of  in millimeters 
	(int mheight)
	(int ndepths)		;; number of depths possible 
	(DepthP depths)		;; list of allowable depths on the screen 
	(int root_depth)	;; bits per pixel 
	(VisualP root_visual);; root visual 
	(GC default_gc)		;; GC for the root root visual 
	(Colormap cmap)		;; default color map 
	(unsignedlong white_pixel)
	(unsignedlong black_pixel)	;; White and Black pixel values 
	(int max_maps)
	(int min_maps)		;; max and min color maps 
	(int backing_store)	;; Never, WhenMapped, Always 
	(int save_unders)	
	(long root_input_mask)	;; initial root input mask 
) Screen)

(typedef (Screen *) ScreenP)

; * Format structure; describes ZFormat data the screen will understand.
 
(typedef (struct 
	(XExtDataP ext_data)	;; hook for extension to hang data 
	(int depth)		;; depth of this image format 
	(int bits_per_pixel)	;; bits/pixel at this depth 
	(int scanline_pad)	;; scanline must padded to this multiple 
) ScreenFormat)

(define-only ScreenFormat)

; * Data structure for setting window attributes.
 
(typedef (struct
    (Pixmap background_pixmap)	;; background or None or ParentRelative 
    (unsignedlong background_pixel)	;; background pixel 
    (Pixmap border_pixmap)	;; border of the window 
    (unsignedlong border_pixel)	;; border pixel value 
    (int bit_gravity)		;; one of bit gravity values 
    (int win_gravity)		;; one of the window gravity values 
    (int backing_store)		;; NotUseful, WhenMapped, Always 
    (unsignedlong backing_planes);;; planes to be preseved if possible 
    (unsignedlong backing_pixel);;; value to use in restoring planes 
    (int save_under)		;; should bits under be saved? (popups) 
    (long event_mask)		;; set of events that should be saved 
    (long do_not_propagate_mask);; set of events that should not propagate 
    (int override_redirect)	;; boolean value for override-redirect 
    (Colormap colormap)		;; color map to be associated with window 
    (Cursor cursor)		;; cursor to be displayed (or None) 
) XSetWindowAttributes)

(typedef (XSetWindowAttributes *) XSetWindowAttributesP)

(typedef (struct
    (int x) (int y)		;; location of window 
    (int width) (int height)	;; width and height of window 
    (int border_width)		;; border width of window 
    (int depth)          	;; depth of window 
    (VisualP visual)		;; the associated visual structure 
    (Window root)        	;; root of screen containing window 
    (int class)			;; InputOutput, InputOnly
    (int bit_gravity)		;; one of bit gravity values 
    (int win_gravity)		;; one of the window gravity values 
    (int backing_store)		;; NotUseful, WhenMapped, Always 
    (unsignedlong backing_planes);; planes to be preserved if possible 
    (unsignedlong backing_pixel);; value to be used when restoring planes 
    (int save_under)		;; boolean, should bits under be saved? 
    (Colormap colormap)		;; color map to be associated with window 
    (int map_installed)		;; boolean, is color map currently installed
    (int map_state)		;; IsUnmapped, IsUnviewable, IsViewable 
    (long all_event_masks)	;; set of events all people have interest in
    (long your_event_mask)	;; my event mask 
    (long do_not_propagate_mask) ;; set of events that should not propagate 
    (int override_redirect)	;; boolean value for override-redirect 
    (ScreenP screen)		;; back pointer to correct screen 
) XWindowAttributes)

(typedef (XWindowAttributes *) XWindowAttributesP)

; * Data structure for host setting; getting routines.
 

(typedef (struct 
	(int family)		;; for example AF_DNET 
	(int length)		;; length of address, in bytes 
	(charP address)		;; pointer to where to find the bytes 
) XHostAddress)

(typedef (XHostAddress *) XHostAddressP)
(typedef (XHostAddress 0) XHostAddressA)
(typedef (XHostAddressA *) XHostAddressAP)

; * Data structure for "image" data, used by image manipulation routines.
 
(typedef (struct 
    (int width)			;; size of image
    (int height)
    (int xoffset)		;; number of pixels offset in X direction 
    (int format)		;; XYBitmap, XYPixmap, ZPixmap 
    (charAP data)		;; pointer to image data 
    (int byte_order)		;; data byte order, LSBFirst, MSBFirst 
    (int bitmap_unit)		;; quant. of scanline 8, 16, 32 
    (int bitmap_bit_order)	;; LSBFirst, MSBFirst 
    (int bitmap_pad)		;; 8, 16, 32 either XY or ZPixmap 
    (int depth)			;; depth of image 
    (int bytes_per_line)	;; accelarator to next line 
    (int bits_per_pixel)	;; bits per pixel (ZPixmap) 
    (unsignedlong red_mask)	;; bits in z arrangment 
    (unsignedlong green_mask)
    (unsignedlong blue_mask)
    (charP obdata)		;; hook for the object routines to hang on
    ((struct	 		;; image manipulation routines 
	(XImagePROC create_image)
	(intPROC destroy_image)
	(unsignedlongPROC get_pixel)
	(intPROC put_pixel)
	(XImagePROC sub_image)
	(intPROC add_pixel)) f)
) XImage)

(typedef (XImage *) XImageP)

(typedef (XImage *proc) XImagePROC)

; * Data structure for XReconfigureWindow
 
(typedef (struct
    (int x) (int y)
    (int width) (int height)
    (int border_width)
    (Window sibling)
    (int stack_mode)
) XWindowChanges)

(typedef (XWindowChanges *) XWindowChangesP)

; * Data structure used by color operations
 
(typedef (struct
	(unsignedlong pixel)
	(unsignedshort red)
	(unsignedshort green)
	(unsignedshort blue)
	(char flags)  ;; do_red, do_green, do_blue 
	(char pad)
) XColor)

(typedef (XColor *) XColorP)
(typedef (XColor 0) XColorA)
(typedef (XColorA *) XColorAP)

; * Data structures for graphics operations.  On most machines, these are
; * congruent with the wire protocol structures, so reformatting the data
; * can be avoided on these architectures.
 
(typedef (struct
    (short x1)
    (short y1)
    (short x2)
    (short y2)
) XSegment)

(typedef (XSegment *) XSegmentP)
(typedef (XSegment 0) XSegmentA)
(typedef (XSegmentA *) XSegmentAP)

(typedef (struct
    (short x)
    (short y)
) XPoint)

(typedef (XPoint *) XPointP)
(typedef (XPoint 0) XPointA)
(typedef (XPointA *) XPointAP)
    
(typedef (struct
    (short x)
    (short y)
    (unsignedshort width)
    (unsignedshort height)
) XRectangle)

(typedef (XRectangle *) XRectangleP)
(typedef (XRectangle 0) XRectangleA)
(typedef (XRectangleA *) XRectangleAP)
    
(typedef (struct
    (short x)
    (short y)
    (unsignedshort width)
    (unsignedshort height)
    (short angle1)
    (short angle2)
) XArc)

(typedef (XArc *) XArcP)
(typedef (XArc 0) XArcA)
(typedef (XArcA *) XArcAP)


;; Data structure for XChangeKeyboardControl 

(typedef (struct
        (int key_click_percent)
        (int bell_percent)
        (int bell_pitch)
        (int bell_duration)
        (int led)
        (int led_mode)
        (int key)
        (int auto_repeat_mode)   ;; On, Off, Default 
) XKeyboardControl)

(typedef (XKeyboardControl *) XKeyboardControlP)

;; Data structure for XGetKeyboardControl 

(typedef (struct
        (int key_click_percent)
	(int bell_percent)
	(unsignedint bell_pitch)
	(unsignedint bell_duration)
	(unsignedlong led_mask)
	(int global_auto_repeat)
	((char 32) auto_repeats)
) XKeyboardState)

(typedef (XKeyboardState *) XKeyboardStateP)

;; Data structure returned by XQueryKeymap.

(typedef (char 32) XQKeymap)
(typedef (XQKeymap *) XQKeymapP)

;; Data structure for XGetMotionEvents.  

(typedef (struct 
        (Time time)
	(short x)
	(short y)
) XTimeCoord)

(typedef (XTimeCoord *) XTimeCoordP)
(typedef (XTimeCoord 0) XTimeCoordA)
(typedef (XTimeCoordA *) XTimeCoordAP)

;; Data structure for X{Set,Get}ModifierMapping 

(typedef (struct 
 	(int max_keypermod)	;; The server's max # of keys per modifier 
 	(KeyCode *modifiermap)	;; An 8 by max_keypermod array of modifiers 
) XModifierKeymap)

(typedef (XModifierKeymap *) XModifierKeymapP)

(typedef (XModifierKeymap *proc) XNewModifiermap)
(typedef (XModifierKeymap *proc) XGetModifierMapping)
(typedef (XModifierKeymap *proc) XDeleteModifiermapEntry)
(typedef (XModifierKeymap *proc) XInsertModifiermapEntry) 

(typedef (struct
	(intPROC proc)
	(unsignedlongP data)
) EventsData)

; * Display datatype maintaining display specific data.  N.B.  Structure is
; * internal to Xlib.

(typedef (struct) Display)
(typedef (Display *) DisplayP)

; * A "XEvent" structure always  has type as the first entry.  This 
; * uniquely identifies what  kind of event it is.  The second entry
; * is always a pointer to the display the event was read from.
; * The third entry is always a window of one type or another,
; * carefully selected to be useful to toolkit dispatchers.  (Except
; * for keymap events, which have no window.) You
; * must not change the order of the three elements or toolkits will
; * break! The pointer to the generic event must be cast before use to 
; * access any other information in the structure.
 

; * Definitions of specific events.  
 
(typedef (struct
	(int type)		;; of event 
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window window)	        ;; "event" window it is reported relative to 
	(Window root)	        ;; root window that the event occured on 
	(Window subwindow)	;; child window 
	(Time time)		;; milliseconds 
	(int x) (int y)		;; pointer x, y coordinates in event window 
	(int x_root) (int y_root)	;; coordinates relative to root 
	(unsignedint state)	;; key or button mask 
	(unsignedint keycode)	;; detail 
	(int same_screen)	;; same screen flag 
) XKeyEvent)
; (typedef XKeyEvent XKeyPressedEvent)
; (typedef XKeyEvent XKeyReleasedEvent)

(typedef (struct
	(int type)		;; of event 
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window window)	        ;; "event" window it is reported relative to 
	(Window root)	        ;; root window that the event occured on 
	(Window subwindow)	;; child window 
	(Time time)		;; milliseconds 
	(int x) (int y)		;; pointer x, y coordinates in event window 
	(int x_root) (int y_root)	;; coordinates relative to root 
	(unsignedint state)	;; key or button mask 
	(unsignedint button)	;; detail 
	(int same_screen)	;; same screen flag 
) XButtonEvent)
; (typedef XButtonEvent XButtonPressedEvent)
; (typedef XButtonEvent XButtonReleasedEvent)

(typedef (struct
	(int type)		;; of event 
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window window)	        ;; "event" window reported relative to 
	(Window root)	        ;; root window that the event occured on 
	(Window subwindow)	;; child window 
	(Time time)		;; milliseconds 
	(int x) (int y)		;; pointer x, y coordinates in event window 
	(int x_root) (int y_root)	;; coordinates relative to root 
	(unsignedint state)	;; key or button mask 
	(char is_hint)		;; detail 
	(int same_screen)	;; same screen flag 
) XMotionEvent)
; (typedef XMotionEvent XPointerMovedEvent)

(typedef (struct
	(int type)		;; of event 
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window window)	        ;; "event" window reported relative to 
	(Window root)	        ;; root window that the event occured on 
	(Window subwindow)	;; child window 
	(Time time)		;; milliseconds 
	(int x) (int y)		;; pointer x, y coordinates in event window 
	(int x_root) (int y_root)	;; coordinates relative to root 
	(int mode)		;; NotifyNormal, NotifyGrab, NotifyUngrab 
	(int detail)
		; * NotifyAncestor, NotifyVirtual, NotifyInferior, 
		; * NotifyNonLinear,NotifyNonLinearVirtual
	(int same_screen)	;; same screen flag 
	(int focus)		;; boolean focus 
	(unsignedint state)	;; key or button mask 
) XCrossingEvent)
; (typedef XCrossingEvent XEnterWindowEvent)
; (typedef XCrossingEvent XLeaveWindowEvent)

(typedef (struct
	(int type)		;; FocusIn or FocusOut 
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window window)		;; window of event 
	(int mode)		;; NotifyNormal, NotifyGrab, NotifyUngrab 
	(int detail)
	 	;* NotifyAncestor, NotifyVirtual, NotifyInferior, 
	 	;* NotifyNonLinear,NotifyNonLinearVirtual, NotifyPointer,
	 	;* NotifyPointerRoot, NotifyDetailNone 
	 
) XFocusChangeEvent)
; (typedef XFocusChangeEvent XFocusInEvent)
; (typedef XFocusChangeEvent XFocusOutEvent)

; * generated on EnterWindow and FocusIn  when KeyMapState selected 

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window window)
	((char 32) key_vector)
) XKeymapEvent)	

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window window)
	(int x) (int y)
	(int width) (int height)
	(int count)		;; if non-zero, at least this many more 
) XExposeEvent)

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Drawable drawable)
	(int x) (int y)
	(int width) (int height)
	(int count)		;; if non-zero, at least this many more 
	(int major_code)	;; core is CopyArea or CopyPlane 
	(int minor_code)	;; not defined in the core 
) XGraphicsExposeEvent)

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Drawable drawable)
	(int major_code)	;; core is CopyArea or CopyPlane 
	(int minor_code)	;; not defined in the core 
) XNoExposeEvent)

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window window)
	(int state)		;; either Obscured or UnObscured 
) XVisibilityEvent)

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window parent)		;; parent of the window 
	(Window window)		;; window id of window created 
	(int x) (int y)		;; window location 
	(int width) (int height)	;; size of window 
	(int border_width)	;; border width 
	(int override_redirect)	;; creation should be overridden 
) XCreateWindowEvent)

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window event)
	(Window window)
) XDestroyWindowEvent)

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window event)
	(Window window)
	(int from_configure)
) XUnmapEvent)

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window event)
	(Window window)
	(int override_redirect)	;; boolean, is override set... 
) XMapEvent)

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window parent)
	(Window window)
) XMapRequestEvent)

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window event)
	(Window window)
	(Window parent)
	(int x) (int y)
	(int override_redirect)
) XReparentEvent)

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window event)
	(Window window)
	(int x) (int y)
	(int width) (int height)
	(int border_width)
	(Window above)
	(int override_redirect)
) XConfigureEvent)

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window event)
	(Window window)
	(int x) (int y)
) XGravityEvent)

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window window)
	(int width) (int height)
) XResizeRequestEvent)

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window parent)
	(Window window)
	(int x) (int y)
	(int width) (int height)
	(int border_width)
	(Window above)
	(int detail)		;; Above, Below, TopIf, BottomIf, Opposite 
	(unsignedlong value_mask)
) XConfigureRequestEvent)

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window event)
	(Window window)
	(int place)		;; PlaceOnTop, PlaceOnBottom 
) XCirculateEvent)

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window parent)
	(Window window)
	(int place)		;; PlaceOnTop, PlaceOnBottom 
) XCirculateRequestEvent)

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window window)
	(Atom atom)
	(Time time)
	(int state)		;; NewValue, Deleted 
) XPropertyEvent)

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window window)
	(Atom selection)
	(Time time)
) XSelectionClearEvent)

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window owner)		;; must be next after type 
	(Window requestor)
	(Atom selection)
	(Atom target)
	(Atom property)
	(Time time)
) XSelectionRequestEvent)

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window requestor)	;; must be next after type 
	(Atom selection)
	(Atom target)
	(Atom property)		;; ATOM or None 
	(Time time)
) XSelectionEvent)

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window window)
	(Colormap colormap)	;; COLORMAP or None 
	(int new)
	(int state)		;; ColormapInstalled, ColormapUninstalled 
) XColormapEvent)

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window window)
	(Atom message_type)
	(int format)
	((union	((char 20) b)
		((short 10) s)
		((long 5) l)) data)
) XClientMessageEvent)

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display)	;; Display the event was read from 
	(Window window)		;; unused 
	(int request)		;; one of MappingModifier, MappingKeyboard,
				;;   MappingPointer 
	(int first_keycode)	;; first keycode 
	(int count)		;; defines range of change w. first_keycode
) XMappingEvent)

(typedef (struct
	(int type)
	(DisplayP display)	;; Display the event was read from 
	(XID resourceid)	;; resource id 
	(int serial)		;; serial number of failed request 
	(unsignedchar error_code)	;; error code of failed request 
	(unsignedchar request_code)	;; Major op-code of failed request 
	(unsignedchar minor_code)	;; Minor op-code of failed request 
) XErrorEvent)

(typedef (struct
	(int type)
	(unsignedlong serial)	;; # of last request processed by server 
	(int send_event)	;; true if this came from a SendEvent request 
	(DisplayP display);; Display the event was read from 
	(Window window)	;; window on which event was requested in event mask 
) XAnyEvent)


; * this union is defined so Xlib can always use the same sized
; * event structure internally, to avoid memory fragmentation.
 
(typedef (union
        (int type)		;; must not be changed; first element 
	(XAnyEvent xany)
	(XKeyEvent xkey)
	(XButtonEvent xbutton)
	(XMotionEvent xmotion)
	(XCrossingEvent xcrossing)
	(XFocusChangeEvent xfocus)
	(XExposeEvent xexpose)
	(XGraphicsExposeEvent xgraphicsexpose)
	(XNoExposeEvent xnoexpose)
	(XVisibilityEvent xvisibility)
	(XCreateWindowEvent xcreatewindow)
	(XDestroyWindowEvent xdestroywindow)
	(XUnmapEvent xunmap)
	(XMapEvent xmap)
	(XMapRequestEvent xmaprequest)
	(XReparentEvent xreparent)
	(XConfigureEvent xconfigure)
	(XGravityEvent xgravity)
	(XResizeRequestEvent xresizerequest)
	(XConfigureRequestEvent xconfigurerequest)
	(XCirculateEvent xcirculate)
	(XCirculateRequestEvent xcirculaterequest)
	(XPropertyEvent xproperty)
	(XSelectionClearEvent xselectionclear)
	(XSelectionRequestEvent xselectionrequest)
	(XSelectionEvent xselection)
	(XColormapEvent xcolormap)
	(XClientMessageEvent xclient)
	(XMappingEvent xmapping)
	(XErrorEvent xerror)
	(XKeymapEvent xkeymap)
	((long 24) pad)
) XEvent)

(typedef (XEvent *) XEventP)

(read-only XEvent)

(define-only XAnyEvent XKeyEvent XButtonEvent XMotionEvent XCrossingEvent
	XFocusChangeEvent XExposeEvent XGraphicsExposeEvent XNoExposeEvent
	XVisibilityEvent XCreateWindowEvent XDestroyWindowEvent
	XUnmapEvent XMapEvent XMapRequestEvent XReparentEvent XConfigureEvent
        XGravityEvent XResizeRequestEvent XConfigureRequestEvent 
	XCirculateEvent XCirculateRequestEvent XPropertyEvent 
	XSelectionClearEvent XSelectionRequestEvent XSelectionEvent
	XColormapEvent XClientMessageEvent XMappingEvent XErrorEvent 
	XKeymapEvent)

; * per character font metric information.
 
(typedef (struct
    (short	lbearing)	;; origin to left edge of raster 
    (short	rbearing)	;; origin to right edge of raster 
    (short	width)		;; advance to next char's origin 
    (short	ascent)		;; baseline to top edge of raster 
    (short	descent)	;; baseline to bottom edge of raster 
    (unsignedshort attributes)	;; per char flags (not predefined) 
) XCharStruct)

(typedef (XCharStruct *) XCharStructP)

; * To allow arbitrary information with fonts, there are additional properties
; * returned.
 
(typedef (struct
    (Atom name)
    (unsignedlong card32)
) XFontProp)

(typedef (XFontProp *) XFontPropP)

(typedef (struct
    (XExtDataP ext_data)	;; hook for extension to hang data 
    (Font fid)		        ;; Font id for this font 
    (unsigned direction)	;; hint about direction the font is painted 
    (unsigned min_char_or_byte2);; first character 
    (unsigned max_char_or_byte2);; last character 
    (unsigned min_byte1)	;; first row that exists 
    (unsigned max_byte1)	;; last row that exists 
    (int all_chars_exist)	;; flag if all characters have non-zero size
    (unsigned default_char)	;; char to print for undefined character 
    (int n_properties)          ;; how many properties there are 
    (XFontPropP properties)	;; pointer to array of additional properties
    (XCharStruct min_bounds)	;; minimum bounds over all existing char
    (XCharStruct max_bounds)	;; maximum bounds over all existing char
    (XCharStructP per_char)	;; first_char to last_char information 
    (int ascent)		;; log. extent above baseline for spacing 
    (int descent)		;; log. descent below baseline for spacing 
) XFontStruct)

(typedef (XFontStruct *) XFontStructP)
(typedef (XFontStruct 0) XFontStructA)
(typedef (XFontStructA *) XFontStructAP)

; * PolyText routines take these as arguments.
 
(typedef (struct
    (charP chars)		;; pointer to string 
    (int nchars)		;; number of characters 
    (int delta)			;; delta between strings 
    (Font font)			;; font to print it in, None don't change 
) XTextItem)

(typedef (XTextItem *) XTextItemP)
(typedef (XTextItem 0) XTextItemA)
(typedef (XTextItemA *) XTextItemAP)

(typedef (struct		;; normal 16 bit characters are two bytes 
    (unsignedchar byte1)
    (unsignedchar byte2)
) XChar2b)

(typedef (XChar2b *) XChar2bP)
(typedef (XChar2b 0) XChar2bA)
(typedef (XChar2bA *) XChar2bAP)

(typedef (struct
    (XChar2bP chars)		;; two byte characters 
    (int nchars)		;; number of characters 
    (int delta)			;; delta between strings 
    (Font font)			;; font to print it in, None don't change 
) XTextItem16)

(typedef (XTextItem16 *) XTextItem16P)
