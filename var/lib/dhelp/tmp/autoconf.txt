Autoconf
Creating Automatic Configuration Scripts
for version 2.68, 21 September 2010
David MacKenzie
Ben Elliston
Akim Demaille

This manual (21 September 2010) is for GNU Autoconf (version 2.68), a package for creating
scripts to configure source code packages using templates and an M4 macro package.
Copyright c
# 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
Permission is granted to copy, distribute and/or modify this document under
the terms of the GNU Free Documentation License, Version 1.3 or any later
version published by the Free Software Foundation; with no Invariant Sections,
with the Front­Cover texts being ``A GNU Manual,'' and with the Back­Cover
Texts as in (a) below. A copy of the license is included in the section entitled
``GNU Free Documentation License.''
(a) The FSF's Back­Cover Text is: ``You have the freedom to copy and modify
this GNU manual. Buying copies from the FSF supports it in developing GNU
and promoting software freedom.''

i
Table of Contents
1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1
2 The GNU Build System . . . . . . . . . . . . . . . . . . . . . . . . 3
2.1 Automake . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
2.2 Gnulib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
2.3 Libtool . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
2.4 Pointers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
3 Making configure Scripts . . . . . . . . . . . . . . . . . . . . . . 7
3.1 Writing `configure.ac' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
3.1.1 A Shell Script Compiler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
3.1.2 The Autoconf Language . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
3.1.3 Standard `configure.ac' Layout . . . . . . . . . . . . . . . . . . . . . . . . . 11
3.2 Using autoscan to Create `configure.ac' . . . . . . . . . . . . . . . . . . . . . 12
3.3 Using ifnames to List Conditionals . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
3.4 Using autoconf to Create configure . . . . . . . . . . . . . . . . . . . . . . . . . 13
3.5 Using autoreconf to Update configure Scripts . . . . . . . . . . . . . . . 15
4 Initialization and Output Files . . . . . . . . . . . . . . . 19
4.1 Initializing configure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
4.2 Dealing with Autoconf versions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
4.3 Notices in configure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20
4.4 Finding configure Input . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21
4.5 Outputting Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22
4.6 Performing Configuration Actions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23
4.7 Creating Configuration Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
4.8 Substitutions in Makefiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
4.8.1 Preset Output Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25
4.8.2 Installation Directory Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . 29
4.8.3 Changed Directory Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32
4.8.4 Build Directories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33
4.8.5 Automatic Remaking . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 34
4.9 Configuration Header Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35
4.9.1 Configuration Header Templates . . . . . . . . . . . . . . . . . . . . . . . . . . 36
4.9.2 Using autoheader to Create `config.h.in' . . . . . . . . . . . . . . . 37
4.9.3 Autoheader Macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38
4.10 Running Arbitrary Configuration Commands . . . . . . . . . . . . . . . . . 39
4.11 Creating Configuration Links . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40
4.12 Configuring Other Packages in Subdirectories . . . . . . . . . . . . . . . . . 40
4.13 Default Prefix . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41

ii Autoconf
5 Existing Tests . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43
5.1 Common Behavior . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43
5.1.1 Standard Symbols . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43
5.1.2 Default Includes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43
5.2 Alternative Programs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45
5.2.1 Particular Program Checks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45
5.2.2 Generic Program and File Checks . . . . . . . . . . . . . . . . . . . . . . . . 48
5.3 Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51
5.4 Library Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51
5.5 Library Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52
5.5.1 Portability of C Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52
5.5.2 Particular Function Checks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55
5.5.3 Generic Function Checks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63
5.6 Header Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65
5.6.1 Portability of Headers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65
5.6.2 Particular Header Checks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66
5.6.3 Generic Header Checks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71
5.7 Declarations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73
5.7.1 Particular Declaration Checks . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73
5.7.2 Generic Declaration Checks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73
5.8 Structures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74
5.8.1 Particular Structure Checks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74
5.8.2 Generic Structure Checks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75
5.9 Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76
5.9.1 Particular Type Checks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76
5.9.2 Generic Type Checks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 78
5.10 Compilers and Preprocessors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79
5.10.1 Specific Compiler Characteristics . . . . . . . . . . . . . . . . . . . . . . . . 79
5.10.2 Generic Compiler Characteristics . . . . . . . . . . . . . . . . . . . . . . . . 80
5.10.3 C Compiler Characteristics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81
5.10.4 C++ Compiler Characteristics . . . . . . . . . . . . . . . . . . . . . . . . . . 87
5.10.5 Objective C Compiler Characteristics . . . . . . . . . . . . . . . . . . . . 88
5.10.6 Objective C++ Compiler Characteristics . . . . . . . . . . . . . . . . 88
5.10.7 Erlang Compiler and Interpreter Characteristics . . . . . . . . . 89
5.10.8 Fortran Compiler Characteristics . . . . . . . . . . . . . . . . . . . . . . . . 89
5.11 System Services . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94
5.12 Posix Variants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96
5.13 Erlang Libraries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96

iii
6 Writing Tests . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99
6.1 Language Choice . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99
6.2 Writing Test Programs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
6.2.1 Guidelines for Test Programs . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
6.2.2 Test Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
6.2.3 Generating Sources . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
6.3 Running the Preprocessor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105
6.4 Running the Compiler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106
6.5 Running the Linker . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106
6.6 Checking Runtime Behavior . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107
6.7 Systemology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109
6.8 Multiple Cases . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109
7 Results of Tests . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111
7.1 Defining C Preprocessor Symbols . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111
7.2 Setting Output Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112
7.3 Special Characters in Output Variables . . . . . . . . . . . . . . . . . . . . . . . 114
7.4 Caching Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115
7.4.1 Cache Variable Names . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116
7.4.2 Cache Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117
7.4.3 Cache Checkpointing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117
7.5 Printing Messages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118
8 Programming in M4 . . . . . . . . . . . . . . . . . . . . . . . . . 121
8.1 M4 Quotation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121
8.1.1 Active Characters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121
8.1.2 One Macro Call . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122
8.1.3 Quoting and Parameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123
8.1.4 Quotation and Nested Macros . . . . . . . . . . . . . . . . . . . . . . . . . . . 124
8.1.5 changequote is Evil . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125
8.1.6 Quadrigraphs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126
8.1.7 Dealing with unbalanced parentheses . . . . . . . . . . . . . . . . . . . . 127
8.1.8 Quotation Rule Of Thumb . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129
8.2 Using autom4te . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130
8.2.1 Invoking autom4te . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130
8.2.2 Customizing autom4te . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134
8.3 Programming in M4sugar . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135
8.3.1 Redefined M4 Macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135
8.3.2 Diagnostic messages from M4sugar . . . . . . . . . . . . . . . . . . . . . . 138
8.3.3 Diversion support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139
8.3.4 Conditional constructs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142
8.3.5 Looping constructs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145
8.3.6 Evaluation Macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 149
8.3.7 String manipulation in M4 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153
8.3.8 Arithmetic computation in M4 . . . . . . . . . . . . . . . . . . . . . . . . . . 156
8.3.9 Set manipulation in M4 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158
8.3.10 Forbidden Patterns . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 162
8.4 Debugging via autom4te . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 162

iv Autoconf
9 Programming in M4sh . . . . . . . . . . . . . . . . . . . . . . . 165
9.1 Common Shell Constructs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165
9.2 Support for indirect variable names . . . . . . . . . . . . . . . . . . . . . . . . . . 168
9.3 Initialization Macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171
9.4 File Descriptor Macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173
10 Writing Autoconf Macros . . . . . . . . . . . . . . . . . . 175
10.1 Macro Definitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175
10.2 Macro Names . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 176
10.3 Reporting Messages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177
10.4 Dependencies Between Macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178
10.4.1 Prerequisite Macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178
10.4.2 Suggested Ordering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181
10.4.3 One­Shot Macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181
10.5 Obsoleting Macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
10.6 Coding Style . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
11 Portable Shell Programming . . . . . . . . . . . . . . . 187
11.1 Shellology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188
11.2 Here­Documents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189
11.3 File Descriptors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 191
11.4 File System Conventions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 193
11.5 Shell Pattern Matching . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195
11.6 Shell Substitutions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 196
11.7 Assignments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 204
11.8 Parentheses in Shell Scripts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205
11.9 Slashes in Shell Scripts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205
11.10 Special Shell Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205
11.11 Shell Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 212
11.12 Limitations of Shell Builtins . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 214
11.13 Limitations of Usual Tools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 228
12 Portable Make Programming . . . . . . . . . . . . . . 245
12.1 $< in Ordinary Make Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245
12.2 Failure in Make Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245
12.3 Special Characters in Make Macro Names . . . . . . . . . . . . . . . . . . . 245
12.4 Backslash­Newline­Newline in Make Macro Values . . . . . . . . . . . 246
12.5 Backslash­Newline in Make Comments . . . . . . . . . . . . . . . . . . . . . . 246
12.6 Long Lines in Makefiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 246
12.7 make macro=value and Submakes . . . . . . . . . . . . . . . . . . . . . . . . . . . 246
12.8 The Make Macro MAKEFLAGS . . . . . . . . . . . . . . . . . . . . . . . . . . . . 248
12.9 The Make Macro SHELL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 248
12.10 Parallel Make . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 249
12.11 Comments in Make Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 250
12.12 Newlines in Make Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 250
12.13 The `obj/' Subdirectory and Make . . . . . . . . . . . . . . . . . . . . . . . . . 251
12.14 Exit Status of make ­k . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 251

v
12.15 VPATH and Make . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 251
12.15.1 Variables listed in VPATH . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 252
12.15.2 VPATH and Double­colon Rules . . . . . . . . . . . . . . . . . . . . . . . . 252
12.15.3 $< Not Supported in Explicit Rules . . . . . . . . . . . . . . . . . . . 252
12.15.4 Automatic Rule Rewriting . . . . . . . . . . . . . . . . . . . . . . . . . . . . 252
12.15.5 Tru64 make Creates Prerequisite Directories Magically
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 255
12.15.6 Make Target Lookup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 255
12.16 Single Su#x Rules and Separated Dependencies . . . . . . . . . . . . 258
12.17 Timestamp Resolution and Make . . . . . . . . . . . . . . . . . . . . . . . . . . 258
13 Portable C and C++ Programming . . . . . . . 261
13.1 Varieties of Unportability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 261
13.2 Integer Overflow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 262
13.2.1 Basics of Integer Overflow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 262
13.2.2 Examples of Code Assuming Wraparound Overflow . . . . . 262
13.2.3 Optimizations That Break Wraparound Arithmetic . . . . . 264
13.2.4 Practical Advice for Signed Overflow Issues . . . . . . . . . . . . . 265
13.2.5 Signed Integer Division and Integer Overflow . . . . . . . . . . . 266
13.3 Preprocessor Arithmetic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266
13.4 Properties of Null Pointers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266
13.5 Bu#er Overruns and Subscript Errors . . . . . . . . . . . . . . . . . . . . . . . 266
13.6 Volatile Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 267
13.7 Floating Point Portability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 269
13.8 Exiting Portably . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 269
14 Manual Configuration . . . . . . . . . . . . . . . . . . . . . . 271
14.1 Specifying target triplets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 271
14.2 Getting the Canonical System Type . . . . . . . . . . . . . . . . . . . . . . . . . 272
14.3 Using the System Type . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 273
15 Site Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . 275
15.1 Controlling Help Output . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275
15.2 Working With External Software . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275
15.3 Choosing Package Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 277
15.4 Making Your Help Strings Look Pretty . . . . . . . . . . . . . . . . . . . . . . 278
15.5 Controlling Checking of configure Options . . . . . . . . . . . . . . . . . 279
15.6 Configuring Site Details . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280
15.7 Transforming Program Names When Installing . . . . . . . . . . . . . . 280
15.7.1 Transformation Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281
15.7.2 Transformation Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281
15.7.3 Transformation Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281
15.8 Setting Site Defaults . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282

vi Autoconf
16 Running configure Scripts . . . . . . . . . . . . . . . . . 285
16.1 Basic Installation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 285
16.2 Compilers and Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 286
16.3 Compiling For Multiple Architectures . . . . . . . . . . . . . . . . . . . . . . . 286
16.4 Installation Names . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 287
16.5 Optional Features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 287
16.6 Particular systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 288
16.7 Specifying the System Type . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 288
16.8 Sharing Defaults . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 289
16.9 Defining Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 289
16.10 configure Invocation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 289
17 config.status Invocation . . . . . . . . . . . . . . . . . . . . 291
18 Obsolete Constructs . . . . . . . . . . . . . . . . . . . . . . . . 295
18.1 Obsolete `config.status' Invocation . . . . . . . . . . . . . . . . . . . . . . . 295
18.2 `acconfig.h' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 296
18.3 Using autoupdate to Modernize `configure.ac' . . . . . . . . . . . . 296
18.4 Obsolete Macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297
18.5 Upgrading From Version 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 310
18.5.1 Changed File Names . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 310
18.5.2 Changed Makefiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 310
18.5.3 Changed Macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 311
18.5.4 Changed Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 311
18.5.5 Changed Macro Writing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 312
18.6 Upgrading From Version 2.13 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 312
18.6.1 Changed Quotation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 312
18.6.2 New Macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 313
18.6.3 Hosts and Cross­Compilation . . . . . . . . . . . . . . . . . . . . . . . . . . . 314
18.6.4 AC_LIBOBJ vs. LIBOBJS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 316
18.6.5 AC_ACT_IFELSE vs. AC_TRY_ACT . . . . . . . . . . . . . . . . . . . . . . . . 316
19 Generating Test Suites with Autotest . . . . . 319
19.1 Using an Autotest Test Suite . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 319
19.1.1 testsuite Scripts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 319
19.1.2 Autotest Logs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 321
19.2 Writing `testsuite.at' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 322
19.3 Running testsuite Scripts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 327
19.4 Making testsuite Scripts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 329

vii
20 Frequent Autoconf Questions, with answers
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 333
20.1 Distributing configure Scripts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 333
20.2 Why Require GNU M4? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 333
20.3 How Can I Bootstrap? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 333
20.4 Why Not Imake? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 334
20.5 How Do I #define Installation Directories? . . . . . . . . . . . . . . . . . 335
20.6 What is `autom4te.cache'? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 336
20.7 Header Present But Cannot Be Compiled . . . . . . . . . . . . . . . . . . . 336
20.8 Expanded Before Required . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 338
20.9 Debugging configure scripts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 340
21 History of Autoconf . . . . . . . . . . . . . . . . . . . . . . . . 343
21.1 Genesis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 343
21.2 Exodus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 343
21.3 Leviticus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 344
21.4 Numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 344
21.5 Deuteronomy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 345
Appendix A GNU Free Documentation License
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 347
Appendix B Indices . . . . . . . . . . . . . . . . . . . . . . . . . . . 355
B.1 Environment Variable Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 355
B.2 Output Variable Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 356
B.3 Preprocessor Symbol Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 358
B.4 Cache Variable Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 361
B.5 Autoconf Macro Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 363
B.6 M4 Macro Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 367
B.7 Autotest Macro Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 369
B.8 Program and Function Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 370
B.9 Concept Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 372


Chapter 1: Introduction 1
1 Introduction
A physicist, an engineer, and a computer scientist were discussing the
nature of God. ``Surely a Physicist,'' said the physicist, ``because
early in the Creation, God made Light; and you know, Maxwell's
equations, the dual nature of electromagnetic waves, the relativistic
consequences. . . '' ``An Engineer!,'' said the engineer, ``because
before making Light, God split the Chaos into Land and Water; it takes a
hell of an engineer to handle that big amount of mud, and orderly
separation of solids from liquids. . . '' The computer scientist
shouted: ``And the Chaos, where do you think it was coming from, hmm?''
---Anonymous
Autoconf is a tool for producing shell scripts that automatically configure software source
code packages to adapt to many kinds of Posix­like systems. The configuration scripts
produced by Autoconf are independent of Autoconf when they are run, so their users do
not need to have Autoconf.
The configuration scripts produced by Autoconf require no manual user intervention
when run; they do not normally even need an argument specifying the system type. Instead,
they individually test for the presence of each feature that the software package they are
for might need. (Before each check, they print a one­line message stating what they are
checking for, so the user doesn't get too bored while waiting for the script to finish.) As a
result, they deal well with systems that are hybrids or customized from the more common
Posix variants. There is no need to maintain files that list the features supported by each
release of each variant of Posix.
For each software package that Autoconf is used with, it creates a configuration script
from a template file that lists the system features that the package needs or can use. After
the shell code to recognize and respond to a system feature has been written, Autoconf
allows it to be shared by many software packages that can use (or need) that feature. If it
later turns out that the shell code needs adjustment for some reason, it needs to be changed
in only one place; all of the configuration scripts can be regenerated automatically to take
advantage of the updated code.
Those who do not understand Autoconf are condemned to reinvent it, poorly. The
primary goal of Autoconf is making the user's life easier; making the maintainer's life
easier is only a secondary goal. Put another way, the primary goal is not to make the
generation of `configure' automatic for package maintainers (although patches along that
front are welcome, since package maintainers form the user base of Autoconf); rather, the
goal is to make `configure' painless, portable, and predictable for the end user of each
autoconfiscated package. And to this degree, Autoconf is highly successful at its goal ---
most complaints to the Autoconf list are about di#culties in writing Autoconf input, and
not in the behavior of the resulting `configure'. Even packages that don't use Autoconf
will generally provide a `configure' script, and the most common complaint about these
alternative home­grown scripts is that they fail to meet one or more of the GNU Coding
Standars (see Section ``Configuration'' in The GNU Coding Standards) that users have
come to expect from Autoconf­generated `configure' scripts.

2 Autoconf
The Metaconfig package is similar in purpose to Autoconf, but the scripts it produces
require manual user intervention, which is quite inconvenient when configuring large source
trees. Unlike Metaconfig scripts, Autoconf scripts can support cross­compiling, if some care
is taken in writing them.
Autoconf does not solve all problems related to making portable software packages---for
a more complete solution, it should be used in concert with other GNU build tools like
Automake and Libtool. These other tools take on jobs like the creation of a portable,
recursive makefile with all of the standard targets, linking of shared libraries, and so on.
See Chapter 2 [The GNU Build System], page 3, for more information.
Autoconf imposes some restrictions on the names of macros used with #if in C programs
(see Section B.3 [Preprocessor Symbol Index], page 358).
Autoconf requires GNU M4 version 1.4.6 or later in order to generate the scripts. It uses
features that some versions of M4, including GNU M4 1.3, do not have. Autoconf works
better with GNU M4 version 1.4.14 or later, though this is not required.
See Section 18.5 [Autoconf 1], page 310, for information about upgrading from version 1.
See Chapter 21 [History], page 343, for the story of Autoconf's development. See Chapter 20
[FAQ], page 333, for answers to some common questions about Autoconf.
See the Autoconf web page (http://www.gnu.org/software/autoconf/) for up­to­date
information, details on the mailing lists, pointers to a list of known bugs, etc.
Mail suggestions to the Autoconf mailing list (autoconf@gnu.org). Past suggestions are
archived (http://lists.gnu.org/archive/html/autoconf/).
Mail bug reports to the Autoconf Bugs mailing list (bug­autoconf@gnu.org). Past bug
reports are archived (http://lists.gnu.org/archive/html/bug­autoconf/).
If possible, first check that your bug is not already solved in current development versions,
and that it has not been reported yet. Be sure to include all the needed information and a
short `configure.ac' that demonstrates the problem.
Autoconf's development tree is accessible via git; see the Autoconf Summary (http://
savannah.gnu.org/projects/autoconf/) for details, or view the actual repository
(http://git.sv.gnu.org/gitweb/?p=autoconf.git). Anonymous CVS access is also
available, see `README' for more details. Patches relative to the current git version can be
sent for review to the Autoconf Patches mailing list (autoconf­patches@gnu.org), with
discussion on prior patches archived (http://lists.gnu.org/archive/html/autoconf­
patches/); and all commits are posted in the read­only Autoconf Commit mailing list
(autoconf­commit@gnu.org), which is also archived (http://lists.gnu.org/archive/
html/autoconf­commit/).
Because of its mission, the Autoconf package itself includes only a set of often­used
macros that have already demonstrated their usefulness. Nevertheless, if you wish to share
your macros, or find existing ones, see the Autoconf Macro Archive (http://www.gnu.org/
software/autoconf­archive/), which is kindly run by Peter Simons (simons@cryp.to).

Chapter 2: The GNU Build System 3
2 The GNU Build System
Autoconf solves an important problem---reliable discovery of system­specific build and run­
time information---but this is only one piece of the puzzle for the development of portable
software. To this end, the GNU project has developed a suite of integrated utilities to finish
the job Autoconf started: the GNU build system, whose most important components are
Autoconf, Automake, and Libtool. In this chapter, we introduce you to those tools, point
you to sources of more information, and try to convince you to use the entire GNU build
system for your software.
2.1 Automake
The ubiquity of make means that a makefile is almost the only viable way to distribute
automatic build rules for software, but one quickly runs into its numerous limitations.
Its lack of support for automatic dependency tracking, recursive builds in subdirectories,
reliable timestamps (e.g., for network file systems), and so on, mean that developers must
painfully (and often incorrectly) reinvent the wheel for each project. Portability is non­
trivial, thanks to the quirks of make on many systems. On top of all this is the manual
labor required to implement the many standard targets that users have come to expect
(make install, make distclean, make uninstall, etc.). Since you are, of course, using
Autoconf, you also have to insert repetitive code in your `Makefile.in' to recognize @CC@,
@CFLAGS@, and other substitutions provided by configure. Into this mess steps Automake.
Automake allows you to specify your build needs in a `Makefile.am' file with a vastly
simpler and more powerful syntax than that of a plain makefile, and then generates a
portable `Makefile.in' for use with Autoconf. For example, the `Makefile.am' to build
and install a simple ``Hello world'' program might look like:
bin_PROGRAMS = hello
hello_SOURCES = hello.c
The resulting `Makefile.in' (~400 lines) automatically supports all the standard
targets, the substitutions provided by Autoconf, automatic dependency tracking, VPATH
building, and so on. make builds the hello program, and make install installs it in
`/usr/local/bin' (or whatever prefix was given to configure, if not `/usr/local').
The benefits of Automake increase for larger packages (especially ones with subdirecto­
ries), but even for small programs the added convenience and portability can be substantial.
And that's not all. . .
2.2 Gnulib
GNU software has a well­deserved reputation for running on many di#erent types of systems.
While our primary goal is to write software for the GNU system, many users and developers
have been introduced to us through the systems that they were already using.
Gnulib is a central location for common GNU code, intended to be shared among free
software packages. Its components are typically shared at the source level, rather than
being a library that gets built, installed, and linked against. The idea is to copy files from
Gnulib into your own source tree. There is no distribution tarball; developers should just

4 Autoconf
grab source modules from the repository. The source files are available online, under various
licenses, mostly GNU GPL or GNU LGPL.
Gnulib modules typically contain C source code along with Autoconf macros used to con­
figure the source code. For example, the Gnulib stdbool module implements a `stdbool.h'
header that nearly conforms to C99, even on old­fashioned hosts that lack `stdbool.h'. This
module contains a source file for the replacement header, along with an Autoconf macro
that arranges to use the replacement header on old­fashioned systems.
2.3 Libtool
Often, one wants to build not only programs, but libraries, so that other programs can ben­
efit from the fruits of your labor. Ideally, one would like to produce shared (dynamically
linked) libraries, which can be used by multiple programs without duplication on disk or
in memory and can be updated independently of the linked programs. Producing shared
libraries portably, however, is the stu# of nightmares---each system has its own incompat­
ible tools, compiler flags, and magic incantations. Fortunately, GNU provides a solution:
Libtool.
Libtool handles all the requirements of building shared libraries for you, and at this time
seems to be the only way to do so with any portability. It also handles many other headaches,
such as: the interaction of Make rules with the variable su#xes of shared libraries, linking
reliably with shared libraries before they are installed by the superuser, and supplying
a consistent versioning system (so that di#erent versions of a library can be installed or
upgraded without breaking binary compatibility). Although Libtool, like Autoconf, can be
used without Automake, it is most simply utilized in conjunction with Automake---there,
Libtool is used automatically whenever shared libraries are needed, and you need not know
its syntax.
2.4 Pointers
Developers who are used to the simplicity of make for small projects on a single system might
be daunted at the prospect of learning to use Automake and Autoconf. As your software
is distributed to more and more users, however, you otherwise quickly find yourself putting
lots of e#ort into reinventing the services that the GNU build tools provide, and making the
same mistakes that they once made and overcame. (Besides, since you're already learning
Autoconf, Automake is a piece of cake.)
There are a number of places that you can go to for more information on the GNU build
tools.
- Web
The project home pages for Autoconf (http://www.gnu.org/software/autoconf/),
Automake (http://www.gnu.org/software/automake/), Gnulib (http://www.gnu
.org/software/gnulib/), and Libtool (http://www.gnu.org/software/libtool/).
- Automake Manual
See Section ``Automake'' in GNU Automake, for more information on Automake.
- Books

Chapter 2: The GNU Build System 5
The book GNU Autoconf, Automake and Libtool 1 describes the complete GNU build
environment. You can also find the entire book on­line (http://sources.redhat.com/
autobook/).
1 GNU Autoconf, Automake and Libtool, by G. V. Vaughan, B. Elliston, T. Tromey, and I. L. Taylor.
SAMS (originally New Riders), 2000, ISBN 1578701902.


Chapter 3: Making configure Scripts 7
3 Making configure Scripts
The configuration scripts that Autoconf produces are by convention called configure.
When run, configure creates several files, replacing configuration parameters in them
with appropriate values. The files that configure creates are:
- one or more `Makefile' files, usually one in each subdirectory of the package (see
Section 4.8 [Makefile Substitutions], page 25);
- optionally, a C header file, the name of which is configurable, containing #define
directives (see Section 4.9 [Configuration Headers], page 35);
- a shell script called `config.status' that, when run, recreates the files listed above
(see Chapter 17 [config.status Invocation], page 291);
- an optional shell script normally called `config.cache' (created when using `configure
­­config­cache') that saves the results of running many of the tests (see Section 7.4.2
[Cache Files], page 117);
- a file called `config.log' containing any messages produced by compilers, to help
debugging if configure makes a mistake.
To create a configure script with Autoconf, you need to write an Autoconf input
file `configure.ac' (or `configure.in') and run autoconf on it. If you write your own
feature tests to supplement those that come with Autoconf, you might also write files called
`aclocal.m4' and `acsite.m4'. If you use a C header file to contain #define directives,
you might also run autoheader, and you can distribute the generated file `config.h.in'
with the package.
Here is a diagram showing how the files that can be used in configuration are produced.
Programs that are executed are su#xed by `*'. Optional files are enclosed in square brackets
(`[]'). autoconf and autoheader also read the installed Autoconf macro files (by reading
`autoconf.m4').
Files used in preparing a software package for distribution, when using just Autoconf:
your source files ­­> [autoscan*] ­­> [configure.scan] ­­> configure.ac
configure.ac ­­.
| .­­­­­­> autoconf* ­­­­­> configure
[aclocal.m4] ­­+­­­+
| `­­­­­> [autoheader*] ­­> [config.h.in]
[acsite.m4] ­­­'
Makefile.in
Additionally, if you use Automake, the following additional productions come into play:
[acinclude.m4] ­­.
|
[local macros] ­­+­­> aclocal* ­­> aclocal.m4
|
configure.ac ­­­­'

8 Autoconf
configure.ac ­­.
+­­> automake* ­­> Makefile.in
Makefile.am ­­­'
Files used in configuring a software package:
.­­­­­­­­­­­­­> [config.cache]
configure* ­­­­­­­­­­­­+­­­­­­­­­­­­­> config.log
|
[config.h.in] ­. v .­> [config.h] ­.
+­­> config.status* ­+ +­­> make*
Makefile.in ­­­' `­> Makefile ­­­'
3.1 Writing `configure.ac'
To produce a configure script for a software package, create a file called `configure.ac'
that contains invocations of the Autoconf macros that test the system features your package
needs or can use. Autoconf macros already exist to check for many features; see Chapter 5
[Existing Tests], page 43, for their descriptions. For most other features, you can use
Autoconf template macros to produce custom checks; see Chapter 6 [Writing Tests], page 99,
for information about them. For especially tricky or specialized features, `configure.ac'
might need to contain some hand­crafted shell commands; see Chapter 11 [Portable Shell
Programming], page 187. The autoscan program can give you a good start in writing
`configure.ac' (see Section 3.2 [autoscan Invocation], page 12, for more information).
Previous versions of Autoconf promoted the name `configure.in', which is somewhat
ambiguous (the tool needed to process this file is not described by its extension), and
introduces a slight confusion with `config.h.in' and so on (for which `.in' means ``to be
processed by configure''). Using `configure.ac' is now preferred.
3.1.1 A Shell Script Compiler
Just as for any other computer language, in order to properly program `configure.ac' in
Autoconf you must understand what problem the language tries to address and how it does
so.
The problem Autoconf addresses is that the world is a mess. After all, you are using
Autoconf in order to have your package compile easily on all sorts of di#erent systems,
some of them being extremely hostile. Autoconf itself bears the price for these di#erences:
configure must run on all those systems, and thus configure must limit itself to their
lowest common denominator of features.
Naturally, you might then think of shell scripts; who needs autoconf? A set of properly
written shell functions is enough to make it easy to write configure scripts by hand. Sigh!
Unfortunately, even in 2008, where shells without any function support are far and few
between, there are pitfalls to avoid when making use of them. Also, finding a Bourne
shell that accepts shell functions is not trivial, even though there is almost always one on
interesting porting targets.
So, what is really needed is some kind of compiler, autoconf, that takes an Autoconf
program, `configure.ac', and transforms it into a portable shell script, configure.
How does autoconf perform this task?

Chapter 3: Making configure Scripts 9
There are two obvious possibilities: creating a brand new language or extending an
existing one. The former option is attractive: all sorts of optimizations could easily be
implemented in the compiler and many rigorous checks could be performed on the Autoconf
program (e.g., rejecting any non­portable construct). Alternatively, you can extend an
existing language, such as the sh (Bourne shell) language.
Autoconf does the latter: it is a layer on top of sh. It was therefore most convenient
to implement autoconf as a macro expander: a program that repeatedly performs macro
expansions on text input, replacing macro calls with macro bodies and producing a pure
sh script in the end. Instead of implementing a dedicated Autoconf macro expander, it is
natural to use an existing general­purpose macro language, such as M4, and implement the
extensions as a set of M4 macros.
3.1.2 The Autoconf Language
The Autoconf language di#ers from many other computer languages because it treats actual
code the same as plain text. Whereas in C, for instance, data and instructions have di#erent
syntactic status, in Autoconf their status is rigorously the same. Therefore, we need a means
to distinguish literal strings from text to be expanded: quotation.
When calling macros that take arguments, there must not be any white space between
the macro name and the open parenthesis.
AC_INIT ([oops], [1.0]) # incorrect
AC_INIT([hello], [1.0]) # good
Arguments should be enclosed within the quote characters `[' and `]', and be separated
by commas. Any leading blanks or newlines in arguments are ignored, unless they are
quoted. You should always quote an argument that might contain a macro name, comma,
parenthesis, or a leading blank or newline. This rule applies recursively for every macro
call, including macros called from other macros. For more details on quoting rules, see
Chapter 8 [Programming in M4], page 121.
For instance:
AC_CHECK_HEADER([stdio.h],
[AC_DEFINE([HAVE_STDIO_H], [1],
[Define to 1 if you have <stdio.h>.])],
[AC_MSG_ERROR([sorry, can't do anything for you])])
is quoted properly. You may safely simplify its quotation to:
AC_CHECK_HEADER([stdio.h],
[AC_DEFINE([HAVE_STDIO_H], 1,
[Define to 1 if you have <stdio.h>.])],
[AC_MSG_ERROR([sorry, can't do anything for you])])
because `1' cannot contain a macro call. Here, the argument of AC_MSG_ERROR must be
quoted; otherwise, its comma would be interpreted as an argument separator. Also, the
second and third arguments of `AC_CHECK_HEADER' must be quoted, since they contain
macro calls. The three arguments `HAVE_STDIO_H', `stdio.h', and `Define to 1 if you
have <stdio.h>.' do not need quoting, but if you unwisely defined a macro with a name
like `Define' or `stdio' then they would need quoting. Cautious Autoconf users would keep
the quotes, but many Autoconf users find such precautions annoying, and would rewrite
the example as follows:

10 Autoconf
AC_CHECK_HEADER(stdio.h,
[AC_DEFINE(HAVE_STDIO_H, 1,
[Define to 1 if you have <stdio.h>.])],
[AC_MSG_ERROR([sorry, can't do anything for you])])
This is safe, so long as you adopt good naming conventions and do not define macros with
names like `HAVE_STDIO_H', `stdio', or `h'. Though it is also safe here to omit the quotes
around `Define to 1 if you have <stdio.h>.' this is not recommended, as message strings
are more likely to inadvertently contain commas.
The following example is wrong and dangerous, as it is underquoted:
AC_CHECK_HEADER(stdio.h,
AC_DEFINE(HAVE_STDIO_H, 1,
Define to 1 if you have <stdio.h>.),
AC_MSG_ERROR([sorry, can't do anything for you]))
In other cases, you may have to use text that also resembles a macro call. You must
quote that text even when it is not passed as a macro argument. For example, these two
approaches in `configure.ac' (quoting just the potential problems, or quoting the entire
line) will protect your script in case autoconf ever adds a macro AC_DC:
echo "Hard rock was here! ­­[AC_DC]"
[echo "Hard rock was here! ­­AC_DC"]
which results in this text in `configure':
echo "Hard rock was here! ­­AC_DC"
echo "Hard rock was here! ­­AC_DC"
When you use the same text in a macro argument, you must therefore have an extra
quotation level (since one is stripped away by the macro substitution). In general, then, it
is a good idea to use double quoting for all literal string arguments, either around just the
problematic portions, or over the entire argument:
AC_MSG_WARN([[AC_DC] stinks ­­Iron Maiden])
AC_MSG_WARN([[AC_DC stinks ­­Iron Maiden]])
However, the above example triggers a warning about a possibly unexpanded macro
when running autoconf, because it collides with the namespace of macros reserved for the
Autoconf language. To be really safe, you can use additional escaping (either a quadrigraph,
or creative shell constructs) to silence that particular warning:
echo "Hard rock was here! ­­AC""_DC"
AC_MSG_WARN([[AC@&t@_DC stinks ­­Iron Maiden]])
You are now able to understand one of the constructs of Autoconf that has been contin­
ually misunderstood. . . The rule of thumb is that whenever you expect macro expansion,
expect quote expansion; i.e., expect one level of quotes to be lost. For instance:
AC_COMPILE_IFELSE([char b[10];], [], [AC_MSG_ERROR([you lose])])
is incorrect: here, the first argument of AC_COMPILE_IFELSE is `char b[10];' and is ex­
panded once, which results in `char b10;'. (There was an idiom common in Autoconf's
past to address this issue via the M4 changequote primitive, but do not use it!) Let's
take a closer look: the author meant the first argument to be understood as a literal, and
therefore it must be quoted twice:

Chapter 3: Making configure Scripts 11
AC_COMPILE_IFELSE([[char b[10];]], [], [AC_MSG_ERROR([you lose])])
Voila, you actually produce `char b[10];' this time!
On the other hand, descriptions (e.g., the last parameter of AC_DEFINE or AS_HELP_
STRING) are not literals---they are subject to line breaking, for example---and should not
be double quoted. Even if these descriptions are short and are not actually broken, double
quoting them yields weird results.
Some macros take optional arguments, which this documentation represents as [arg ] (not
to be confused with the quote characters). You may just leave them empty, or use `[]' to
make the emptiness of the argument explicit, or you may simply omit the trailing commas.
The three lines below are equivalent:
AC_CHECK_HEADERS([stdio.h], [], [], [])
AC_CHECK_HEADERS([stdio.h],,,)
AC_CHECK_HEADERS([stdio.h])
It is best to put each macro call on its own line in `configure.ac'. Most of the macros
don't add extra newlines; they rely on the newline after the macro call to terminate the
commands. This approach makes the generated configure script a little easier to read by
not inserting lots of blank lines. It is generally safe to set shell variables on the same line
as a macro call, because the shell allows assignments without intervening newlines.
You can include comments in `configure.ac' files by starting them with the `#'. For
example, it is helpful to begin `configure.ac' files with a line like this:
# Process this file with autoconf to produce a configure script.
3.1.3 Standard `configure.ac' Layout
The order in which `configure.ac' calls the Autoconf macros is not important, with a few
exceptions. Every `configure.ac' must contain a call to AC_INIT before the checks, and a
call to AC_OUTPUT at the end (see Section 4.5 [Output], page 22). Additionally, some macros
rely on other macros having been called first, because they check previously set values of
some variables to decide what to do. These macros are noted in the individual descriptions
(see Chapter 5 [Existing Tests], page 43), and they also warn you when configure is created
if they are called out of order.
To encourage consistency, here is a suggested order for calling the Autoconf macros.
Generally speaking, the things near the end of this list are those that could depend on
things earlier in it. For example, library functions could be a#ected by types and libraries.

12 Autoconf
Autoconf requirements
AC_INIT(package, version, bug­report­address)
information on the package
checks for programs
checks for libraries
checks for header files
checks for types
checks for structures
checks for compiler characteristics
checks for library functions
checks for system services
AC_CONFIG_FILES([file...])
AC_OUTPUT
3.2 Using autoscan to Create `configure.ac'
The autoscan program can help you create and/or maintain a `configure.ac' file for a
software package. autoscan examines source files in the directory tree rooted at a directory
given as a command line argument, or the current directory if none is given. It searches the
source files for common portability problems and creates a file `configure.scan' which is a
preliminary `configure.ac' for that package, and checks a possibly existing `configure.ac'
for completeness.
When using autoscan to create a `configure.ac', you should manually examine
`configure.scan' before renaming it to `configure.ac'; it probably needs some
adjustments. Occasionally, autoscan outputs a macro in the wrong order relative to
another macro, so that autoconf produces a warning; you need to move such macros
manually. Also, if you want the package to use a configuration header file, you must add a
call to AC_CONFIG_HEADERS (see Section 4.9 [Configuration Headers], page 35). You might
also have to change or add some #if directives to your program in order to make it work
with Autoconf (see Section 3.3 [ifnames Invocation], page 13, for information about a
program that can help with that job).
When using autoscan to maintain a `configure.ac', simply consider adding its sugges­
tions. The file `autoscan.log' contains detailed information on why a macro is requested.
autoscan uses several data files (installed along with Autoconf) to determine which
macros to output when it finds particular symbols in a package's source files. These data
files all have the same format: each line consists of a symbol, one or more blanks, and
the Autoconf macro to output if that symbol is encountered. Lines starting with `#' are
comments.
autoscan accepts the following options:
`­­help'
`­h' Print a summary of the command line options and exit.
`­­version'
`­V' Print the version number of Autoconf and exit.
`­­verbose'
`­v' Print the names of the files it examines and the potentially interesting symbols
it finds in them. This output can be voluminous.

Chapter 3: Making configure Scripts 13
`­­debug'
`­d' Don't remove temporary files.
`­­include=dir'
`­I dir' Append dir to the include path. Multiple invocations accumulate.
`­­prepend­include=dir'
`­B dir' Prepend dir to the include path. Multiple invocations accumulate.
3.3 Using ifnames to List Conditionals
ifnames can help you write `configure.ac' for a software package. It prints the identifiers
that the package already uses in C preprocessor conditionals. If a package has already been
set up to have some portability, ifnames can thus help you figure out what its configure
needs to check for. It may help fill in some gaps in a `configure.ac' generated by autoscan
(see Section 3.2 [autoscan Invocation], page 12).
ifnames scans all of the C source files named on the command line (or the standard
input, if none are given) and writes to the standard output a sorted list of all the identifiers
that appear in those files in #if, #elif, #ifdef, or #ifndef directives. It prints each
identifier on a line, followed by a space­separated list of the files in which that identifier
occurs.
ifnames accepts the following options:
`­­help'
`­h' Print a summary of the command line options and exit.
`­­version'
`­V' Print the version number of Autoconf and exit.
3.4 Using autoconf to Create configure
To create configure from `configure.ac', run the autoconf program with no arguments.
autoconf processes `configure.ac' with the M4 macro processor, using the Autoconf
macros. If you give autoconf an argument, it reads that file instead of `configure.ac'
and writes the configuration script to the standard output instead of to configure. If you
give autoconf the argument `­', it reads from the standard input instead of `configure.ac'
and writes the configuration script to the standard output.
The Autoconf macros are defined in several files. Some of the files are distributed with
Autoconf; autoconf reads them first. Then it looks for the optional file `acsite.m4' in
the directory that contains the distributed Autoconf macro files, and for the optional file
`aclocal.m4' in the current directory. Those files can contain your site's or the package's
own Autoconf macro definitions (see Chapter 10 [Writing Autoconf Macros], page 175, for
more information). If a macro is defined in more than one of the files that autoconf reads,
the last definition it reads overrides the earlier ones.
autoconf accepts the following options:
`­­help'
`­h' Print a summary of the command line options and exit.
`­­version'
`­V' Print the version number of Autoconf and exit.

14 Autoconf
`­­verbose'
`­v' Report processing steps.
`­­debug'
`­d' Don't remove the temporary files.
`­­force'
`­f' Remake `configure' even if newer than its input files.
`­­include=dir'
`­I dir' Append dir to the include path. Multiple invocations accumulate.
`­­prepend­include=dir'
`­B dir' Prepend dir to the include path. Multiple invocations accumulate.
`­­output=file'
`­o file' Save output (script or trace) to file. The file `­' stands for the standard output.
`­­warnings=category'
`­W category'
Report the warnings related to category (which can actually be a comma
separated list). See Section 10.3 [Reporting Messages], page 177, macro AC_
DIAGNOSE, for a comprehensive list of categories. Special values include:
`all' report all the warnings
`none' report none
`error' treats warnings as errors
`no­category'
disable warnings falling into category
Warnings about `syntax' are enabled by default, and the environment
variable WARNINGS, a comma separated list of categories, is honored as well.
Passing `­W category' actually behaves as if you had passed `­­warnings
syntax,$WARNINGS,category'. To disable the defaults and WARNINGS, and
then enable warnings about obsolete constructs, use `­W none,obsolete'.
Because autoconf uses autom4te behind the scenes, it displays a back trace
for errors, but not for warnings; if you want them, just pass `­W error'. See
Section 8.2.1 [autom4te Invocation], page 130, for some examples.
`­­trace=macro[:format]'
`­t macro[:format]'
Do not create the configure script, but list the calls to macro according to
the format. Multiple `­­trace' arguments can be used to list several macros.
Multiple `­­trace' arguments for a single macro are not cumulative; instead,
you should just make format as long as needed.
The format is a regular string, with newlines if desired, and several special
escape codes. It defaults to `$f:$l:$n:$%'; see Section 8.2.1 [autom4te Invo­
cation], page 130, for details on the format.

Chapter 3: Making configure Scripts 15
`­­initialization'
`­i' By default, `­­trace' does not trace the initialization of the Autoconf macros
(typically the AC_DEFUN definitions). This results in a noticeable speedup, but
can be disabled by this option.
It is often necessary to check the content of a `configure.ac' file, but parsing it yourself
is extremely fragile and error­prone. It is suggested that you rely upon `­­trace' to scan
`configure.ac'. For instance, to find the list of variables that are substituted, use:
$ autoconf ­t AC_SUBST
configure.ac:2:AC_SUBST:ECHO_C
configure.ac:2:AC_SUBST:ECHO_N
configure.ac:2:AC_SUBST:ECHO_T
More traces deleted
The example below highlights the di#erence between `$@', `$*', and `$%'.
$ cat configure.ac
AC_DEFINE(This, is, [an
[example]])
$ autoconf ­t 'AC_DEFINE:@: $@
*: $*
%: $%'
@: [This],[is],[an
[example]]
*: This,is,an
[example]
%: This:is:an [example]
The format gives you a lot of freedom:
$ autoconf ­t 'AC_SUBST:$$ac_subst{"$1"} = "$f:$l";'
$ac_subst{"ECHO_C"} = "configure.ac:2";
$ac_subst{"ECHO_N"} = "configure.ac:2";
$ac_subst{"ECHO_T"} = "configure.ac:2";
More traces deleted
A long separator can be used to improve the readability of complex structures, and to ease
their parsing (for instance when no single character is suitable as a separator):
$ autoconf ­t 'AM_MISSING_PROG:${|:::::|}*'
ACLOCAL|:::::|aclocal|:::::|$missing_dir
AUTOCONF|:::::|autoconf|:::::|$missing_dir
AUTOMAKE|:::::|automake|:::::|$missing_dir
More traces deleted
3.5 Using autoreconf to Update configure Scripts
Installing the various components of the GNU Build System can be tedious: running
autopoint for Gettext, automake for `Makefile.in' etc. in each directory. It may be
needed either because some tools such as automake have been updated on your system, or
because some of the sources such as `configure.ac' have been updated, or finally, simply
in order to install the GNU Build System in a fresh tree.

16 Autoconf
autoreconf runs autoconf, autoheader, aclocal, automake, libtoolize, and
autopoint (when appropriate) repeatedly to update the GNU Build System in the
specified directories and their subdirectories (see Section 4.12 [Subdirectories], page 40).
By default, it only remakes those files that are older than their sources. The environment
variables AUTOM4TE, AUTOCONF, AUTOHEADER, AUTOMAKE, ACLOCAL, AUTOPOINT, LIBTOOLIZE,
M4, and MAKE may be used to override the invocation of the respective tools.
If you install a new version of some tool, you can make autoreconf remake all of the
files by giving it the `­­force' option.
See Section 4.8.5 [Automatic Remaking], page 34, for Make rules to automatically rebuild
configure scripts when their source files change. That method handles the timestamps
of configuration header templates properly, but does not pass `­­autoconf­dir=dir' or
`­­localdir=dir'.
Gettext supplies the autopoint command to add translation infrastructure to a source
package. If you use autopoint, your `configure.ac' should invoke both AM_GNU_GETTEXT
and AM_GNU_GETTEXT_VERSION(gettext­version). See Section ``Invoking the autopoint
Program'' in GNU gettext utilities, for further details.
autoreconf accepts the following options:
`­­help'
`­h' Print a summary of the command line options and exit.
`­­version'
`­V' Print the version number of Autoconf and exit.
`­­verbose'
`­V' Print the name of each directory autoreconf examines and the commands it
runs. If given two or more times, pass `­­verbose' to subordinate tools that
support it.
`­­debug'
`­d' Don't remove the temporary files.
`­­force'
`­f' Remake even `configure' scripts and configuration headers that are newer than
their input files (`configure.ac' and, if present, `aclocal.m4').
`­­install'
`­i' Install the missing auxiliary files in the package. By default, files are copied;
this can be changed with `­­symlink'.
If deemed appropriate, this option triggers calls to `automake ­­add­missing',
`libtoolize', `autopoint', etc.
`­­no­recursive'
Do not rebuild files in subdirectories to configure (see Section 4.12 [Subdirec­
tories], page 40, macro AC_CONFIG_SUBDIRS).
`­­symlink'
`­s' When used with `­­install', install symbolic links to the missing auxiliary
files instead of copying them.

Chapter 3: Making configure Scripts 17
`­­make'
`­m' When the directories were configured, update the configuration by running
`./config.status ­­recheck && ./config.status', and then run `make'.
`­­include=dir'
`­I dir' Append dir to the include path. Multiple invocations accumulate. Passed on
to aclocal, autoconf and autoheader internally.
`­­prepend­include=dir'
`­B dir' Prepend dir to the include path. Multiple invocations accumulate. Passed on
to autoconf and autoheader internally.
`­­warnings=category'
`­W category'
Report the warnings related to category (which can actually be a comma sep­
arated list).
`cross' related to cross compilation issues.
`obsolete'
report the uses of obsolete constructs.
`portability'
portability issues
`syntax' dubious syntactic constructs.
`all' report all the warnings
`none' report none
`error' treats warnings as errors
`no­category'
disable warnings falling into category
Warnings about `syntax' are enabled by default, and the environment
variable WARNINGS, a comma separated list of categories, is honored as well.
Passing `­W category' actually behaves as if you had passed `­­warnings
syntax,$WARNINGS,category'. To disable the defaults and WARNINGS, and
then enable warnings about obsolete constructs, use `­W none,obsolete'.
If you want autoreconf to pass flags that are not listed here on to aclocal, set ACLOCAL_
AMFLAGS in your `Makefile.am'. Due to a limitation in the Autoconf implementation these
flags currently must be set on a single line in `Makefile.am', without any backslash­newlines.


Chapter 4: Initialization and Output Files 19
4 Initialization and Output Files
Autoconf­generated configure scripts need some information about how to initialize, such
as how to find the package's source files and about the output files to produce. The following
sections describe the initialization and the creation of output files.
4.1 Initializing configure
Every configure script must call AC_INIT before doing anything else that produces output.
Calls to silent macros, such as AC_DEFUN, may also occur prior to AC_INIT, although these
are generally used via `aclocal.m4', since that is implicitly included before the start of
`configure.ac'. The only other required macro is AC_OUTPUT (see Section 4.5 [Output],
page 22).
[Macro]
AC_INIT (package, version, [bug­report], [tarname], [url])
Process any command­line arguments and perform various initializations and verifi­
cations.
Set the name of the package and its version. These are typically used in `­­version'
support, including that of configure. The optional argument bug­report should be
the email to which users should send bug reports. The package tarname di#ers from
package: the latter designates the full package name (e.g., `GNU Autoconf'), while
the former is meant for distribution tar ball names (e.g., `autoconf'). It defaults to
package with `GNU ' stripped, lower­cased, and all characters other than alphanumerics
and underscores are changed to `­'. If provided, url should be the home page for the
package.
The arguments of AC_INIT must be static, i.e., there should not be any shell compu­
tation, quotes, or newlines, but they can be computed by M4. This is because the
package information strings are expanded at M4 time into several contexts, and must
give the same text at shell time whether used in single­quoted strings, double­quoted
strings, quoted here­documents, or unquoted here­documents. It is permissible to use
m4_esyscmd or m4_esyscmd_s for computing a version string that changes with every
commit to a version control system (in fact, Autoconf does just that, for all builds of
the development tree made between releases).
The following M4 macros (e.g., AC_PACKAGE_NAME), output variables (e.g., PACKAGE_
NAME), and preprocessor symbols (e.g., PACKAGE_NAME), are defined by AC_INIT:
AC_PACKAGE_NAME, PACKAGE_NAME
Exactly package.
AC_PACKAGE_TARNAME, PACKAGE_TARNAME
Exactly tarname, possibly generated from package.
AC_PACKAGE_VERSION, PACKAGE_VERSION
Exactly version.
AC_PACKAGE_STRING, PACKAGE_STRING
Exactly `package version'.
AC_PACKAGE_BUGREPORT, PACKAGE_BUGREPORT
Exactly bug­report, if one was provided. Typically an email address, or
URL to a bug management web page.

20 Autoconf
AC_PACKAGE_URL, PACKAGE_URL
Exactly url, if one was provided. If url was empty, but package be­
gins with `GNU ', then this defaults to `http://www.gnu.org/software/
tarname/', otherwise, no URL is assumed.
If your configure script does its own option processing, it should inspect `$@' or `$*'
immediately after calling AC_INIT, because other Autoconf macros liberally use the set
command to process strings, and this has the side e#ect of updating `$@' and `$*'. However,
we suggest that you use standard macros like AC_ARG_ENABLE instead of attempting to
implement your own option processing. See Chapter 15 [Site Configuration], page 275.
4.2 Dealing with Autoconf versions
The following optional macros can be used to help choose the minimum version of Autoconf
that can successfully compile a given `configure.ac'.
[Macro]
AC_PREREQ (version)
Ensure that a recent enough version of Autoconf is being used. If the version of Au­
toconf being used to create configure is earlier than version, print an error message
to the standard error output and exit with failure (exit status is 63). For example:
AC_PREREQ([2.68])
This macro may be used before AC_INIT.
[Macro]
AC_AUTOCONF_VERSION
This macro was introduced in Autoconf 2.62. It identifies the version of Autoconf that
is currently parsing the input file, in a format suitable for m4_version_compare (see
[m4 version compare], page 157); in other words, for this release of Autoconf, its value
is `2.68'. One potential use of this macro is for writing conditional fallbacks based on
when a feature was added to Autoconf, rather than using AC_PREREQ to require the
newer version of Autoconf. However, remember that the Autoconf philosophy favors
feature checks over version checks.
You should not expand this macro directly; use `m4_defn([AC_AUTOCONF_VERSION])'
instead. This is because some users might have a beta version of Autoconf installed,
with arbitrary letters included in its version string. This means it is possible for
the version string to contain the name of a defined macro, such that expanding AC_
AUTOCONF_VERSION would trigger the expansion of that macro during rescanning, and
change the version string to be di#erent than what you intended to check.
4.3 Notices in configure
The following macros manage version numbers for configure scripts. Using them is op­
tional.
[Macro]
AC_COPYRIGHT (copyright­notice)
State that, in addition to the Free Software Foundation's copyright on the Autoconf
macros, parts of your configure are covered by the copyright­notice.
The copyright­notice shows up in both the head of configure and in `configure
­­version'.

Chapter 4: Initialization and Output Files 21
[Macro]
AC_REVISION (revision­info)
Copy revision stamp revision­info into the configure script, with any dollar
signs or double­quotes removed. This macro lets you put a revision stamp from
`configure.ac' into configure without RCS or CVS changing it when you check in
configure. That way, you can determine easily which revision of `configure.ac' a
particular configure corresponds to.
For example, this line in `configure.ac':
AC_REVISION([$Revision: 1.30 $])
produces this in configure:
#!/bin/sh
# From configure.ac Revision: 1.30
4.4 Finding configure Input
[Macro]
AC_CONFIG_SRCDIR (unique­file­in­source­dir)
unique­file­in­source­dir is some file that is in the package's source directory;
configure checks for this file's existence to make sure that the directory that it is
told contains the source code in fact does. Occasionally people accidentally specify
the wrong directory with `­­srcdir'; this is a safety check. See Section 16.10
[configure Invocation], page 289, for more information.
Packages that do manual configuration or use the install program might need to tell
configure where to find some other shell scripts by calling AC_CONFIG_AUX_DIR, though
the default places it looks are correct for most cases.
[Macro]
AC_CONFIG_AUX_DIR (dir)
Use the auxiliary build tools (e.g., `install­sh', `config.sub', `config.guess',
Cygnus configure, Automake and Libtool scripts, etc.) that are in directory dir.
These are auxiliary files used in configuration. dir can be either absolute or relative
to `srcdir'. The default is `srcdir' or `srcdir/..' or `srcdir/../..', whichever is
the first that contains `install­sh'. The other files are not checked for, so that us­
ing AC_PROG_INSTALL does not automatically require distributing the other auxiliary
files. It checks for `install.sh' also, but that name is obsolete because some make
have a rule that creates `install' from it if there is no makefile.
The auxiliary directory is commonly named `build­aux'. If you need portability
to DOS variants, do not name the auxiliary directory `aux'. See Section 11.4 [File
System Conventions], page 193.
[Macro]
AC_REQUIRE_AUX_FILE (file)
Declares that file is expected in the directory defined above. In Autoconf proper, this
macro does nothing: its sole purpose is to be traced by third­party tools to produce
a list of expected auxiliary files. For instance it is called by macros like AC_PROG_
INSTALL (see Section 5.2.1 [Particular Programs], page 45) or AC_CANONICAL_BUILD
(see Section 14.2 [Canonicalizing], page 272) to register the auxiliary files they need.
Similarly, packages that use aclocal should declare where local macros can be found
using AC_CONFIG_MACRO_DIR.

22 Autoconf
[Macro]
AC_CONFIG_MACRO_DIR (dir)
Specify dir as the location of additional local Autoconf macros. This macro is intended
for use by future versions of commands like autoreconf that trace macro calls. It
should be called directly from `configure.ac' so that tools that install macros for
aclocal can find the macros' declarations.
Note that if you use aclocal from Automake to generate `aclocal.m4', you must also
set ACLOCAL_AMFLAGS = ­I dir in your top­level `Makefile.am'. Due to a limitation
in the Autoconf implementation of autoreconf, these include directives currently
must be set on a single line in `Makefile.am', without any backslash­newlines.
4.5 Outputting Files
Every Autoconf script, e.g., `configure.ac', should finish by calling AC_OUTPUT. That is
the macro that generates and runs `config.status', which in turn creates the makefiles
and any other files resulting from configuration. This is the only required macro besides
AC_INIT (see Section 4.4 [Input], page 21).
[Macro]
AC_OUTPUT
Generate `config.status' and launch it. Call this macro once, at the end of
`configure.ac'.
`config.status' performs all the configuration actions: all the output files (see Sec­
tion 4.7 [Configuration Files], page 25, macro AC_CONFIG_FILES), header files (see
Section 4.9 [Configuration Headers], page 35, macro AC_CONFIG_HEADERS), commands
(see Section 4.10 [Configuration Commands], page 39, macro AC_CONFIG_COMMANDS),
links (see Section 4.11 [Configuration Links], page 40, macro AC_CONFIG_LINKS), sub­
directories to configure (see Section 4.12 [Subdirectories], page 40, macro AC_CONFIG_
SUBDIRS) are honored.
The location of your AC_OUTPUT invocation is the exact point where configuration
actions are taken: any code afterwards is executed by configure once config.status
was run. If you want to bind actions to config.status itself (independently of
whether configure is being run), see Section 4.10 [Running Arbitrary Configuration
Commands], page 39.
Historically, the usage of AC_OUTPUT was somewhat di#erent. See Section 18.4 [Obsolete
Macros], page 297, for a description of the arguments that AC_OUTPUT used to support.
If you run make in subdirectories, you should run it using the make variable MAKE. Most
versions of make set MAKE to the name of the make program plus any options it was given.
(But many do not include in it the values of any variables set on the command line, so those
are not passed on automatically.) Some old versions of make do not set this variable. The
following macro allows you to use it even with those versions.
[Macro]
AC_PROG_MAKE_SET
If the Make command, $MAKE if set or else `make', predefines $(MAKE), define output
variable SET_MAKE to be empty. Otherwise, define SET_MAKE to a macro definition
that sets $(MAKE), such as `MAKE=make'. Calls AC_SUBST for SET_MAKE.
If you use this macro, place a line like this in each `Makefile.in' that runs MAKE on
other directories:
@SET_MAKE@

Chapter 4: Initialization and Output Files 23
4.6 Performing Configuration Actions
`configure' is designed so that it appears to do everything itself, but there is actually a
hidden slave: `config.status'. `configure' is in charge of examining your system, but it is
`config.status' that actually takes the proper actions based on the results of `configure'.
The most typical task of `config.status' is to instantiate files.
This section describes the common behavior of the four standard instantiating macros:
AC_CONFIG_FILES, AC_CONFIG_HEADERS, AC_CONFIG_COMMANDS and AC_CONFIG_LINKS.
They all have this prototype:
AC_CONFIG_ITEMS(tag..., [commands], [init­cmds])
where the arguments are:
tag. . . A blank­or­newline­separated list of tags, which are typically the names of the
files to instantiate.
You are encouraged to use literals as tags. In particular, you should avoid
... && my_foos="$my_foos fooo"
... && my_foos="$my_foos foooo"
AC_CONFIG_ITEMS([$my_foos])
and use this instead:
... && AC_CONFIG_ITEMS([fooo])
... && AC_CONFIG_ITEMS([foooo])
The macros AC_CONFIG_FILES and AC_CONFIG_HEADERS use special tag val­
ues: they may have the form `output' or `output:inputs'. The file output is
instantiated from its templates, inputs (defaulting to `output.in').
`AC_CONFIG_FILES([Makefile:boiler/top.mk:boiler/bot.mk)]', for exam­
ple, asks for the creation of the file `Makefile' that contains the expansion of the
output variables in the concatenation of `boiler/top.mk' and `boiler/bot.mk'.
The special value `­' might be used to denote the standard output when used
in output, or the standard input when used in the inputs. You most probably
don't need to use this in `configure.ac', but it is convenient when using the
command line interface of `./config.status', see Chapter 17 [config.status
Invocation], page 291, for more details.
The inputs may be absolute or relative file names. In the latter case they are
first looked for in the build tree, and then in the source tree. Input files should
be text files, and a line length below 2000 bytes should be safe.
commands
Shell commands output literally into `config.status', and associated with a
tag that the user can use to tell `config.status' which commands to run.
The commands are run each time a tag request is given to `config.status',
typically each time the file `tag' is created.
The variables set during the execution of configure are not available here: you
first need to set them via the init­cmds. Nonetheless the following variables are
precomputed:

24 Autoconf
srcdir The name of the top source directory, assuming that the working
directory is the top build directory. This is what the configure
option `­­srcdir' sets.
ac_top_srcdir
The name of the top source directory, assuming that the working
directory is the current build directory.
ac_top_build_prefix
The name of the top build directory, assuming that the working
directory is the current build directory. It can be empty, or else
ends with a slash, so that you may concatenate it.
ac_srcdir
The name of the corresponding source directory, assuming that the
working directory is the current build directory.
tmp The name of a temporary directory within the build tree, which
you can use if you need to create additional temporary files. The
directory is cleaned up when config.status is done or interrupted.
Please use package­specific file name prefixes to avoid clashing with
files that config.status may use internally.
The current directory refers to the directory (or pseudo­directory) containing
the input part of tags. For instance, running
AC_CONFIG_COMMANDS([deep/dir/out:in/in.in], [...], [...])
with `­­srcdir=../package' produces the following values:
# Argument of ­­srcdir
srcdir='../package'
# Reversing deep/dir
ac_top_build_prefix='../../'
# Concatenation of $ac_top_build_prefix and srcdir
ac_top_srcdir='../../../package'
# Concatenation of $ac_top_srcdir and deep/dir
ac_srcdir='../../../package/deep/dir'
independently of `in/in.in'.
init­cmds Shell commands output unquoted near the beginning of `config.status', and
executed each time `config.status' runs (regardless of the tag). Because they
are unquoted, for example, `$var' is output as the value of var. init­cmds is
typically used by `configure' to give `config.status' some variables it needs
to run the commands.
You should be extremely cautious in your variable names: all the init­cmds
share the same name space and may overwrite each other in unpredictable
ways. Sorry. . .
All these macros can be called multiple times, with di#erent tag values, of course!

Chapter 4: Initialization and Output Files 25
4.7 Creating Configuration Files
Be sure to read the previous section, Section 4.6 [Configuration Actions], page 23.
[Macro]
AC_CONFIG_FILES (file. . . , [cmds], [init­cmds])
Make AC_OUTPUT create each `file' by copying an input file (by default `file.in'),
substituting the output variable values. This macro is one of the instantiating macros;
see Section 4.6 [Configuration Actions], page 23. See Section 4.8 [Makefile Substitu­
tions], page 25, for more information on using output variables. See Section 7.2
[Setting Output Variables], page 112, for more information on creating them. This
macro creates the directory that the file is in if it doesn't exist. Usually, makefiles are
created this way, but other files, such as `.gdbinit', can be specified as well.
Typical calls to AC_CONFIG_FILES look like this:
AC_CONFIG_FILES([Makefile src/Makefile man/Makefile X/Imakefile])
AC_CONFIG_FILES([autoconf], [chmod +x autoconf])
You can override an input file name by appending to file a colon­separated list of
input files. Examples:
AC_CONFIG_FILES([Makefile:boiler/top.mk:boiler/bot.mk]
[lib/Makefile:boiler/lib.mk])
Doing this allows you to keep your file names acceptable to DOS variants, or to
prepend and/or append boilerplate to the file.
4.8 Substitutions in Makefiles
Each subdirectory in a distribution that contains something to be compiled or installed
should come with a file `Makefile.in', from which configure creates a file `Makefile' in
that directory. To create `Makefile', configure performs a simple variable substitution,
replacing occurrences of `@variable@' in `Makefile.in' with the value that configure has
determined for that variable. Variables that are substituted into output files in this way
are called output variables. They are ordinary shell variables that are set in configure. To
make configure substitute a particular variable into the output files, the macro AC_SUBST
must be called with that variable name as an argument. Any occurrences of `@variable@'
for other variables are left unchanged. See Section 7.2 [Setting Output Variables], page 112,
for more information on creating output variables with AC_SUBST.
A software package that uses a configure script should be distributed with a file
`Makefile.in', but no makefile; that way, the user has to properly configure the pack­
age for the local system before compiling it.
See Section ``Makefile Conventions'' in The GNU Coding Standards, for more information
on what to put in makefiles.
4.8.1 Preset Output Variables
Some output variables are preset by the Autoconf macros. Some of the Autoconf macros
set additional output variables, which are mentioned in the descriptions for those macros.
See Section B.2 [Output Variable Index], page 356, for a complete list of output variables.
See Section 4.8.2 [Installation Directory Variables], page 29, for the list of the preset ones
related to installation directories. Below are listed the other preset ones, many of which are
precious variables (see Section 7.2 [Setting Output Variables], page 112, AC_ARG_VAR).

26 Autoconf
The preset variables which are available during `config.status' (see Section 4.6 [Con­
figuration Actions], page 23) may also be used during configure tests. For example, it is
permissible to reference `$srcdir' when constructing a list of directories to pass via option
`­I' during a compiler feature check. When used in this manner, coupled with the fact that
configure is always run from the top build directory, it is su#cient to use just `$srcdir'
instead of `$top_srcdir'.
[Variable]
CFLAGS
Debugging and optimization options for the C compiler. If it is not set in the envi­
ronment when configure runs, the default value is set when you call AC_PROG_CC (or
empty if you don't). configure uses this variable when compiling or linking programs
to test for C features.
If a compiler option a#ects only the behavior of the preprocessor (e.g., `­Dname'), it
should be put into CPPFLAGS instead. If it a#ects only the linker (e.g., `­Ldirectory'),
it should be put into LDFLAGS instead. If it a#ects only the compiler proper, CFLAGS is
the natural home for it. If an option a#ects multiple phases of the compiler, though,
matters get tricky. One approach to put such options directly into CC, e.g., CC='gcc
­m64'. Another is to put them into both CPPFLAGS and LDFLAGS, but not into CFLAGS.
However, remember that some `Makefile' variables are reserved by the GNU Coding
Standards for the use of the ``user''---the person building the package. For instance,
CFLAGS is one such variable.
Sometimes package developers are tempted to set user variables such as CFLAGS be­
cause it appears to make their job easier. However, the package itself should never set
a user variable, particularly not to include switches that are required for proper com­
pilation of the package. Since these variables are documented as being for the package
builder, that person rightfully expects to be able to override any of these variables at
build time. If the package developer needs to add switches without interfering with
the user, the proper way to do that is to introduce an additional variable. Automake
makes this easy by introducing AM_CFLAGS (see Section ``Flag Variables Ordering'' in
GNU Automake), but the concept is the same even if Automake is not used.
[Variable]
configure_input
A comment saying that the file was generated automatically by configure and giving
the name of the input file. AC_OUTPUT adds a comment line containing this variable to
the top of every makefile it creates. For other files, you should reference this variable
in a comment at the top of each input file. For example, an input shell script should
begin like this:
#!/bin/sh
# @configure_input@
The presence of that line also reminds people editing the file that it needs to be
processed by configure in order to be used.
[Variable]
CPPFLAGS
Preprocessor options for the C, C++, Objective C, and Objective C++ preprocessors
and compilers. If it is not set in the environment when configure runs, the de­
fault value is empty. configure uses this variable when preprocessing or compiling
programs to test for C, C++, Objective C, and Objective C++ features.

Chapter 4: Initialization and Output Files 27
This variable's contents should contain options like `­I', `­D', and `­U' that a#ect only
the behavior of the preprocessor. Please see the explanation of CFLAGS for what you
can do if an option a#ects other phases of the compiler as well.
Currently, configure always links as part of a single invocation of the compiler that
also preprocesses and compiles, so it uses this variable also when linking programs.
However, it is unwise to depend on this behavior because the GNU Coding Standards
do not require it and many packages do not use CPPFLAGS when linking programs.
See Section 7.3 [Special Chars in Variables], page 114, for limitations that CPPFLAGS
might run into.
[Variable]
CXXFLAGS
Debugging and optimization options for the C++ compiler. It acts like CFLAGS, but
for C++ instead of C.
[Variable]
DEFS
`­D' options to pass to the C compiler. If AC_CONFIG_HEADERS is called, configure
replaces `@DEFS@' with `­DHAVE_CONFIG_H' instead (see Section 4.9 [Configuration
Headers], page 35). This variable is not defined while configure is performing its
tests, only when creating the output files. See Section 7.2 [Setting Output Variables],
page 112, for how to check the results of previous tests.
[Variable]
ECHO_C
[Variable]
ECHO_N
[Variable]
ECHO_T
How does one suppress the trailing newline from echo for question­answer message
pairs? These variables provide a way:
echo $ECHO_N "And the winner is... $ECHO_C"
sleep 100000000000
echo "${ECHO_T}dead."
Some old and uncommon echo implementations o#er no means to achieve this, in
which case ECHO_T is set to tab. You might not want to use it.
[Variable]
ERLCFLAGS
Debugging and optimization options for the Erlang compiler. If it is not set in the
environment when configure runs, the default value is empty. configure uses this
variable when compiling programs to test for Erlang features.
[Variable]
FCFLAGS
Debugging and optimization options for the Fortran compiler. If it is not set in the
environment when configure runs, the default value is set when you call AC_PROG_
FC (or empty if you don't). configure uses this variable when compiling or linking
programs to test for Fortran features.
[Variable]
FFLAGS
Debugging and optimization options for the Fortran 77 compiler. If it is not set in the
environment when configure runs, the default value is set when you call AC_PROG_
F77 (or empty if you don't). configure uses this variable when compiling or linking
programs to test for Fortran 77 features.

28 Autoconf
[Variable]
LDFLAGS
Options for the linker. If it is not set in the environment when configure runs, the
default value is empty. configure uses this variable when linking programs to test
for C, C++, Objective C, Objective C++, and Fortran features.
This variable's contents should contain options like `­s' and `­L' that a#ect only the
behavior of the linker. Please see the explanation of CFLAGS for what you can do if
an option also a#ects other phases of the compiler.
Don't use this variable to pass library names (`­l') to the linker; use LIBS instead.
[Variable]
LIBS
`­l' options to pass to the linker. The default value is empty, but some Autoconf
macros may prepend extra libraries to this variable if those libraries are found and
provide necessary functions, see Section 5.4 [Libraries], page 51. configure uses this
variable when linking programs to test for C, C++, Objective C, Objective C++, and
Fortran features.
[Variable]
OBJCFLAGS
Debugging and optimization options for the Objective C compiler. It acts like CFLAGS,
but for Objective C instead of C.
[Variable]
OBJCXXFLAGS
Debugging and optimization options for the Objective C++ compiler. It acts like
CXXFLAGS, but for Objective C++ instead of C++.
[Variable]
builddir
Rigorously equal to `.'. Added for symmetry only.
[Variable]
abs_builddir
Absolute name of builddir.
[Variable]
top_builddir
The relative name of the top level of the current build tree. In the top­level directory,
this is the same as builddir.
[Variable]
top_build_prefix
The relative name of the top level of the current build tree with final slash if nonemtpy.
This is the same as top_builddir, except that it contains zero or more runs of ../,
so it should not be appended with a slash for concatenation. This helps for make
implementations that otherwise do not treat `./file' and `file' as equal in the
toplevel build directory.
[Variable]
abs_top_builddir
Absolute name of top_builddir.
[Variable]
srcdir
The name of the directory that contains the source code for that makefile.
[Variable]
abs_srcdir
Absolute name of srcdir.

Chapter 4: Initialization and Output Files 29
[Variable]
top_srcdir
The name of the top­level source code directory for the package. In the top­level
directory, this is the same as srcdir.
[Variable]
abs_top_srcdir
Absolute name of top_srcdir.
4.8.2 Installation Directory Variables
The following variables specify the directories for package installation, see Section ``Variables
for Installation Directories'' in The GNU Coding Standards, for more information. Each
variable corresponds to an argument of configure; trailing slashes are stripped so that
expressions such as `${prefix}/lib' expand with only one slash between directory names.
See the end of this section for details on when and how to use these variables.
[Variable]
bindir
The directory for installing executables that users run.
[Variable]
datadir
The directory for installing idiosyncratic read­only architecture­independent data.
[Variable]
datarootdir
The root of the directory tree for read­only architecture­independent data files.
[Variable]
docdir
The directory for installing documentation files (other than Info and man).
[Variable]
dvidir
The directory for installing documentation files in DVI format.
[Variable]
exec_prefix
The installation prefix for architecture­dependent files. By default it's the same as
prefix. You should avoid installing anything directly to exec_prefix. However, the
default value for directories containing architecture­dependent files should be relative
to exec_prefix.
[Variable]
htmldir
The directory for installing HTML documentation.
[Variable]
includedir
The directory for installing C header files.
[Variable]
infodir
The directory for installing documentation in Info format.
[Variable]
libdir
The directory for installing object code libraries.
[Variable]
libexecdir
The directory for installing executables that other programs run.

30 Autoconf
[Variable]
localedir
The directory for installing locale­dependent but architecture­independent data, such
as message catalogs. This directory usually has a subdirectory per locale.
[Variable]
localstatedir
The directory for installing modifiable single­machine data.
[Variable]
mandir
The top­level directory for installing documentation in man format.
[Variable]
oldincludedir
The directory for installing C header files for non­GCC compilers.
[Variable]
pdfdir
The directory for installing PDF documentation.
[Variable]
prefix
The common installation prefix for all files. If exec_prefix is defined to a di#erent
value, prefix is used only for architecture­independent files.
[Variable]
psdir
The directory for installing PostScript documentation.
[Variable]
sbindir
The directory for installing executables that system administrators run.
[Variable]
sharedstatedir
The directory for installing modifiable architecture­independent data.
[Variable]
sysconfdir
The directory for installing read­only single­machine data.
Most of these variables have values that rely on prefix or exec_prefix. It is deliberate
that the directory output variables keep them unexpanded: typically `@datarootdir@' is
replaced by `${prefix}/share', not `/usr/local/share', and `@datadir@' is replaced by
`${datarootdir}'.
This behavior is mandated by the GNU Coding Standards, so that when the user runs:
`make' she can still specify a di#erent prefix from the one specified to configure, in
which case, if needed, the package should hard code dependencies corresponding
to the make­specified prefix.
`make install'
she can specify a di#erent installation location, in which case the package must
still depend on the location which was compiled in (i.e., never recompile when
`make install' is run). This is an extremely important feature, as many people
may decide to install all the files of a package grouped together, and then install
links from the final locations to there.
In order to support these features, it is essential that datarootdir remains defined as
`${prefix}/share', so that its value can be expanded based on the current value of prefix.

Chapter 4: Initialization and Output Files 31
A corollary is that you should not use these variables except in makefiles. For instance, in­
stead of trying to evaluate datadir in `configure' and hard­coding it in makefiles using e.g.,
`AC_DEFINE_UNQUOTED([DATADIR], ["$datadir"], [Data directory.])', you should add
`­DDATADIR='$(datadir)'' to your makefile's definition of CPPFLAGS (AM_CPPFLAGS if you
are also using Automake).
Similarly, you should not rely on AC_CONFIG_FILES to replace bindir and friends in
your shell scripts and other files; instead, let make manage their replacement. For instance
Autoconf ships templates of its shell scripts ending with `.in', and uses a makefile snippet
similar to the following to build scripts like autoheader and autom4te:
edit = sed \
­e 's|@bindir[@]|$(bindir)|g' \
­e 's|@pkgdatadir[@]|$(pkgdatadir)|g' \
­e 's|@prefix[@]|$(prefix)|g'
autoheader autom4te: Makefile
rm ­f $@ $@.tmp
srcdir=''; \
test ­f ./$@.in || srcdir=$(srcdir)/; \
$(edit) $${srcdir}$@.in >$@.tmp
chmod +x $@.tmp
chmod a­w $@.tmp
mv $@.tmp $@
autoheader: $(srcdir)/autoheader.in
autom4te: $(srcdir)/autom4te.in
Some details are noteworthy:
`@bindir[@]'
The brackets prevent configure from replacing `@bindir@' in the Sed expres­
sion itself. Brackets are preferable to a backslash here, since Posix says `\@' is
not portable.
`$(bindir)'
Don't use `@bindir@'! Use the matching makefile variable instead.
`$(pkgdatadir)'
The example takes advantage of the variable `$(pkgdatadir)' provided by Au­
tomake; it is equivalent to `$(datadir)/$(PACKAGE)'.
`/' Don't use `/' in the Sed expressions that replace file names since most likely the
variables you use, such as `$(bindir)', contain `/'. Use a shell metacharacter
instead, such as `|'.
special characters
File names, file name components, and the value of VPATH should not contain
shell metacharacters or white space. See Section 7.3 [Special Chars in Variables],
page 114.

32 Autoconf
dependency on `Makefile'
Since edit uses values that depend on the configuration specific values (prefix,
etc.) and not only on VERSION and so forth, the output depends on `Makefile',
not `configure.ac'.
`$@' The main rule is generic, and uses `$@' extensively to avoid the need for multiple
copies of the rule.
Separated dependencies and single su#x rules
You can't use them! The above snippet cannot be (portably) rewritten as:
autoconf autoheader: Makefile
.in:
rm ­f $@ $@.tmp
$(edit) $< >$@.tmp
chmod +x $@.tmp
mv $@.tmp $@
See Section 12.16 [Single Su#x Rules], page 258, for details.
`$(srcdir)'
Be sure to specify the name of the source directory, otherwise the package won't
support separated builds.
For the more specific installation of Erlang libraries, the following variables are defined:
[Variable]
ERLANG_INSTALL_LIB_DIR
The common parent directory of Erlang library installation directories. This variable
is set by calling the AC_ERLANG_SUBST_INSTALL_LIB_DIR macro in `configure.ac'.
[Variable]
ERLANG_INSTALL_LIB_DIR_library
The installation directory for Erlang library library. This variable is set by using the
`AC_ERLANG_SUBST_INSTALL_LIB_SUBDIR' macro in `configure.ac'.
See Section 5.13 [Erlang Libraries], page 96, for details.
4.8.3 Changed Directory Variables
In Autoconf 2.60, the set of directory variables has changed, and the defaults of some vari­
ables have been adjusted (see Section 4.8.2 [Installation Directory Variables], page 29) to
changes in the GNU Coding Standards. Notably, `datadir', `infodir', and `mandir' are
now expressed in terms of `datarootdir'. If you are upgrading from an earlier Autoconf
version, you may need to adjust your files to ensure that the directory variables are substi­
tuted correctly (see Section 20.5 [Defining Directories], page 335), and that a definition of
`datarootdir' is in place. For example, in a `Makefile.in', adding
datarootdir = @datarootdir@
is usually su#cient. If you use Automake to create `Makefile.in', it will add this for you.
To help with the transition, Autoconf warns about files that seem to use datarootdir
without defining it. In some cases, it then expands the value of $datarootdir in substitu­
tions of the directory variables. The following example shows such a warning:

Chapter 4: Initialization and Output Files 33
$ cat configure.ac
AC_INIT
AC_CONFIG_FILES([Makefile])
AC_OUTPUT
$ cat Makefile.in
prefix = @prefix@
datadir = @datadir@
$ autoconf
$ configure
configure: creating ./config.status
config.status: creating Makefile
config.status: WARNING:
Makefile.in seems to ignore the ­­datarootdir setting
$ cat Makefile
prefix = /usr/local
datadir = ${prefix}/share
Usually one can easily change the file to accommodate both older and newer Autoconf
releases:
$ cat Makefile.in
prefix = @prefix@
datarootdir = @datarootdir@
datadir = @datadir@
$ configure
configure: creating ./config.status
config.status: creating Makefile
$ cat Makefile
prefix = /usr/local
datarootdir = ${prefix}/share
datadir = ${datarootdir}
In some cases, however, the checks may not be able to detect that a suitable initialization
of datarootdir is in place, or they may fail to detect that such an initialization is necessary
in the output file. If, after auditing your package, there are still spurious `configure'
warnings about datarootdir, you may add the line
AC_DEFUN([AC_DATAROOTDIR_CHECKED])
to your `configure.ac' to disable the warnings. This is an exception to the usual rule
that you should not define a macro whose name begins with AC_ (see Section 10.2 [Macro
Names], page 176).
4.8.4 Build Directories
You can support compiling a software package for several architectures simultaneously from
the same copy of the source code. The object files for each architecture are kept in their
own directory.
To support doing this, make uses the VPATH variable to find the files that are in the
source directory. GNU Make can do this. Most other recent make programs can do this
as well, though they may have di#culties and it is often simpler to recommend GNU make

34 Autoconf
(see Section 12.15 [VPATH and Make], page 251). Older make programs do not support
VPATH; when using them, the source code must be in the same directory as the object files.
If you are using GNU Automake, the remaining details in this section are already covered
for you, based on the contents of your `Makefile.am'. But if you are using Autoconf in
isolation, then supporting VPATH requires the following in your `Makefile.in':
srcdir = @srcdir@
VPATH = @srcdir@
Do not set VPATH to the value of another variable (see Section 12.15.1 [Variables listed
in VPATH], page 252.
configure substitutes the correct value for srcdir when it produces `Makefile'.
Do not use the make variable $<, which expands to the file name of the file in the source
directory (found with VPATH), except in implicit rules. (An implicit rule is one such as
`.c.o', which tells how to create a `.o' file from a `.c' file.) Some versions of make do not
set $< in explicit rules; they expand it to an empty value.
Instead, Make command lines should always refer to source files by prefixing them with
`$(srcdir)/'. For example:
time.info: time.texinfo
$(MAKEINFO) '$(srcdir)/time.texinfo'
4.8.5 Automatic Remaking
You can put rules like the following in the top­level `Makefile.in' for a package to au­
tomatically update the configuration information when you change the configuration files.
This example includes all of the optional files, such as `aclocal.m4' and those related to
configuration header files. Omit from the `Makefile.in' rules for any of these files that
your package does not use.
The `$(srcdir)/' prefix is included because of limitations in the VPATH mechanism.
The `stamp­' files are necessary because the timestamps of `config.h.in' and
`config.h' are not changed if remaking them does not change their contents. This feature
avoids unnecessary recompilation. You should include the file `stamp­h.in' in your
package's distribution, so that make considers `config.h.in' up to date. Don't use touch
(see [Limitations of Usual Tools], page 243); instead, use echo (using date would cause
needless di#erences, hence CVS conflicts, etc.).

Chapter 4: Initialization and Output Files 35
$(srcdir)/configure: configure.ac aclocal.m4
cd '$(srcdir)' && autoconf
# autoheader might not change config.h.in, so touch a stamp file.
$(srcdir)/config.h.in: stamp­h.in
$(srcdir)/stamp­h.in: configure.ac aclocal.m4
cd '$(srcdir)' && autoheader
echo timestamp > '$(srcdir)/stamp­h.in'
config.h: stamp­h
stamp­h: config.h.in config.status
./config.status
Makefile: Makefile.in config.status
./config.status
config.status: configure
./config.status ­­recheck
(Be careful if you copy these lines directly into your makefile, as you need to convert the
indented lines to start with the tab character.)
In addition, you should use
AC_CONFIG_FILES([stamp­h], [echo timestamp > stamp­h])
so `config.status' ensures that `config.h' is considered up to date. See Section 4.5
[Output], page 22, for more information about AC_OUTPUT.
See Chapter 17 [config.status Invocation], page 291, for more examples of handling
configuration­related dependencies.
4.9 Configuration Header Files
When a package contains more than a few tests that define C preprocessor symbols, the
command lines to pass `­D' options to the compiler can get quite long. This causes two
problems. One is that the make output is hard to visually scan for errors. More seriously, the
command lines can exceed the length limits of some operating systems. As an alternative to
passing `­D' options to the compiler, configure scripts can create a C header file containing
`#define' directives. The AC_CONFIG_HEADERS macro selects this kind of output. Though
it can be called anywhere between AC_INIT and AC_OUTPUT, it is customary to call it right
after AC_INIT.
The package should `#include' the configuration header file before any other header
files, to prevent inconsistencies in declarations (for example, if it redefines const).
To provide for VPATH builds, remember to pass the C compiler a `­I.' option (or `­I..';
whichever directory contains `config.h'). Even if you use `#include "config.h"', the
preprocessor searches only the directory of the currently read file, i.e., the source directory,
not the build directory.
With the appropriate `­I' option, you can use `#include <config.h>'. Actually, it's a
good habit to use it, because in the rare case when the source directory contains another
`config.h', the build directory should be searched first.

36 Autoconf
[Macro]
AC_CONFIG_HEADERS (header . . . , [cmds], [init­cmds])
This macro is one of the instantiating macros; see Section 4.6 [Configuration Ac­
tions], page 23. Make AC_OUTPUT create the file(s) in the blank­or­newline­separated
list header containing C preprocessor #define statements, and replace `@DEFS@' in
generated files with `­DHAVE_CONFIG_H' instead of the value of DEFS. The usual name
for header is `config.h'.
If header already exists and its contents are identical to what AC_OUTPUT would put in
it, it is left alone. Doing this allows making some changes in the configuration without
needlessly causing object files that depend on the header file to be recompiled.
Usually the input file is named `header.in'; however, you can override the input file
name by appending to header a colon­separated list of input files. For example, you
might need to make the input file name acceptable to DOS variants:
AC_CONFIG_HEADERS([config.h:config.hin])
[Macro]
AH_HEADER
This macro is defined as the name of the first declared config header and undefined if
no config headers have been declared up to this point. A third­party macro may, for
example, require use of a config header without invoking AC CONFIG HEADERS
twice, like this:
AC_CONFIG_COMMANDS_PRE(
[m4_ifndef([AH_HEADER], [AC_CONFIG_HEADERS([config.h])])])
See Section 4.6 [Configuration Actions], page 23, for more details on header.
4.9.1 Configuration Header Templates
Your distribution should contain a template file that looks as you want the final header
file to look, including comments, with #undef statements which are used as hooks. For
example, suppose your `configure.ac' makes these calls:
AC_CONFIG_HEADERS([conf.h])
AC_CHECK_HEADERS([unistd.h])
Then you could have code like the following in `conf.h.in'. The `conf.h' created by
configure defines `HAVE_UNISTD_H' to 1, if and only if the system has `unistd.h'.
/* Define as 1 if you have unistd.h. */
#undef HAVE_UNISTD_H
The format of the template file is stricter than what the C preprocessor is required to
accept. A directive line should contain only whitespace, `#undef', and `HAVE_UNISTD_H'.
The use of `#define' instead of `#undef', or of comments on the same line as `#undef',
is strongly discouraged. Each hook should only be listed once. Other preprocessor lines,
such as `#ifdef' or `#include', are copied verbatim from the template into the generated
header.
Since it is a tedious task to keep a template header up to date, you may use autoheader
to generate it, see Section 4.9.2 [autoheader Invocation], page 37.
During the instantiation of the header, each `#undef' line in the template file for each
symbol defined by `AC_DEFINE' is changed to an appropriate `#define'. If the correspond­
ing `AC_DEFINE' has not been executed during the configure run, the `#undef' line is

Chapter 4: Initialization and Output Files 37
commented out. (This is important, e.g., for `_POSIX_SOURCE': on many systems, it can
be implicitly defined by the compiler, and undefining it in the header would then break
compilation of subsequent headers.)
Currently, all remaining `#undef' lines in the header template are commented out,
whether or not there was a corresponding `AC_DEFINE' for the macro name; but this behavior
is not guaranteed for future releases of Autoconf.
Generally speaking, since you should not use `#define', and you cannot guarantee
whether a `#undef' directive in the header template will be converted to a `#define' or
commented out in the generated header file, the template file cannot be used for condi­
tional definition e#ects. Consequently, if you need to use the construct
#ifdef THIS
# define THAT
#endif
you must place it outside of the template. If you absolutely need to hook it to the config
header itself, please put the directives to a separate file, and `#include' that file from the
config header template. If you are using autoheader, you would probably use `AH_BOTTOM'
to append the `#include' directive.
4.9.2 Using autoheader to Create `config.h.in'
The autoheader program can create a template file of C `#define' statements for
configure to use. It searches for the first invocation of AC_CONFIG_HEADERS in `configure'
sources to determine the name of the template. (If the first call of AC_CONFIG_HEADERS
specifies more than one input file name, autoheader uses the first one.)
It is recommended that only one input file is used. If you want to append a boilerplate
code, it is preferable to use `AH_BOTTOM([#include <conf_post.h>])'. File `conf_post.h'
is not processed during the configuration then, which make things clearer. Analogically,
AH_TOP can be used to prepend a boilerplate code.
In order to do its job, autoheader needs you to document all of the symbols that you
might use. Typically this is done via an AC_DEFINE or AC_DEFINE_UNQUOTED call whose
first argument is a literal symbol and whose third argument describes the symbol (see
Section 7.1 [Defining Symbols], page 111). Alternatively, you can use AH_TEMPLATE (see
Section 4.9.3 [Autoheader Macros], page 38), or you can supply a suitable input file for
a subsequent configuration header file. Symbols defined by Autoconf's builtin tests are
already documented properly; you need to document only those that you define yourself.
You might wonder why autoheader is needed: after all, why would configure need
to ``patch'' a `config.h.in' to produce a `config.h' instead of just creating `config.h'
from scratch? Well, when everything rocks, the answer is just that we are wasting our time
maintaining autoheader: generating `config.h' directly is all that is needed. When things
go wrong, however, you'll be thankful for the existence of autoheader.
The fact that the symbols are documented is important in order to check that `config.h'
makes sense. The fact that there is a well­defined list of symbols that should be defined
(or not) is also important for people who are porting packages to environments where
configure cannot be run: they just have to fill in the blanks.
But let's come back to the point: the invocation of autoheader. . .

38 Autoconf
If you give autoheader an argument, it uses that file instead of `configure.ac' and
writes the header file to the standard output instead of to `config.h.in'. If you give
autoheader an argument of `­', it reads the standard input instead of `configure.ac' and
writes the header file to the standard output.
autoheader accepts the following options:
`­­help'
`­h' Print a summary of the command line options and exit.
`­­version'
`­V' Print the version number of Autoconf and exit.
`­­verbose'
`­v' Report processing steps.
`­­debug'
`­d' Don't remove the temporary files.
`­­force'
`­f' Remake the template file even if newer than its input files.
`­­include=dir'
`­I dir' Append dir to the include path. Multiple invocations accumulate.
`­­prepend­include=dir'
`­B dir' Prepend dir to the include path. Multiple invocations accumulate.
`­­warnings=category'
`­W category'
Report the warnings related to category (which can actually be a comma sep­
arated list). Current categories include:
`obsolete'
report the uses of obsolete constructs
`all' report all the warnings
`none' report none
`error' treats warnings as errors
`no­category'
disable warnings falling into category
4.9.3 Autoheader Macros
autoheader scans `configure.ac' and figures out which C preprocessor symbols it might
define. It knows how to generate templates for symbols defined by AC_CHECK_HEADERS, AC_
CHECK_FUNCS etc., but if you AC_DEFINE any additional symbol, you must define a template
for it. If there are missing templates, autoheader fails with an error message.
The template for a symbol is created by autoheader from the description argument to
an AC_DEFINE; see Section 7.1 [Defining Symbols], page 111.
For special needs, you can use the following macros.

Chapter 4: Initialization and Output Files 39
[Macro]
AH_TEMPLATE (key, description)
Tell autoheader to generate a template for key. This macro generates standard
templates just like AC_DEFINE when a description is given.
For example:
AH_TEMPLATE([CRAY_STACKSEG_END],
[Define to one of _getb67, GETB67, getb67
for Cray­2 and Cray­YMP systems. This
function is required for alloca.c support
on those systems.])
generates the following template, with the description properly justified.
/* Define to one of _getb67, GETB67, getb67 for Cray­2 and
Cray­YMP systems. This function is required for alloca.c
support on those systems. */
#undef CRAY_STACKSEG_END
[Macro]
AH_VERBATIM (key, template)
Tell autoheader to include the template as­is in the header template file. This
template is associated with the key, which is used to sort all the di#erent templates
and guarantee their uniqueness. It should be a symbol that can be defined via AC_
DEFINE.
[Macro]
AH_TOP (text)
Include text at the top of the header template file.
[Macro]
AH_BOTTOM (text)
Include text at the bottom of the header template file.
Please note that text gets included ``verbatim'' to the template file, not to the resulting
config header, so it can easily get mangled when the template is processed. There is rarely
a need for something other than
AH_BOTTOM([#include <custom.h>])
4.10 Running Arbitrary Configuration Commands
You can execute arbitrary commands before, during, and after `config.status' is run.
The three following macros accumulate the commands to run when they are called mul­
tiple times. AC_CONFIG_COMMANDS replaces the obsolete macro AC_OUTPUT_COMMANDS; see
Section 18.4 [Obsolete Macros], page 297, for details.
[Macro]
AC_CONFIG_COMMANDS (tag. . . , [cmds], [init­cmds])
Specify additional shell commands to run at the end of `config.status', and shell
commands to initialize any variables from configure. Associate the commands with
tag. Since typically the cmds create a file, tag should naturally be the name of
that file. If needed, the directory hosting tag is created. This macro is one of the
instantiating macros; see Section 4.6 [Configuration Actions], page 23.
Here is an unrealistic example:

40 Autoconf
fubar=42
AC_CONFIG_COMMANDS([fubar],
[echo this is extra $fubar, and so on.],
[fubar=$fubar])
Here is a better one:
AC_CONFIG_COMMANDS([timestamp], [date >timestamp])
The following two macros look similar, but in fact they are not of the same breed: they
are executed directly by `configure', so you cannot use `config.status' to rerun them.
[Macro]
AC_CONFIG_COMMANDS_PRE (cmds)
Execute the cmds right before creating `config.status'.
This macro presents the last opportunity to call AC_SUBST, AC_DEFINE, or AC_CONFIG_
ITEMS macros.
[Macro]
AC_CONFIG_COMMANDS_POST (cmds)
Execute the cmds right after creating `config.status'.
4.11 Creating Configuration Links
You may find it convenient to create links whose destinations depend upon results of tests.
One can use AC_CONFIG_COMMANDS but the creation of relative symbolic links can be delicate
when the package is built in a directory di#erent from the source directory.
[Macro]
AC_CONFIG_LINKS (dest:source. . . , [cmds], [init­cmds])
Make AC_OUTPUT link each of the existing files source to the corresponding link name
dest. Makes a symbolic link if possible, otherwise a hard link if possible, otherwise a
copy. The dest and source names should be relative to the top level source or build
directory. This macro is one of the instantiating macros; see Section 4.6 [Configuration
Actions], page 23.
For example, this call:
AC_CONFIG_LINKS([host.h:config/$machine.h
object.h:config/$obj_format.h])
creates in the current directory `host.h' as a link to `srcdir/config/$machine.h',
and `object.h' as a link to `srcdir/config/$obj_format.h'.
The tempting value `.' for dest is invalid: it makes it impossible for `config.status'
to guess the links to establish.
One can then run:
./config.status host.h object.h
to create the links.
4.12 Configuring Other Packages in Subdirectories
In most situations, calling AC_OUTPUT is su#cient to produce makefiles in subdirectories.
However, configure scripts that control more than one independent package can use AC_
CONFIG_SUBDIRS to run configure scripts for other packages in subdirectories.

Chapter 4: Initialization and Output Files 41
[Macro]
AC_CONFIG_SUBDIRS (dir . . . )
Make AC_OUTPUT run configure in each subdirectory dir in the given blank­or­
newline­separated list. Each dir should be a literal, i.e., please do not use:
if test "x$package_foo_enabled" = xyes; then
my_subdirs="$my_subdirs foo"
fi
AC_CONFIG_SUBDIRS([$my_subdirs])
because this prevents `./configure ­­help=recursive' from displaying the options
of the package foo. Instead, you should write:
if test "x$package_foo_enabled" = xyes; then
AC_CONFIG_SUBDIRS([foo])
fi
If a given dir is not found at configure run time, a warning is reported; if the
subdirectory is optional, write:
if test ­d "$srcdir/foo"; then
AC_CONFIG_SUBDIRS([foo])
fi
If a given dir contains configure.gnu, it is run instead of configure. This is for
packages that might use a non­Autoconf script Configure, which can't be called
through a wrapper configure since it would be the same file on case­insensitive file
systems. Likewise, if a dir contains `configure.in' but no configure, the Cygnus
configure script found by AC_CONFIG_AUX_DIR is used.
The subdirectory configure scripts are given the same command line options that
were given to this configure script, with minor changes if needed, which include:
- adjusting a relative name for the cache file;
- adjusting a relative name for the source directory;
- propagating the current value of $prefix, including if it was defaulted, and if
the default values of the top level and of the subdirectory `configure' di#er.
This macro also sets the output variable subdirs to the list of directories `dir ...'.
Make rules can use this variable to determine which subdirectories to recurse into.
This macro may be called multiple times.
4.13 Default Prefix
By default, configure sets the prefix for files it installs to `/usr/local'. The user of
configure can select a di#erent prefix using the `­­prefix' and `­­exec­prefix' options.
There are two ways to change the default: when creating configure, and when running it.
Some software packages might want to install in a directory other than `/usr/local' by
default. To accomplish that, use the AC_PREFIX_DEFAULT macro.
[Macro]
AC_PREFIX_DEFAULT (prefix)
Set the default installation prefix to prefix instead of `/usr/local'.
It may be convenient for users to have configure guess the installation prefix from the
location of a related program that they have already installed. If you wish to do that, you
can call AC_PREFIX_PROGRAM.

42 Autoconf
[Macro]
AC_PREFIX_PROGRAM (program)
If the user did not specify an installation prefix (using the `­­prefix' option), guess
a value for it by looking for program in PATH, the way the shell does. If program is
found, set the prefix to the parent of the directory containing program, else default
the prefix as described above (`/usr/local' or AC_PREFIX_DEFAULT). For example,
if program is gcc and the PATH contains `/usr/local/gnu/bin/gcc', set the prefix
to `/usr/local/gnu'.

Chapter 5: Existing Tests 43
5 Existing Tests
These macros test for particular system features that packages might need or want to use. If
you need to test for a kind of feature that none of these macros check for, you can probably
do it by calling primitive test macros with appropriate arguments (see Chapter 6 [Writing
Tests], page 99).
These tests print messages telling the user which feature they're checking for, and what
they find. They cache their results for future configure runs (see Section 7.4 [Caching
Results], page 115).
Some of these macros set output variables. See Section 4.8 [Makefile Substitutions],
page 25, for how to get their values. The phrase ``define name'' is used below as a shorthand
to mean ``define the C preprocessor symbol name to the value 1''. See Section 7.1 [Defining
Symbols], page 111, for how to get those symbol definitions into your program.
5.1 Common Behavior
Much e#ort has been expended to make Autoconf easy to learn. The most obvious way to
reach this goal is simply to enforce standard interfaces and behaviors, avoiding exceptions
as much as possible. Because of history and inertia, unfortunately, there are still too many
exceptions in Autoconf; nevertheless, this section describes some of the common rules.
5.1.1 Standard Symbols
All the generic macros that AC_DEFINE a symbol as a result of their test transform their
argument values to a standard alphabet. First, argument is converted to upper case and any
asterisks (`*') are each converted to `P'. Any remaining characters that are not alphanumeric
are converted to underscores.
For instance,
AC_CHECK_TYPES([struct $Expensive*])
defines the symbol `HAVE_STRUCT__EXPENSIVEP' if the check succeeds.
5.1.2 Default Includes
Several tests depend upon a set of header files. Since these headers are not universally
available, tests actually have to provide a set of protected includes, such as:
#ifdef TIME_WITH_SYS_TIME
# include <sys/time.h>
# include <time.h>
#else
# ifdef HAVE_SYS_TIME_H
# include <sys/time.h>
# else
# include <time.h>
# endif
#endif
Unless you know exactly what you are doing, you should avoid using unconditional includes,
and check the existence of the headers you include beforehand (see Section 5.6 [Header Files],
page 65).

44 Autoconf
Most generic macros use the following macro to provide the default set of includes:
[Macro]
AC_INCLUDES_DEFAULT ([include­directives])
Expand to include­directives if defined, otherwise to:
#include <stdio.h>
#ifdef HAVE_SYS_TYPES_H
# include <sys/types.h>
#endif
#ifdef HAVE_SYS_STAT_H
# include <sys/stat.h>
#endif
#ifdef STDC_HEADERS
# include <stdlib.h>
# include <stddef.h>
#else
# ifdef HAVE_STDLIB_H
# include <stdlib.h>
# endif
#endif
#ifdef HAVE_STRING_H
# if !defined STDC_HEADERS && defined HAVE_MEMORY_H
# include <memory.h>
# endif
# include <string.h>
#endif
#ifdef HAVE_STRINGS_H
# include <strings.h>
#endif
#ifdef HAVE_INTTYPES_H
# include <inttypes.h>
#endif
#ifdef HAVE_STDINT_H
# include <stdint.h>
#endif
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif
If the default includes are used, then check for the presence of these headers and their
compatibility, i.e., you don't need to run AC_HEADER_STDC, nor check for `stdlib.h'
etc.
These headers are checked for in the same order as they are included. For instance,
on some systems `string.h' and `strings.h' both exist, but conflict. Then HAVE_
STRING_H is defined, not HAVE_STRINGS_H.

Chapter 5: Existing Tests 45
5.2 Alternative Programs
These macros check for the presence or behavior of particular programs. They are used to
choose between several alternative programs and to decide what to do once one has been
chosen. If there is no macro specifically defined to check for a program you need, and you
don't need to check for any special properties of it, then you can use one of the general
program­check macros.
5.2.1 Particular Program Checks
These macros check for particular programs---whether they exist, and in some cases whether
they support certain features.
[Macro]
AC_PROG_AWK
Check for gawk, mawk, nawk, and awk, in that order, and set output variable AWK to
the first one that is found. It tries gawk first because that is reported to be the best
implementation. The result can be overridden by setting the variable AWK or the cache
variable ac_cv_prog_AWK.
Using this macro is su#cient to avoid the pitfalls of traditional awk (see [Limitations
of Usual Tools], page 228).
[Macro]
AC_PROG_GREP
Look for the best available grep or ggrep that accepts the longest input lines possible,
and that supports multiple `­e' options. Set the output variable GREP to whatever
is chosen. See [Limitations of Usual Tools], page 235, for more information about
portability problems with the grep command family. The result can be overridden
by setting the GREP variable and is cached in the ac_cv_path_GREP variable.
[Macro]
AC_PROG_EGREP
Check whether $GREP ­E works, or else look for the best available egrep or gegrep
that accepts the longest input lines possible. Set the output variable EGREP to what­
ever is chosen. The result can be overridden by setting the EGREP variable and is
cached in the ac_cv_path_EGREP variable.
[Macro]
AC_PROG_FGREP
Check whether $GREP ­F works, or else look for the best available fgrep or gfgrep
that accepts the longest input lines possible. Set the output variable FGREP to what­
ever is chosen. The result can be overridden by setting the FGREP variable and is
cached in the ac_cv_path_FGREP variable.
[Macro]
AC_PROG_INSTALL
Set output variable INSTALL to the name of a BSD­compatible install program, if
one is found in the current PATH. Otherwise, set INSTALL to `dir/install­sh ­c',
checking the directories specified to AC_CONFIG_AUX_DIR (or its default directories)
to determine dir (see Section 4.5 [Output], page 22). Also set the variables INSTALL_
PROGRAM and INSTALL_SCRIPT to `${INSTALL}' and INSTALL_DATA to `${INSTALL}
­m 644'.
`@INSTALL@' is special, as its value may vary for di#erent configuration files.
This macro screens out various instances of install known not to work. It prefers
to find a C program rather than a shell script, for speed. Instead of `install­sh',

46 Autoconf
it can also use `install.sh', but that name is obsolete because some make programs
have a rule that creates `install' from it if there is no makefile. Further, this macro
requires install to be able to install multiple files into a target directory in a single
invocation.
Autoconf comes with a copy of `install­sh' that you can use. If you use AC_PROG_
INSTALL, you must include either `install­sh' or `install.sh' in your distribution;
otherwise configure produces an error message saying it can't find them---even if
the system you're on has a good install program. This check is a safety measure to
prevent you from accidentally leaving that file out, which would prevent your package
from installing on systems that don't have a BSD­compatible install program.
If you need to use your own installation program because it has features not found
in standard install programs, there is no reason to use AC_PROG_INSTALL; just put
the file name of your program into your `Makefile.in' files.
The result of the test can be overridden by setting the variable INSTALL or the cache
variable ac_cv_path_install.
[Macro]
AC_PROG_MKDIR_P
Set output variable MKDIR_P to a program that ensures that for each argument, a
directory named by this argument exists, creating it and its parent directories if
needed, and without race conditions when two instances of the program attempt to
make the same directory at nearly the same time.
This macro uses the `mkdir ­p' command if possible. Otherwise, it falls back on invok­
ing install­sh with the `­d' option, so your package should contain `install­sh' as
described under AC_PROG_INSTALL. An `install­sh' file that predates Autoconf 2.60
or Automake 1.10 is vulnerable to race conditions, so if you want to support parallel
installs from di#erent packages into the same directory you need to make sure you
have an up­to­date `install­sh'. In particular, be careful about using `autoreconf
­if' if your Automake predates Automake 1.10.
This macro is related to the AS_MKDIR_P macro (see Chapter 9 [Programming in
M4sh], page 165), but it sets an output variable intended for use in other files, whereas
AS_MKDIR_P is intended for use in scripts like configure. Also, AS_MKDIR_P does not
accept options, but MKDIR_P supports the `­m' option, e.g., a makefile might invoke
$(MKDIR_P) ­m 0 dir to create an inaccessible directory, and conversely a makefile
should use $(MKDIR_P) ­­ $(FOO) if FOO might yield a value that begins with `­'.
Finally, AS_MKDIR_P does not check for race condition vulnerability, whereas AC_
PROG_MKDIR_P does.
`@MKDIR_P@' is special, as its value may vary for di#erent configuration files.
The result of the test can be overridden by setting the variable MKDIR_P or the cache
variable ac_cv_path_mkdir.
[Macro]
AC_PROG_LEX
If flex is found, set output variable LEX to `flex' and LEXLIB to `­lfl', if that library
is in a standard place. Otherwise set LEX to `lex' and LEXLIB to `­ll', if found.
If neither variant is available, set LEX to `:'; for packages that ship the generated
`file.yy.c' alongside the source `file.l', this default allows users without a lexer

Chapter 5: Existing Tests 47
generator to still build the package even if the timestamp for `file.l' is inadvertantly
changed.
Define YYTEXT_POINTER if yytext defaults to `char *' instead of to `char []'. Also set
output variable LEX_OUTPUT_ROOT to the base of the file name that the lexer generates;
usually `lex.yy', but sometimes something else. These results vary according to
whether lex or flex is being used.
You are encouraged to use Flex in your sources, since it is both more pleasant to use
than plain Lex and the C source it produces is portable. In order to ensure portability,
however, you must either provide a function yywrap or, if you don't use it (e.g., your
scanner has no `#include'­like feature), simply include a `%noyywrap' statement in
the scanner's source. Once this done, the scanner is portable (unless you felt free to
use nonportable constructs) and does not depend on any library. In this case, and in
this case only, it is suggested that you use this Autoconf snippet:
AC_PROG_LEX
if test "x$LEX" != xflex; then
LEX="$SHELL $missing_dir/missing flex"
AC_SUBST([LEX_OUTPUT_ROOT], [lex.yy])
AC_SUBST([LEXLIB], [''])
fi
The shell script missing can be found in the Automake distribution.
Remember that the user may have supplied an alternate location in LEX, so if Flex is
required, it is better to check that the user provided something su#cient by parsing
the output of `$LEX ­­version' than by simply relying on test "x$LEX" = xflex.
To ensure backward compatibility, Automake's AM_PROG_LEX invokes (indirectly) this
macro twice, which causes an annoying but benign ``AC_PROG_LEX invoked multiple
times'' warning. Future versions of Automake will fix this issue; meanwhile, just
ignore this message.
As part of running the test, this macro may delete any file in the configuration
directory named `lex.yy.c' or `lexyy.c'.
The result of this test can be influenced by setting the variable LEX or the cache
variable ac_cv_prog_LEX.
[Macro]
AC_PROG_LN_S
If `ln ­s' works on the current file system (the operating system and file system
support symbolic links), set the output variable LN_S to `ln ­s'; otherwise, if `ln'
works, set LN_S to `ln', and otherwise set it to `cp ­p'.
If you make a link in a directory other than the current directory, its meaning depends
on whether `ln' or `ln ­s' is used. To safely create links using `$(LN_S)', either find
out which form is used and adjust the arguments, or always invoke ln in the directory
where the link is to be created.
In other words, it does not work to do:
$(LN_S) foo /x/bar
Instead, do:
(cd /x && $(LN_S) foo bar)

48 Autoconf
[Macro]
AC_PROG_RANLIB
Set output variable RANLIB to `ranlib' if ranlib is found, and otherwise to `:' (do
nothing).
[Macro]
AC_PROG_SED
Set output variable SED to a Sed implementation that conforms to Posix and does
not have arbitrary length limits. Report an error if no acceptable Sed is found.
See [Limitations of Usual Tools], page 238, for more information about portability
problems with Sed.
The result of this test can be overridden by setting the SED variable and is cached in
the ac_cv_path_SED variable.
[Macro]
AC_PROG_YACC
If bison is found, set output variable YACC to `bison ­y'. Otherwise, if byacc is
found, set YACC to `byacc'. Otherwise set YACC to `yacc'. The result of this test can
be influenced by setting the variable YACC or the cache variable ac_cv_prog_YACC.
5.2.2 Generic Program and File Checks
These macros are used to find programs not covered by the ``particular'' test macros. If you
need to check the behavior of a program as well as find out whether it is present, you have
to write your own test for it (see Chapter 6 [Writing Tests], page 99). By default, these
macros use the environment variable PATH. If you need to check for a program that might
not be in the user's PATH, you can pass a modified path to use instead, like this:
AC_PATH_PROG([INETD], [inetd], [/usr/libexec/inetd],
[$PATH$PATH_SEPARATOR/usr/libexec$PATH_SEPARATOR]dnl
[/usr/sbin$PATH_SEPARATOR/usr/etc$PATH_SEPARATOR/etc])
You are strongly encouraged to declare the variable passed to AC_CHECK_PROG etc. as
precious, See Section 7.2 [Setting Output Variables], page 112, AC_ARG_VAR, for more details.
[Macro]
AC_CHECK_PROG (variable, prog­to­check­for, value­if­found,
[value­if­not­found], [path = `$PATH'], [reject])
Check whether program prog­to­check­for exists in path. If it is found, set variable
to value­if­found, otherwise to value­if­not­found, if given. Always pass over reject
(an absolute file name) even if it is the first found in the search path; in that case,
set variable using the absolute file name of the prog­to­check­for found that is not
reject. If variable was already set, do nothing. Calls AC_SUBST for variable. The result
of this test can be overridden by setting the variable variable or the cache variable
ac_cv_prog_variable.
[Macro]
AC_CHECK_PROGS (variable, progs­to­check­for,
[value­if­not­found], [path = `$PATH'])
Check for each program in the blank­separated list progs­to­check­for existing in the
path. If one is found, set variable to the name of that program. Otherwise, continue
checking the next program in the list. If none of the programs in the list are found,
set variable to value­if­not­found; if value­if­not­found is not specified, the value of
variable is not changed. Calls AC_SUBST for variable. The result of this test can
be overridden by setting the variable variable or the cache variable ac_cv_prog_
variable.

Chapter 5: Existing Tests 49
[Macro]
AC_CHECK_TARGET_TOOL (variable, prog­to­check­for,
[value­if­not­found], [path = `$PATH'])
Like AC_CHECK_PROG, but first looks for prog­to­check­for with a prefix of the target
type as determined by AC_CANONICAL_TARGET, followed by a dash (see Section 14.2
[Canonicalizing], page 272). If the tool cannot be found with a prefix, and if the build
and target types are equal, then it is also searched for without a prefix.
As noted in Section 14.1 [Specifying Target Triplets], page 271, the target is rarely
specified, because most of the time it is the same as the host: it is the type of system
for which any compiler tool in the package produces code. What this macro looks for
is, for example, a tool (assembler, linker, etc.) that the compiler driver (gcc for the
GNU C Compiler) uses to produce objects, archives or executables.
[Macro]
AC_CHECK_TOOL (variable, prog­to­check­for,
[value­if­not­found], [path = `$PATH'])
Like AC_CHECK_PROG, but first looks for prog­to­check­for with a prefix of the host
type as specified by `­­host', followed by a dash. For example, if the user runs
`configure ­­build=x86_64­gnu ­­host=i386­gnu', then this call:
AC_CHECK_TOOL([RANLIB], [ranlib], [:])
sets RANLIB to `i386­gnu­ranlib' if that program exists in path, or otherwise to
`ranlib' if that program exists in path, or to `:' if neither program exists.
When cross­compiling, this macro will issue a warning if no program prefixed with the
host type could be found. For more information, see Section 14.1 [Specifying Target
Triplets], page 271.
[Macro]
AC_CHECK_TARGET_TOOLS (variable, progs­to­check­for,
[value­if­not­found], [path = `$PATH'])
Like AC_CHECK_TARGET_TOOL, each of the tools in the list progs­to­check­for are
checked with a prefix of the target type as determined by AC_CANONICAL_TARGET,
followed by a dash (see Section 14.2 [Canonicalizing], page 272). If none of the tools
can be found with a prefix, and if the build and target types are equal, then the
first one without a prefix is used. If a tool is found, set variable to the name of
that program. If none of the tools in the list are found, set variable to value­if­not­
found; if value­if­not­found is not specified, the value of variable is not changed. Calls
AC_SUBST for variable.
[Macro]
AC_CHECK_TOOLS (variable, progs­to­check­for,
[value­if­not­found], [path = `$PATH'])
Like AC_CHECK_TOOL, each of the tools in the list progs­to­check­for are checked with
a prefix of the host type as determined by AC_CANONICAL_HOST, followed by a dash
(see Section 14.2 [Canonicalizing], page 272). If none of the tools can be found with
a prefix, then the first one without a prefix is used. If a tool is found, set variable to
the name of that program. If none of the tools in the list are found, set variable to
value­if­not­found; if value­if­not­found is not specified, the value of variable is not
changed. Calls AC_SUBST for variable.
When cross­compiling, this macro will issue a warning if no program prefixed with the
host type could be found. For more information, see Section 14.1 [Specifying Target
Triplets], page 271.

50 Autoconf
[Macro]
AC_PATH_PROG (variable, prog­to­check­for, [value­if­not­found],
[path = `$PATH'])
Like AC_CHECK_PROG, but set variable to the absolute name of prog­to­check­for if
found. The result of this test can be overridden by setting the variable variable. A
positive result of this test is cached in the ac_cv_path_variable variable.
[Macro]
AC_PATH_PROGS (variable, progs­to­check­for,
[value­if­not­found], [path = `$PATH'])
Like AC_CHECK_PROGS, but if any of progs­to­check­for are found, set variable to the
absolute name of the program found. The result of this test can be overridden by
setting the variable variable. A positive result of this test is cached in the ac_cv_
path_variable variable.
[Macro]
AC_PATH_PROGS_FEATURE_CHECK (variable, progs­to­check­for,
feature­test, [action­if­not­found], [path = `$PATH'])
This macro was introduced in Autoconf 2.62. If variable is not empty, then set the
cache variable ac_cv_path_variable to its value. Otherwise, check for each program
in the blank­separated list progs­to­check­for existing in path. For each program
found, execute feature­test with ac_path_variable set to the absolute name of the
candidate program. If no invocation of feature­test sets the shell variable ac_cv_
path_variable, then action­if­not­found is executed. feature­test will be run even
when ac_cv_path_variable is set, to provide the ability to choose a better candidate
found later in path; to accept the current setting and bypass all futher checks, feature­
test can execute ac_path_variable_found=:.
Note that this macro has some subtle di#erences from AC_CHECK_PROGS. It is de­
signed to be run inside AC_CACHE_VAL, therefore, it should have no side e#ects. In
particular, variable is not set to the final value of ac_cv_path_variable, nor is AC_
SUBST automatically run. Also, on failure, any action can be performed, whereas
AC_CHECK_PROGS only performs variable=value­if­not­found.
Here is an example, similar to what Autoconf uses in its own configure script. It will
search for an implementation of m4 that supports the indir builtin, even if it goes by
the name gm4 or is not the first implementation on PATH.
AC_CACHE_CHECK([for m4 that supports indir], [ac_cv_path_M4],
[AC_PATH_PROGS_FEATURE_CHECK([M4], [m4 gm4],
[[m4out=`echo 'changequote([,])indir([divnum])' | $ac_path_M4`
test "x$m4out" = x0 \
&& ac_cv_path_M4=$ac_path_M4 ac_path_M4_found=:]],
[AC_MSG_ERROR([could not find m4 that supports indir])])])
AC_SUBST([M4], [$ac_cv_path_M4])
[Macro]
AC_PATH_TARGET_TOOL (variable, prog­to­check­for,
[value­if­not­found], [path = `$PATH'])
Like AC_CHECK_TARGET_TOOL, but set variable to the absolute name of the program
if it is found.

Chapter 5: Existing Tests 51
[Macro]
AC_PATH_TOOL (variable, prog­to­check­for, [value­if­not­found],
[path = `$PATH'])
Like AC_CHECK_TOOL, but set variable to the absolute name of the program if it is
found.
When cross­compiling, this macro will issue a warning if no program prefixed with the
host type could be found. For more information, see Section 14.1 [Specifying Target
Triplets], page 271.
5.3 Files
You might also need to check for the existence of files. Before using these macros, ask
yourself whether a runtime test might not be a better solution. Be aware that, like most
Autoconf macros, they test a feature of the host machine, and therefore, they die when
cross­compiling.
[Macro]
AC_CHECK_FILE (file, [action­if­found], [action­if­not­found])
Check whether file file exists on the native system. If it is found, execute action­
if­found, otherwise do action­if­not­found, if given. The result of this test is cached
in the ac_cv_file_file variable, with characters not suitable for a variable name
mapped to underscores.
[Macro]
AC_CHECK_FILES (files, [action­if­found], [action­if­not­found])
Executes AC_CHECK_FILE once for each file listed in files. Additionally, defines
`HAVE_file' (see Section 5.1.1 [Standard Symbols], page 43) for each file found. The
results of each test are cached in the ac_cv_file_file variable, with characters not
suitable for a variable name mapped to underscores.
5.4 Library Files
The following macros check for the presence of certain C, C++, or Fortran library archive
files.
[Macro]
AC_CHECK_LIB (library, function, [action­if­found],
[action­if­not­found], [other­libraries])
Test whether the library library is available by trying to link a test program that
calls function function with the library. function should be a function provided by
the library. Use the base name of the library; e.g., to check for `­lmp', use `mp' as the
library argument.
action­if­found is a list of shell commands to run if the link with the library succeeds;
action­if­not­found is a list of shell commands to run if the link fails. If action­if­
found is not specified, the default action prepends `­llibrary' to LIBS and defines
`HAVE_LIBlibrary' (in all capitals). This macro is intended to support building
LIBS in a right­to­left (least­dependent to most­dependent) fashion such that library
dependencies are satisfied as a natural side e#ect of consecutive tests. Linkers are
sensitive to library ordering so the order in which LIBS is generated is important to
reliable detection of libraries.
If linking with library results in unresolved symbols that would be resolved by linking
with additional libraries, give those libraries as the other­libraries argument, separated

52 Autoconf
by spaces: e.g., `­lXt ­lX11'. Otherwise, this macro may fail to detect that library
is present, because linking the test program can fail with unresolved symbols. The
other­libraries argument should be limited to cases where it is desirable to test for
one library in the presence of another that is not already in LIBS.
AC_CHECK_LIB requires some care in usage, and should be avoided in some common
cases. Many standard functions like gethostbyname appear in the standard C library
on some hosts, and in special libraries like nsl on other hosts. On some hosts the
special libraries contain variant implementations that you may not want to use. These
days it is normally better to use AC_SEARCH_LIBS([gethostbyname], [nsl]) instead
of AC_CHECK_LIB([nsl], [gethostbyname]).
The result of this test is cached in the ac_cv_lib_library_function variable.
[Macro]
AC_SEARCH_LIBS (function, search­libs, [action­if­found],
[action­if­not­found], [other­libraries])
Search for a library defining function if it's not already available. This equates to call­
ing `AC_LINK_IFELSE([AC_LANG_CALL([], [function])])' first with no libraries,
then for each library listed in search­libs.
Prepend `­llibrary' to LIBS for the first library found to contain function, and run
action­if­found. If the function is not found, run action­if­not­found.
If linking with library results in unresolved symbols that would be resolved by linking
with additional libraries, give those libraries as the other­libraries argument, separated
by spaces: e.g., `­lXt ­lX11'. Otherwise, this macro fails to detect that function is
present, because linking the test program always fails with unresolved symbols.
The result of this test is cached in the ac_cv_search_function variable as `none
required' if function is already available, as `no' if no library containing function was
found, otherwise as the `­llibrary' option that needs to be prepended to LIBS.
5.5 Library Functions
The following macros check for particular C library functions. If there is no macro specifi­
cally defined to check for a function you need, and you don't need to check for any special
properties of it, then you can use one of the general function­check macros.
5.5.1 Portability of C Functions
Most usual functions can either be missing, or be buggy, or be limited on some architectures.
This section tries to make an inventory of these portability issues. By definition, this list
always requires additions. A much more complete list is maintained by the Gnulib project
(see Section 2.2 [Gnulib], page 3), covering Section ``Current Posix Functions'' in GNU
gnulib, Section ``Legacy Functions'' in GNU gnulib, and Section ``Glibc Functions'' in GNU
gnulib. Please help us keep the gnulib list as complete as possible.
exit On ancient hosts, exit returned int. This is because exit predates void, and
there was a long tradition of it returning int.
On current hosts, the problem more likely is that exit is not declared, due to
C++ problems of some sort or another. For this reason we suggest that test
programs not invoke exit, but return from main instead.

Chapter 5: Existing Tests 53
free The C standard says a call free (NULL) does nothing, but some old systems
don't support this (e.g., NextStep).
isinf
isnan The C99 standard says that isinf and isnan are macros. On some systems
just macros are available (e.g., HP­UX and Solaris 10), on some systems both
macros and functions (e.g., glibc 2.3.2), and on some systems only functions
(e.g., IRIX 6 and Solaris 9). In some cases these functions are declared in
nonstandard headers like <sunmath.h> and defined in non­default libraries like
`­lm' or `­lsunmath'.
The C99 isinf and isnan macros work correctly with long double arguments,
but pre­C99 systems that use functions typically assume double arguments. On
such a system, isinf incorrectly returns true for a finite long double argument
that is outside the range of double.
The best workaround for these issues is to use gnulib modules isinf and isnan
(see Section 2.2 [Gnulib], page 3). But a lighter weight solution involves code
like the following.
#include <math.h>
#ifndef isnan
# define isnan(x) \
(sizeof (x) == sizeof (long double) ? isnan_ld (x) \
: sizeof (x) == sizeof (double) ? isnan_d (x) \
: isnan_f (x))
static inline int isnan_f (float x) { return x != x; }
static inline int isnan_d (double x) { return x != x; }
static inline int isnan_ld (long double x) { return x != x; }
#endif
#ifndef isinf
# define isinf(x) \
(sizeof (x) == sizeof (long double) ? isinf_ld (x) \
: sizeof (x) == sizeof (double) ? isinf_d (x) \
: isinf_f (x))
static inline int isinf_f (float x)
{ return !isnan (x) && isnan (x ­ x); }
static inline int isinf_d (double x)
{ return !isnan (x) && isnan (x ­ x); }
static inline int isinf_ld (long double x)
{ return !isnan (x) && isnan (x ­ x); }
#endif
Use AC_C_INLINE (see Section 5.10.3 [C Compiler], page 81) so that this code
works on compilers that lack the inline keyword. Some optimizing compilers
mishandle these definitions, but systems with that bug typically have many
other floating point corner­case compliance problems anyway, so it's probably
not worth worrying about.
malloc The C standard says a call malloc (0) is implementation dependent. It can
return either NULL or a new non­null pointer. The latter is more common (e.g.,
the GNU C Library) but is by no means universal. AC_FUNC_MALLOC can be
used to insist on non­NULL (see Section 5.5.2 [Particular Functions], page 55).

54 Autoconf
putenv Posix prefers setenv to putenv; among other things, putenv is not required of
all Posix implementations, but setenv is.
Posix specifies that putenv puts the given string directly in environ, but some
systems make a copy of it instead (e.g., glibc 2.0, or BSD). And when a copy
is made, unsetenv might not free it, causing a memory leak (e.g., FreeBSD 4).
On some systems putenv ("FOO") removes `FOO' from the environment, but
this is not standard usage and it dumps core on some systems (e.g., AIX).
On MinGW, a call putenv ("FOO=") removes `FOO' from the environment,
rather than inserting it with an empty value.
realloc The C standard says a call realloc (NULL, size) is equivalent to malloc
(size), but some old systems don't support this (e.g., NextStep).
signal handler
Normally signal takes a handler function with a return type of void, but some
old systems required int instead. Any actual int value returned is not used;
this is only a di#erence in the function prototype demanded.
All systems we know of in current use return void. The int was to support
K&R C, where of course void is not available. The obsolete macro AC_TYPE_
SIGNAL (see [AC TYPE SIGNAL], page 308) can be used to establish the cor­
rect type in all cases.
In most cases, it is more robust to use sigaction when it is available, rather
than signal.
snprintf The C99 standard says that if the output array isn't big enough and if no other
errors occur, snprintf and vsnprintf truncate the output and return the
number of bytes that ought to have been produced. Some older systems return
the truncated length (e.g., GNU C Library 2.0.x or IRIX 6.5), some a negative
value (e.g., earlier GNU C Library versions), and some the bu#er length without
truncation (e.g., 32­bit Solaris 7). Also, some buggy older systems ignore the
length and overrun the bu#er (e.g., 64­bit Solaris 7).
sprintf The C standard says sprintf and vsprintf return the number of bytes written.
On some ancient systems (SunOS 4 for instance) they return the bu#er pointer
instead, but these no longer need to be worried about.
sscanf On various old systems, e.g., HP­UX 9, sscanf requires that its input string
be writable (though it doesn't actually change it). This can be a problem when
using gcc since it normally puts constant strings in read­only memory (see
Section ``Incompatibilities'' in Using and Porting the GNU Compiler Collec­
tion). Apparently in some cases even having format strings read­only can be a
problem.
strerror_r
Posix specifies that strerror_r returns an int, but many systems (e.g., GNU C
Library version 2.2.4) provide a di#erent version returning a char *. AC_FUNC_
STRERROR_R can detect which is in use (see Section 5.5.2 [Particular Functions],
page 55).
strnlen AIX 4.3 provides a broken version which produces the following results:

Chapter 5: Existing Tests 55
strnlen ("foobar", 0) = 0
strnlen ("foobar", 1) = 3
strnlen ("foobar", 2) = 2
strnlen ("foobar", 3) = 1
strnlen ("foobar", 4) = 0
strnlen ("foobar", 5) = 6
strnlen ("foobar", 6) = 6
strnlen ("foobar", 7) = 6
strnlen ("foobar", 8) = 6
strnlen ("foobar", 9) = 6
sysconf _SC_PAGESIZE is standard, but some older systems (e.g., HP­UX 9) have _SC_
PAGE_SIZE instead. This can be tested with #ifdef.
unlink The Posix spec says that unlink causes the given file to be removed only after
there are no more open file handles for it. Some non­Posix hosts have trouble
with this requirement, though, and some DOS variants even corrupt the file
system.
unsetenv On MinGW, unsetenv is not available, but a variable `FOO' can be removed
with a call putenv ("FOO="), as described under putenv above.
va_copy The C99 standard provides va_copy for copying va_list variables. It may be
available in older environments too, though possibly as __va_copy (e.g., gcc in
strict pre­C99 mode). These can be tested with #ifdef. A fallback to memcpy
(&dst, &src, sizeof (va_list)) gives maximum portability.
va_list va_list is not necessarily just a pointer. It can be a struct (e.g., gcc on
Alpha), which means NULL is not portable. Or it can be an array (e.g., gcc in
some PowerPC configurations), which means as a function parameter it can be
e#ectively call­by­reference and library routines might modify the value back
in the caller (e.g., vsnprintf in the GNU C Library 2.1).
Signed >> Normally the C >> right shift of a signed type replicates the high bit, giving a
so­called ``arithmetic'' shift. But care should be taken since Standard C doesn't
require that behavior. On those few processors without a native arithmetic
shift (for instance Cray vector systems) zero bits may be shifted in, the same
as a shift of an unsigned type.
Integer / C divides signed integers by truncating their quotient toward zero, yielding the
same result as Fortran. However, before C99 the standard allowed C imple­
mentations to take the floor or ceiling of the quotient in some cases. Hardly
any implementations took advantage of this freedom, though, and it's probably
not worth worrying about this issue nowadays.
5.5.2 Particular Function Checks
These macros check for particular C functions---whether they exist, and in some cases how
they respond when given certain arguments.

56 Autoconf
[Macro]
AC_FUNC_ALLOCA
Check how to get alloca. Tries to get a builtin version by checking for `alloca.h'
or the predefined C preprocessor macros __GNUC__ and _AIX. If this macro finds
`alloca.h', it defines HAVE_ALLOCA_H.
If those attempts fail, it looks for the function in the standard C library. If any
of those methods succeed, it defines HAVE_ALLOCA. Otherwise, it sets the output
variable ALLOCA to `${LIBOBJDIR}alloca.o' and defines C_ALLOCA (so programs can
periodically call `alloca (0)' to garbage collect). This variable is separate from
LIBOBJS so multiple programs can share the value of ALLOCA without needing to
create an actual library, in case only some of them use the code in LIBOBJS. The
`${LIBOBJDIR}' prefix serves the same purpose as in LIBOBJS (see Section 18.6.4
[AC LIBOBJ vs LIBOBJS], page 316).
This macro does not try to get alloca from the System V R3 `libPW' or the System
V R4 `libucb' because those libraries contain some incompatible functions that cause
trouble. Some versions do not even contain alloca or contain a buggy version. If
you still want to use their alloca, use ar to extract `alloca.o' from them instead of
compiling `alloca.c'.
Source files that use alloca should start with a piece of code like the following, to
declare it properly.
#ifdef STDC_HEADERS
# include <stdlib.h>
# include <stddef.h>
#else
# ifdef HAVE_STDLIB_H
# include <stdlib.h>
# endif
#endif
#ifdef HAVE_ALLOCA_H
# include <alloca.h>
#elif defined __GNUC__
# define alloca __builtin_alloca
#elif defined _AIX
# define alloca __alloca
#elif defined _MSC_VER
# include <malloc.h>
# define alloca _alloca
#else
# ifndef HAVE_ALLOCA
# ifdef __cplusplus
extern "C"
# endif
void *alloca (size_t);
# endif
#endif

Chapter 5: Existing Tests 57
[Macro]
AC_FUNC_CHOWN
If the chown function is available and works (in particular, it should accept `­1' for
uid and gid), define HAVE_CHOWN. The result of this macro is cached in the ac_cv_
func_chown_works variable.
[Macro]
AC_FUNC_CLOSEDIR_VOID
If the closedir function does not return a meaningful value, define CLOSEDIR_VOID.
Otherwise, callers ought to check its return value for an error indicator.
Currently this test is implemented by running a test program. When cross compiling
the pessimistic assumption that closedir does not return a meaningful value is made.
The result of this macro is cached in the ac_cv_func_closedir_void variable.
This macro is obsolescent, as closedir returns a meaningful value on current systems.
New programs need not use this macro.
[Macro]
AC_FUNC_ERROR_AT_LINE
If the error_at_line function is not found, require an AC_LIBOBJ replacement of
`error'.
The result of this macro is cached in the ac_cv_lib_error_at_line variable.
The AC_FUNC_ERROR_AT_LINE macro is obsolescent. New programs should use
Gnulib's error module. See Section 2.2 [Gnulib], page 3.
[Macro]
AC_FUNC_FNMATCH
If the fnmatch function conforms to Posix, define HAVE_FNMATCH. Detect common
implementation bugs, for example, the bugs in Solaris 2.4.
Unlike the other specific AC_FUNC macros, AC_FUNC_FNMATCH does not replace a bro­
ken/missing fnmatch. This is for historical reasons. See AC_REPLACE_FNMATCH below.
The result of this macro is cached in the ac_cv_func_fnmatch_works variable.
This macro is obsolescent. New programs should use Gnulib's fnmatch­posix mod­
ule. See Section 2.2 [Gnulib], page 3.
[Macro]
AC_FUNC_FNMATCH_GNU
Behave like AC_REPLACE_FNMATCH (replace) but also test whether fnmatch supports
GNU extensions. Detect common implementation bugs, for example, the bugs in the
GNU C Library 2.1.
The result of this macro is cached in the ac_cv_func_fnmatch_gnu variable.
This macro is obsolescent. New programs should use Gnulib's fnmatch­gnu module.
See Section 2.2 [Gnulib], page 3.
[Macro]
AC_FUNC_FORK
This macro checks for the fork and vfork functions. If a working fork is found,
define HAVE_WORKING_FORK. This macro checks whether fork is just a stub by trying
to run it.
If `vfork.h' is found, define HAVE_VFORK_H. If a working vfork is found, define HAVE_
WORKING_VFORK. Otherwise, define vfork to be fork for backward compatibility
with previous versions of autoconf. This macro checks for several known errors in
implementations of vfork and considers the system to not have a working vfork if

58 Autoconf
it detects any of them. It is not considered to be an implementation error if a child's
invocation of signal modifies the parent's signal handler, since child processes rarely
change their signal handlers.
Since this macro defines vfork only for backward compatibility with previous versions
of autoconf you're encouraged to define it yourself in new code:
#ifndef HAVE_WORKING_VFORK
# define vfork fork
#endif
[Macro]
AC_FUNC_FSEEKO
If the fseeko function is available, define HAVE_FSEEKO. Define _LARGEFILE_SOURCE if
necessary to make the prototype visible on some systems (e.g., glibc 2.2). Otherwise
linkage problems may occur when compiling with AC_SYS_LARGEFILE on largefile­
sensitive systems where off_t does not default to a 64bit entity. All systems with
fseeko also supply ftello.
[Macro]
AC_FUNC_GETGROUPS
If the getgroups function is available and works (unlike on Ultrix 4.3, where
`getgroups (0, 0)' always fails), define HAVE_GETGROUPS. Set GETGROUPS_LIBS to
any libraries needed to get that function. This macro runs AC_TYPE_GETGROUPS.
[Macro]
AC_FUNC_GETLOADAVG
Check how to get the system load averages. To perform its tests properly, this macro
needs the file `getloadavg.c'; therefore, be sure to set the AC_LIBOBJ replacement di­
rectory properly (see Section 5.5.3 [Generic Functions], page 63, AC_CONFIG_LIBOBJ_
DIR).
If the system has the getloadavg function, define HAVE_GETLOADAVG, and set
GETLOADAVG_LIBS to any libraries necessary to get that function. Also add
GETLOADAVG_LIBS to LIBS. Otherwise, require an AC_LIBOBJ replacement for
`getloadavg' with source code in `dir/getloadavg.c', and possibly define several
other C preprocessor macros and output variables:
1. Define C_GETLOADAVG.
2. Define SVR4, DGUX, UMAX, or UMAX4_3 if on those systems.
3. If `nlist.h' is found, define HAVE_NLIST_H.
4. If `struct nlist' has an `n_un.n_name' member, define HAVE_STRUCT_NLIST_N_
UN_N_NAME. The obsolete symbol NLIST_NAME_UNION is still defined, but do not
depend upon it.
5. Programs may need to be installed set­group­ID (or set­user­ID) for getloadavg
to work. In this case, define GETLOADAVG_PRIVILEGED, set the output variable
NEED_SETGID to `true' (and otherwise to `false'), and set KMEM_GROUP to the
name of the group that should own the installed program.
The AC_FUNC_GETLOADAVG macro is obsolescent. New programs should use Gnulib's
getloadavg module. See Section 2.2 [Gnulib], page 3.
[Macro]
AC_FUNC_GETMNTENT
Check for getmntent in the standard C library, and then in the `sun', `seq', and
`gen' libraries, for UNICOS, IRIX 4, PTX, and UnixWare, respectively. Then, if

Chapter 5: Existing Tests 59
getmntent is available, define HAVE_GETMNTENT and set ac_cv_func_getmntent to
yes. Otherwise set ac_cv_func_getmntent to no.
The result of this macro can be overridden by setting the cache variable ac_cv_
search_getmntent.
[Macro]
AC_FUNC_GETPGRP
Define GETPGRP_VOID if it is an error to pass 0 to getpgrp; this is the Posix behavior.
On older BSD systems, you must pass 0 to getpgrp, as it takes an argument and
behaves like Posix's getpgid.
#ifdef GETPGRP_VOID
pid = getpgrp ();
#else
pid = getpgrp (0);
#endif
This macro does not check whether getpgrp exists at all; if you need to work in that
situation, first call AC_CHECK_FUNC for getpgrp.
The result of this macro is cached in the ac_cv_func_getpgrp_void variable.
This macro is obsolescent, as current systems have a getpgrp whose signature con­
forms to Posix. New programs need not use this macro.
[Macro]
AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK
If `link' is a symbolic link, then lstat should treat `link/' the same as `link/.'.
However, many older lstat implementations incorrectly ignore trailing slashes.
It is safe to assume that if lstat incorrectly ignores trailing slashes, then other
symbolic­link­aware functions like unlink also incorrectly ignore trailing slashes.
If lstat behaves properly, define LSTAT_FOLLOWS_SLASHED_SYMLINK, otherwise re­
quire an AC_LIBOBJ replacement of lstat.
The result of this macro is cached in the ac_cv_func_lstat_dereferences_
slashed_symlink variable.
The AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK macro is obsolescent. New pro­
grams should use Gnulib's lstat module. See Section 2.2 [Gnulib], page 3.
[Macro]
AC_FUNC_MALLOC
If the malloc function is compatible with the GNU C library malloc (i.e., `malloc
(0)' returns a valid pointer), define HAVE_MALLOC to 1. Otherwise define HAVE_MALLOC
to 0, ask for an AC_LIBOBJ replacement for `malloc', and define malloc to rpl_malloc
so that the native malloc is not used in the main project.
Typically, the replacement file `malloc.c' should look like (note the `#undef malloc'):
#include <config.h>
#undef malloc
#include <sys/types.h>
void *malloc ();

60 Autoconf
/* Allocate an N­byte block of memory from the heap.
If N is zero, allocate a 1­byte block. */
void *
rpl_malloc (size_t n)
{
if (n == 0)
n = 1;
return malloc (n);
}
The result of this macro is cached in the ac_cv_func_malloc_0_nonnull variable.
[Macro]
AC_FUNC_MBRTOWC
Define HAVE_MBRTOWC to 1 if the function mbrtowc and the type mbstate_t are prop­
erly declared.
The result of this macro is cached in the ac_cv_func_mbrtowc variable.
[Macro]
AC_FUNC_MEMCMP
If the memcmp function is not available, or does not work on 8­bit data (like the one on
SunOS 4.1.3), or fails when comparing 16 bytes or more and with at least one bu#er
not starting on a 4­byte boundary (such as the one on NeXT x86 OpenStep), require
an AC_LIBOBJ replacement for `memcmp'.
The result of this macro is cached in the ac_cv_func_memcmp_working variable.
This macro is obsolescent, as current systems have a working memcmp. New programs
need not use this macro.
[Macro]
AC_FUNC_MKTIME
If the mktime function is not available, or does not work correctly, require an AC_
LIBOBJ replacement for `mktime'. For the purposes of this test, mktime should con­
form to the Posix standard and should be the inverse of localtime.
The result of this macro is cached in the ac_cv_func_working_mktime variable.
The AC_FUNC_MKTIME macro is obsolescent. New programs should use Gnulib's
mktime module. See Section 2.2 [Gnulib], page 3.
[Macro]
AC_FUNC_MMAP
If the mmap function exists and works correctly, define HAVE_MMAP. This checks only
private fixed mapping of already­mapped memory.
The result of this macro is cached in the ac_cv_func_mmap_fixed_mapped variable.
[Macro]
AC_FUNC_OBSTACK
If the obstacks are found, define HAVE_OBSTACK, else require an AC_LIBOBJ replace­
ment for `obstack'.
The result of this macro is cached in the ac_cv_func_obstack variable.
[Macro]
AC_FUNC_REALLOC
If the realloc function is compatible with the GNU C library realloc (i.e., `realloc
(NULL, 0)' returns a valid pointer), define HAVE_REALLOC to 1. Otherwise define

Chapter 5: Existing Tests 61
HAVE_REALLOC to 0, ask for an AC_LIBOBJ replacement for `realloc', and define
realloc to rpl_realloc so that the native realloc is not used in the main project.
See AC_FUNC_MALLOC for details.
The result of this macro is cached in the ac_cv_func_realloc_0_nonnull variable.
[Macro]
AC_FUNC_SELECT_ARGTYPES
Determines the correct type to be passed for each of the select function's arguments,
and defines those types in SELECT_TYPE_ARG1, SELECT_TYPE_ARG234, and SELECT_
TYPE_ARG5 respectively. SELECT_TYPE_ARG1 defaults to `int', SELECT_TYPE_ARG234
defaults to `int *', and SELECT_TYPE_ARG5 defaults to `struct timeval *'.
This macro is obsolescent, as current systems have a select whose signature conforms
to Posix. New programs need not use this macro.
[Macro]
AC_FUNC_SETPGRP
If setpgrp takes no argument (the Posix version), define SETPGRP_VOID. Otherwise,
it is the BSD version, which takes two process IDs as arguments. This macro does
not check whether setpgrp exists at all; if you need to work in that situation, first
call AC_CHECK_FUNC for setpgrp.
The result of this macro is cached in the ac_cv_func_setpgrp_void variable.
This macro is obsolescent, as current systems have a setpgrp whose signature con­
forms to Posix. New programs need not use this macro.
[Macro]
AC_FUNC_STAT
[Macro]
AC_FUNC_LSTAT
Determine whether stat or lstat have the bug that it succeeds when given the zero­
length file name as argument. The stat and lstat from SunOS 4.1.4 and the Hurd
(as of 1998­11­01) do this.
If it does, then define HAVE_STAT_EMPTY_STRING_BUG (or HAVE_LSTAT_EMPTY_
STRING_BUG) and ask for an AC_LIBOBJ replacement of it.
The results of these macros are cached in the ac_cv_func_stat_empty_string_bug
and the ac_cv_func_lstat_empty_string_bug variables, respectively.
These macros are obsolescent, as no current systems have the bug. New programs
need not use these macros.
[Macro]
AC_FUNC_STRCOLL
If the strcoll function exists and works correctly, define HAVE_STRCOLL. This does
a bit more than `AC_CHECK_FUNCS(strcoll)', because some systems have incorrect
definitions of strcoll that should not be used.
The result of this macro is cached in the ac_cv_func_strcoll_works variable.
[Macro]
AC_FUNC_STRERROR_R
If strerror_r is available, define HAVE_STRERROR_R, and if it is declared, define
HAVE_DECL_STRERROR_R. If it returns a char * message, define STRERROR_R_CHAR_
P; otherwise it returns an int error number. The Thread­Safe Functions option of
Posix requires strerror_r to return int, but many systems (including, for example,
version 2.2.4 of the GNU C Library) return a char * value that is not necessarily
equal to the bu#er argument.
The result of this macro is cached in the ac_cv_func_strerror_r_char_p variable.

62 Autoconf
[Macro]
AC_FUNC_STRFTIME
Check for strftime in the `intl' library, for SCO Unix. Then, if strftime is avail­
able, define HAVE_STRFTIME.
This macro is obsolescent, as no current systems require the `intl' library for
strftime. New programs need not use this macro.
[Macro]
AC_FUNC_STRTOD
If the strtod function does not exist or doesn't work correctly, ask for an AC_LIBOBJ
replacement of `strtod'. In this case, because `strtod.c' is likely to need `pow', set
the output variable POW_LIB to the extra library needed.
This macro caches its result in the ac_cv_func_strtod variable and depends upon
the result in the ac_cv_func_pow variable.
The AC_FUNC_STRTOD macro is obsolescent. New programs should use Gnulib's
strtod module. See Section 2.2 [Gnulib], page 3.
[Macro]
AC_FUNC_STRTOLD
If the strtold function exists and conforms to C99, define HAVE_STRTOLD.
This macro caches its result in the ac_cv_func_strtold variable.
[Macro]
AC_FUNC_STRNLEN
If the strnlen function is not available, or is buggy (like the one from AIX 4.3),
require an AC_LIBOBJ replacement for it.
This macro caches its result in the ac_cv_func_strnlen_working variable.
[Macro]
AC_FUNC_UTIME_NULL
If `utime (file, NULL)' sets file's timestamp to the present, define HAVE_UTIME_
NULL.
This macro caches its result in the ac_cv_func_utime_null variable.
This macro is obsolescent, as all current systems have a utime that behaves this way.
New programs need not use this macro.
[Macro]
AC_FUNC_VPRINTF
If vprintf is found, define HAVE_VPRINTF. Otherwise, if _doprnt is found, define
HAVE_DOPRNT. (If vprintf is available, you may assume that vfprintf and vsprintf
are also available.)
This macro is obsolescent, as all current systems have vprintf. New programs need
not use this macro.
[Macro]
AC_REPLACE_FNMATCH
If the fnmatch function does not conform to Posix (see AC_FUNC_FNMATCH), ask for
its AC_LIBOBJ replacement.
The files `fnmatch.c', `fnmatch_loop.c', and `fnmatch_.h' in the AC_LIBOBJ replace­
ment directory are assumed to contain a copy of the source code of GNU fnmatch.
If necessary, this source code is compiled as an AC_LIBOBJ replacement, and the
`fnmatch_.h' file is linked to `fnmatch.h' so that it can be included in place of the
system <fnmatch.h>.
This macro caches its result in the ac_cv_func_fnmatch_works variable.

Chapter 5: Existing Tests 63
This macro is obsolescent, as it assumes the use of particular source files. New
programs should use Gnulib's fnmatch­posix module, which provides this macro
along with the source files. See Section 2.2 [Gnulib], page 3.
5.5.3 Generic Function Checks
These macros are used to find functions not covered by the ``particular'' test macros. If the
functions might be in libraries other than the default C library, first call AC_CHECK_LIB for
those libraries. If you need to check the behavior of a function as well as find out whether
it is present, you have to write your own test for it (see Chapter 6 [Writing Tests], page 99).
[Macro]
AC_CHECK_FUNC (function, [action­if­found],
[action­if­not­found])
If C function function is available, run shell commands action­if­found, otherwise
action­if­not­found. If you just want to define a symbol if the function is available,
consider using AC_CHECK_FUNCS instead. This macro checks for functions with C link­
age even when AC_LANG(C++) has been called, since C is more standardized than C++.
(see Section 6.1 [Language Choice], page 99, for more information about selecting the
language for checks.)
This macro caches its result in the ac_cv_func_function variable.
[Macro]
AC_CHECK_FUNCS (function. . . , [action­if­found],
[action­if­not­found])
For each function enumerated in the blank­or­newline­separated argument list, define
HAVE_function (in all capitals) if it is available. If action­if­found is given, it is
additional shell code to execute when one of the functions is found. You can give it
a value of `break' to break out of the loop on the first match. If action­if­not­found
is given, it is executed when one of the functions is not found.
Results are cached for each function as in AC_CHECK_FUNC.
[Macro]
AC_CHECK_FUNCS_ONCE (function. . . )
For each function enumerated in the blank­or­newline­separated argument list, define
HAVE_function (in all capitals) if it is available. This is a once­only variant of AC_
CHECK_FUNCS. It generates the checking code at most once, so that configure is
smaller and faster; but the checks cannot be conditionalized and are always done
once, early during the configure run.
Autoconf follows a philosophy that was formed over the years by those who have strug­
gled for portability: isolate the portability issues in specific files, and then program as if
you were in a Posix environment. Some functions may be missing or unfixable, and your
package must be ready to replace them.
Suitable replacements for many such problem functions are available from Gnulib (see
Section 2.2 [Gnulib], page 3).
[Macro]
AC_LIBOBJ (function)
Specify that `function.c' must be included in the executables to replace a missing
or broken implementation of function.

64 Autoconf
Technically, it adds `function.$ac_objext' to the output variable LIBOBJS if it is
not already in, and calls AC_LIBSOURCE for `function.c'. You should not directly
change LIBOBJS, since this is not traceable.
[Macro]
AC_LIBSOURCE (file)
Specify that file might be needed to compile the project. If you need to know what
files might be needed by a `configure.ac', you should trace AC_LIBSOURCE. file must
be a literal.
This macro is called automatically from AC_LIBOBJ, but you must call it explicitly
if you pass a shell variable to AC_LIBOBJ. In that case, since shell variables cannot
be traced statically, you must pass to AC_LIBSOURCE any possible files that the shell
variable might cause AC_LIBOBJ to need. For example, if you want to pass a variable
$foo_or_bar to AC_LIBOBJ that holds either "foo" or "bar", you should do:
AC_LIBSOURCE([foo.c])
AC_LIBSOURCE([bar.c])
AC_LIBOBJ([$foo_or_bar])
There is usually a way to avoid this, however, and you are encouraged to simply call
AC_LIBOBJ with literal arguments.
Note that this macro replaces the obsolete AC_LIBOBJ_DECL, with slightly di#erent
semantics: the old macro took the function name, e.g., foo, as its argument rather
than the file name.
[Macro]
AC_LIBSOURCES (files)
Like AC_LIBSOURCE, but accepts one or more files in a comma­separated M4 list.
Thus, the above example might be rewritten:
AC_LIBSOURCES([foo.c, bar.c])
AC_LIBOBJ([$foo_or_bar])
[Macro]
AC_CONFIG_LIBOBJ_DIR (directory)
Specify that AC_LIBOBJ replacement files are to be found in directory, a name rel­
ative to the top level of the source tree. The replacement directory defaults to
`.', the top level directory, and the most typical value is `lib', corresponding to
`AC_CONFIG_LIBOBJ_DIR([lib])'.
configure might need to know the replacement directory for the following reasons:
(i) some checks use the replacement files, (ii) some macros bypass broken system
headers by installing links to the replacement headers (iii) when used in conjunction
with Automake, within each makefile, directory is used as a relative path from $(top_
srcdir) to each object named in LIBOBJS and LTLIBOBJS, etc.
It is common to merely check for the existence of a function, and ask for its AC_LIBOBJ
replacement if missing. The following macro is a convenient shorthand.
[Macro]
AC_REPLACE_FUNCS (function. . . )
Like AC_CHECK_FUNCS, but uses `AC_LIBOBJ(function)' as action­if­not­found.
You can declare your replacement function by enclosing the prototype in `#ifndef
HAVE_function'. If the system has the function, it probably declares it in a header

Chapter 5: Existing Tests 65
file you should be including, so you shouldn't redeclare it lest your declaration
conflict.
5.6 Header Files
The following macros check for the presence of certain C header files. If there is no macro
specifically defined to check for a header file you need, and you don't need to check for any
special properties of it, then you can use one of the general header­file check macros.
5.6.1 Portability of Headers
This section documents some collected knowledge about common headers, and the problems
they cause. By definition, this list always requires additions. A much more complete list is
maintained by the Gnulib project (see Section 2.2 [Gnulib], page 3), covering Section ``Posix
Headers'' in GNU gnulib and Section ``Glibc Headers'' in GNU gnulib. Please help us keep
the gnulib list as complete as possible.
`limits.h'
C99 says that `limits.h' defines LLONG_MIN, LLONG_MAX, and ULLONG_MAX, but
many almost­C99 environments (e.g., default GCC 4.0.2 + glibc 2.4) do not
define them.
`inttypes.h' vs. `stdint.h'
The C99 standard says that `inttypes.h' includes `stdint.h', so there's no
need to include `stdint.h' separately in a standard environment. Some im­
plementations have `inttypes.h' but not `stdint.h' (e.g., Solaris 7), but we
don't know of any implementation that has `stdint.h' but not `inttypes.h'.
`linux/irda.h'
It requires `linux/types.h' and `sys/socket.h'.
`linux/random.h'
It requires `linux/types.h'.
`net/if.h'
On Darwin, this file requires that `sys/socket.h' be included beforehand. One
should run:
AC_CHECK_HEADERS([sys/socket.h])
AC_CHECK_HEADERS([net/if.h], [], [],
[#include <stdio.h>
#ifdef STDC_HEADERS
# include <stdlib.h>
# include <stddef.h>
#else
# ifdef HAVE_STDLIB_H
# include <stdlib.h>
# endif
#endif
#ifdef HAVE_SYS_SOCKET_H
# include <sys/socket.h>
#endif

66 Autoconf
])
`netinet/if_ether.h'
On Darwin, this file requires that `stdio.h' and `sys/socket.h' be included
beforehand. One should run:
AC_CHECK_HEADERS([sys/socket.h])
AC_CHECK_HEADERS([netinet/if_ether.h], [], [],
[#include <stdio.h>
#ifdef STDC_HEADERS
# include <stdlib.h>
# include <stddef.h>
#else
# ifdef HAVE_STDLIB_H
# include <stdlib.h>
# endif
#endif
#ifdef HAVE_SYS_SOCKET_H
# include <sys/socket.h>
#endif
])
`stdint.h'
See above, item `inttypes.h' vs. `stdint.h'.
`stdlib.h'
On many systems (e.g., Darwin), `stdio.h' is a prerequisite.
`sys/mount.h'
On FreeBSD 4.8 on ia32 and using gcc version 2.95.4, `sys/params.h' is a
prerequisite.
`sys/ptem.h'
On Solaris 8, `sys/stream.h' is a prerequisite.
`sys/socket.h'
On Darwin, `stdlib.h' is a prerequisite.
`sys/ucred.h'
On Tru64 5.1, `sys/types.h' is a prerequisite.
`X11/extensions/scrnsaver.h'
Using XFree86, this header requires `X11/Xlib.h', which is probably so required
that you might not even consider looking for it.
AC_CHECK_HEADERS([X11/extensions/scrnsaver.h], [], [],
[[#include <X11/Xlib.h>
]])
5.6.2 Particular Header Checks
These macros check for particular system header files---whether they exist, and in some
cases whether they declare certain symbols.

Chapter 5: Existing Tests 67
[Macro]
AC_HEADER_ASSERT
Check whether to enable assertions in the style of `assert.h'. Assertions are en­
abled by default, but the user can override this by invoking configure with the
`­­disable­assert' option.
[Macro]
AC_HEADER_DIRENT
Check for the following header files. For the first one that is found and defines `DIR',
define the listed C preprocessor macro:
`dirent.h' HAVE_DIRENT_H
`sys/ndir.h' HAVE_SYS_NDIR_H
`sys/dir.h' HAVE_SYS_DIR_H
`ndir.h' HAVE_NDIR_H
The directory­library declarations in your source code should look something like the
following:
#include <sys/types.h>
#ifdef HAVE_DIRENT_H
# include <dirent.h>
# define NAMLEN(dirent) strlen ((dirent)­>d_name)
#else
# define dirent direct
# define NAMLEN(dirent) ((dirent)­>d_namlen)
# ifdef HAVE_SYS_NDIR_H
# include <sys/ndir.h>
# endif
# ifdef HAVE_SYS_DIR_H
# include <sys/dir.h>
# endif
# ifdef HAVE_NDIR_H
# include <ndir.h>
# endif
#endif
Using the above declarations, the program would declare variables to be of type
struct dirent, not struct direct, and would access the length of a directory entry
name by passing a pointer to a struct dirent to the NAMLEN macro.
This macro also checks for the SCO Xenix `dir' and `x' libraries.
This macro is obsolescent, as all current systems with directory libraries have
<dirent.h>. New programs need not use this macro.
Also see AC_STRUCT_DIRENT_D_INO and AC_STRUCT_DIRENT_D_TYPE (see Section 5.8.1
[Particular Structures], page 74).
[Macro]
AC_HEADER_MAJOR
If `sys/types.h' does not define major, minor, and makedev, but `sys/mkdev.h'
does, define MAJOR_IN_MKDEV; otherwise, if `sys/sysmacros.h' does, define MAJOR_
IN_SYSMACROS.

68 Autoconf
[Macro]
AC_HEADER_RESOLV
Checks for header `resolv.h', checking for prerequisites first. To properly use
`resolv.h', your code should contain something like the following:
#ifdef HAVE_SYS_TYPES_H
# include <sys/types.h>
#endif
#ifdef HAVE_NETINET_IN_H
# include <netinet/in.h> /* inet_ functions / structs */
#endif
#ifdef HAVE_ARPA_NAMESER_H
# include <arpa/nameser.h> /* DNS HEADER struct */
#endif
#ifdef HAVE_NETDB_H
# include <netdb.h>
#endif
#include <resolv.h>
[Macro]
AC_HEADER_STAT
If the macros S_ISDIR, S_ISREG, etc. defined in `sys/stat.h' do not work properly
(returning false positives), define STAT_MACROS_BROKEN. This is the case on Tektronix
UTekV, Amdahl UTS and Motorola System V/88.
This macro is obsolescent, as no current systems have the bug. New programs need
not use this macro.
[Macro]
AC_HEADER_STDBOOL
If `stdbool.h' exists and conforms to C99, define HAVE_STDBOOL_H to 1; if the type
_Bool is defined, define HAVE__BOOL to 1. To fulfill the C99 requirements, your
`system.h' could contain the following code:
#ifdef HAVE_STDBOOL_H
# include <stdbool.h>
#else
# ifndef HAVE__BOOL
# ifdef __cplusplus
typedef bool _Bool;
# else
# define _Bool signed char
# endif
# endif
# define bool _Bool
# define false 0
# define true 1
# define __bool_true_false_are_defined 1
#endif
Alternatively you can use the `stdbool' package of Gnulib (see Section 2.2 [Gnulib],
page 3); it packages the above code into a replacement header and contains a few
other bells and whistles.
This macro caches its result in the ac_cv_header_stdbool_h variable.

Chapter 5: Existing Tests 69
[Macro]
AC_HEADER_STDC
Define STDC_HEADERS if the system has C header files conforming to ANSI C89 (ISO
C90). Specifically, this macro checks for `stdlib.h', `stdarg.h', `string.h', and
`float.h'; if the system has those, it probably has the rest of the C89 header files.
This macro also checks whether `string.h' declares memchr (and thus presumably the
other mem functions), whether `stdlib.h' declare free (and thus presumably malloc
and other related functions), and whether the `ctype.h' macros work on characters
with the high bit set, as the C standard requires.
If you use this macro, your code can refer to STDC_HEADERS to determine whether the
system has conforming header files (and probably C library functions).
This macro caches its result in the ac_cv_header_stdc variable.
This macro is obsolescent, as current systems have conforming header files. New
programs need not use this macro.
Nowadays `string.h' is part of the C standard and declares functions like strcpy,
and `strings.h' is standardized by Posix and declares BSD functions like bcopy; but
historically, string functions were a major sticking point in this area. If you still want
to worry about portability to ancient systems without standard headers, there is so
much variation that it is probably easier to declare the functions you use than to figure
out exactly what the system header files declare. Some ancient systems contained a
mix of functions from the C standard and from BSD; some were mostly standard
but lacked `memmove'; some defined the BSD functions as macros in `string.h' or
`strings.h'; some had only the BSD functions but `string.h'; some declared the
memory functions in `memory.h', some in `string.h'; etc. It is probably su#cient to
check for one string function and one memory function; if the library had the standard
versions of those then it probably had most of the others. If you put the following in
`configure.ac':
# This example is obsolescent.
# Nowadays you can omit these macro calls.
AC_HEADER_STDC
AC_CHECK_FUNCS([strchr memcpy])
then, in your code, you can use declarations like this:
/* This example is obsolescent.
Nowadays you can just #include <string.h>. */
#ifdef STDC_HEADERS
# include <string.h>
#else
# ifndef HAVE_STRCHR
# define strchr index
# define strrchr rindex
# endif
char *strchr (), *strrchr ();
# ifndef HAVE_MEMCPY
# define memcpy(d, s, n) bcopy ((s), (d), (n))
# define memmove(d, s, n) bcopy ((s), (d), (n))
# endif
#endif

70 Autoconf
If you use a function like memchr, memset, strtok, or strspn, which have no BSD
equivalent, then macros don't su#ce to port to ancient hosts; you must provide an im­
plementation of each function. An easy way to incorporate your implementations only
when needed (since the ones in system C libraries may be hand optimized) is to, taking
memchr for example, put it in `memchr.c' and use `AC_REPLACE_FUNCS([memchr])'.
[Macro]
AC_HEADER_SYS_WAIT
If `sys/wait.h' exists and is compatible with Posix, define HAVE_SYS_WAIT_H. In­
compatibility can occur if `sys/wait.h' does not exist, or if it uses the old BSD union
wait instead of int to store a status value. If `sys/wait.h' is not Posix compatible,
then instead of including it, define the Posix macros with their usual interpretations.
Here is an example:
#include <sys/types.h>
#ifdef HAVE_SYS_WAIT_H
# include <sys/wait.h>
#endif
#ifndef WEXITSTATUS
# define WEXITSTATUS(stat_val) ((unsigned int) (stat_val) >> 8)
#endif
#ifndef WIFEXITED
# define WIFEXITED(stat_val) (((stat_val) & 255) == 0)
#endif
This macro caches its result in the ac_cv_header_sys_wait_h variable.
This macro is obsolescent, as current systems are compatible with Posix. New pro­
grams need not use this macro.
_POSIX_VERSION is defined when `unistd.h' is included on Posix systems. If there is no
`unistd.h', it is definitely not a Posix system. However, some non­Posix systems do have
`unistd.h'.
The way to check whether the system supports Posix is:
#ifdef HAVE_UNISTD_H
# include <sys/types.h>
# include <unistd.h>
#endif
#ifdef _POSIX_VERSION
/* Code for Posix systems. */
#endif
[Macro]
AC_HEADER_TIME
If a program may include both `time.h' and `sys/time.h', define TIME_WITH_SYS_
TIME. On some ancient systems, `sys/time.h' included `time.h', but `time.h' was
not protected against multiple inclusion, so programs could not explicitly include both
files. This macro is useful in programs that use, for example, struct timeval as well
as struct tm. It is best used in conjunction with HAVE_SYS_TIME_H, which can be
checked for using AC_CHECK_HEADERS([sys/time.h]).

Chapter 5: Existing Tests 71
#ifdef TIME_WITH_SYS_TIME
# include <sys/time.h>
# include <time.h>
#else
# ifdef HAVE_SYS_TIME_H
# include <sys/time.h>
# else
# include <time.h>
# endif
#endif
This macro caches its result in the ac_cv_header_time variable.
This macro is obsolescent, as current systems can include both files when they exist.
New programs need not use this macro.
[Macro]
AC_HEADER_TIOCGWINSZ
If the use of TIOCGWINSZ requires `<sys/ioctl.h>', then define GWINSZ_IN_SYS_
IOCTL. Otherwise TIOCGWINSZ can be found in `<termios.h>'.
Use:
#ifdef HAVE_TERMIOS_H
# include <termios.h>
#endif
#ifdef GWINSZ_IN_SYS_IOCTL
# include <sys/ioctl.h>
#endif
5.6.3 Generic Header Checks
These macros are used to find system header files not covered by the ``particular'' test
macros. If you need to check the contents of a header as well as find out whether it is
present, you have to write your own test for it (see Chapter 6 [Writing Tests], page 99).
[Macro]
AC_CHECK_HEADER (header­file, [action­if­found],
[action­if­not­found], [includes])
If the system header file header­file is compilable, execute shell commands action­if­
found, otherwise execute action­if­not­found. If you just want to define a symbol if
the header file is available, consider using AC_CHECK_HEADERS instead.
includes is decoded to determine the appropriate include directives. If omitted or
empty, `configure' will check for both header existence (with the preprocessor) and
usability (with the compiler), using AC_INCLUDES_DEFAULT for the compile test. If
there is a discrepancy between the results, a warning is issued to the user, and the
compiler results are favored (see Section 20.7 [Present But Cannot Be Compiled],
page 336). In general, favoring the compiler results means that a header will be
treated as not found even though the file exists, because you did not provide enough
prerequisites.
Providing a non­empty includes argument allows the code to provide any prerequisites
prior to including the header under test; it is common to use the argument AC_
INCLUDES_DEFAULT (see Section 5.1.2 [Default Includes], page 43). With an explicit

72 Autoconf
fourth argument, no preprocessor test is needed. As a special case, an includes of
exactly `­' triggers the older preprocessor check, which merely determines existence
of the file in the preprocessor search path; this should only be used as a last resort (it
is safer to determine the actual prerequisites and perform a compiler check, or else use
AC_PREPROC_IFELSE to make it obvious that only a preprocessor check is desired).
This macro caches its result in the ac_cv_header_header­file variable, with char­
acters not suitable for a variable name mapped to underscores.
[Macro]
AC_CHECK_HEADERS (header­file. . . , [action­if­found],
[action­if­not­found], [includes])
For each given system header file header­file in the blank­separated argument list
that exists, define HAVE_header­file (in all capitals). If action­if­found is given, it
is additional shell code to execute when one of the header files is found. You can give
it a value of `break' to break out of the loop on the first match. If action­if­not­found
is given, it is executed when one of the header files is not found.
includes is interpreted as in AC_CHECK_HEADER, in order to choose the set of prepro­
cessor directives supplied before the header under test.
This macro caches its result in the ac_cv_header_header­file variable, with char­
acters not suitable for a variable name mapped to underscores.
Previous versions of Autoconf merely checked whether the header was accepted by the
preprocessor. This was changed because the old test was inappropriate for typical uses.
Headers are typically used to compile, not merely to preprocess, and the old behavior
sometimes accepted headers that clashed at compile­time (see Section 20.7 [Present But
Cannot Be Compiled], page 336). If you need to check whether a header is preprocessable,
you can use AC_PREPROC_IFELSE (see Section 6.3 [Running the Preprocessor], page 105).
Actually requiring a header to compile improves the robustness of the test, but it also
requires that you make sure that headers that must be included before the header­file be
part of the includes, (see Section 5.1.2 [Default Includes], page 43). If looking for `bar.h',
which requires that `foo.h' be included before if it exists, we suggest the following scheme:
AC_CHECK_HEADERS([foo.h])
AC_CHECK_HEADERS([bar.h], [], [],
[#ifdef HAVE_FOO_H
# include <foo.h>
#endif
])
The following variant generates smaller, faster configure files if you do not need the
full power of AC_CHECK_HEADERS.
[Macro]
AC_CHECK_HEADERS_ONCE (header­file. . . )
For each given system header file header­file in the blank­separated argument list
that exists, define HAVE_header­file (in all capitals). This is a once­only variant of
AC_CHECK_HEADERS. It generates the checking code at most once, so that configure
is smaller and faster; but the checks cannot be conditionalized and are always done
once, early during the configure run. Thus, this macro is only safe for checking
headers that do not have prerequisites beyond what AC_INCLUDES_DEFAULT provides.

Chapter 5: Existing Tests 73
5.7 Declarations
The following macros check for the declaration of variables and functions. If there is no
macro specifically defined to check for a symbol you need, then you can use the general
macros (see Section 5.7.2 [Generic Declarations], page 73) or, for more complex tests, you
may use AC_COMPILE_IFELSE (see Section 6.4 [Running the Compiler], page 106).
5.7.1 Particular Declaration Checks
There are no specific macros for declarations.
5.7.2 Generic Declaration Checks
These macros are used to find declarations not covered by the ``particular'' test macros.
[Macro]
AC_CHECK_DECL (symbol, [action­if­found], [action­if­not­found],
[includes = `AC_INCLUDES_DEFAULT'])
If symbol (a function, variable, or constant) is not declared in includes and a declara­
tion is needed, run the shell commands action­if­not­found, otherwise action­if­found.
includes is a series of include directives, defaulting to AC_INCLUDES_DEFAULT (see Sec­
tion 5.1.2 [Default Includes], page 43), which are used prior to the declaration under
test.
This macro actually tests whether symbol is defined as a macro or can be used as an
r­value, not whether it is really declared, because it is much safer to avoid introducing
extra declarations when they are not needed. In order to facilitate use of C++ and
overloaded function declarations, it is possible to specify function argument types in
parentheses for types which can be zero­initialized:
AC_CHECK_DECL([basename(char *)])
This macro caches its result in the ac_cv_have_decl_symbol variable, with charac­
ters not suitable for a variable name mapped to underscores.
[Macro]
AC_CHECK_DECLS (symbols, [action­if­found],
[action­if­not­found], [includes = `AC_INCLUDES_DEFAULT'])
For each of the symbols (comma­separated list with optional function argument types
for C++ overloads), define HAVE_DECL_symbol (in all capitals) to `1' if symbol is
declared, otherwise to `0'. If action­if­not­found is given, it is additional shell code to
execute when one of the function declarations is needed, otherwise action­if­found is
executed.
includes is a series of include directives, defaulting to AC_INCLUDES_DEFAULT (see
Section 5.1.2 [Default Includes], page 43), which are used prior to the declarations
under test.
This macro uses an M4 list as first argument:
AC_CHECK_DECLS([strdup])
AC_CHECK_DECLS([strlen])
AC_CHECK_DECLS([malloc, realloc, calloc, free])
AC_CHECK_DECLS([j0], [], [], [[#include <math.h>]])
AC_CHECK_DECLS([[basename(char *)], [dirname(char *)]])

74 Autoconf
Unlike the other `AC_CHECK_*S' macros, when a symbol is not declared, HAVE_DECL_
symbol is defined to `0' instead of leaving HAVE_DECL_symbol undeclared. When you
are sure that the check was performed, use HAVE_DECL_symbol in #if:
#if !HAVE_DECL_SYMBOL
extern char *symbol;
#endif
If the test may have not been performed, however, because it is safer not to declare
a symbol than to use a declaration that conflicts with the system's one, you should
use:
#if defined HAVE_DECL_MALLOC && !HAVE_DECL_MALLOC
void *malloc (size_t *s);
#endif
You fall into the second category only in extreme situations: either your files may be
used without being configured, or they are used during the configuration. In most
cases the traditional approach is enough.
This macro caches its results in ac_cv_have_decl_symbol variables, with characters
not suitable for a variable name mapped to underscores.
[Macro]
AC_CHECK_DECLS_ONCE (symbols)
For each of the symbols (comma­separated list), define HAVE_DECL_symbol (in all
capitals) to `1' if symbol is declared in the default include files, otherwise to `0'. This is
a once­only variant of AC_CHECK_DECLS. It generates the checking code at most once,
so that configure is smaller and faster; but the checks cannot be conditionalized and
are always done once, early during the configure run.
5.8 Structures
The following macros check for the presence of certain members in C structures. If there is
no macro specifically defined to check for a member you need, then you can use the general
structure­member macros (see Section 5.8.2 [Generic Structures], page 75) or, for more
complex tests, you may use AC_COMPILE_IFELSE (see Section 6.4 [Running the Compiler],
page 106).
5.8.1 Particular Structure Checks
The following macros check for certain structures or structure members.
[Macro]
AC_STRUCT_DIRENT_D_INO
Perform all the actions of AC_HEADER_DIRENT (see Section 5.6.2 [Particular Headers],
page 66). Then, if struct dirent contains a d_ino member, define HAVE_STRUCT_
DIRENT_D_INO.
HAVE_STRUCT_DIRENT_D_INO indicates only the presence of d_ino, not whether its
contents are always reliable. Traditionally, a zero d_ino indicated a deleted directory
entry, though current systems hide this detail from the user and never return zero
d_ino values. Many current systems report an incorrect d_ino for a directory entry
that is a mount point.

Chapter 5: Existing Tests 75
[Macro]
AC_STRUCT_DIRENT_D_TYPE
Perform all the actions of AC_HEADER_DIRENT (see Section 5.6.2 [Particular Headers],
page 66). Then, if struct dirent contains a d_type member, define HAVE_STRUCT_
DIRENT_D_TYPE.
[Macro]
AC_STRUCT_ST_BLOCKS
If struct stat contains an st_blocks member, define HAVE_STRUCT_STAT_ST_
BLOCKS. Otherwise, require an AC_LIBOBJ replacement of `fileblocks'. The former
name, HAVE_ST_BLOCKS is to be avoided, as its support will cease in the future.
This macro caches its result in the ac_cv_member_struct_stat_st_blocks variable.
[Macro]
AC_STRUCT_TM
If `time.h' does not define struct tm, define TM_IN_SYS_TIME, which means that
including `sys/time.h' had better define struct tm.
This macro is obsolescent, as `time.h' defines struct tm in current systems. New
programs need not use this macro.
[Macro]
AC_STRUCT_TIMEZONE
Figure out how to get the current timezone. If struct tm has a tm_zone member,
define HAVE_STRUCT_TM_TM_ZONE (and the obsoleted HAVE_TM_ZONE). Otherwise, if
the external array tzname is found, define HAVE_TZNAME; if it is declared, define HAVE_
DECL_TZNAME.
5.8.2 Generic Structure Checks
These macros are used to find structure members not covered by the ``particular'' test
macros.
[Macro]
AC_CHECK_MEMBER (aggregate.member, [action­if­found],
[action­if­not­found], [includes = `AC_INCLUDES_DEFAULT'])
Check whether member is a member of the aggregate aggregate. If no includes are
specified, the default includes are used (see Section 5.1.2 [Default Includes], page 43).
AC_CHECK_MEMBER([struct passwd.pw_gecos], [],
[AC_MSG_ERROR([we need `passwd.pw_gecos'])],
[[#include <pwd.h>]])
You can use this macro for submembers:
AC_CHECK_MEMBER(struct top.middle.bot)
This macro caches its result in the av_cv_member_aggregate_member variable, with
characters not suitable for a variable name mapped to underscores.
[Macro]
AC_CHECK_MEMBERS (members, [action­if­found],
[action­if­not­found], [includes = `AC_INCLUDES_DEFAULT'])
Check for the existence of each `aggregate.member' of members using the previous
macro. When member belongs to aggregate, define HAVE_aggregate_member (in all
capitals, with spaces and dots replaced by underscores). If action­if­found is given,
it is executed for each of the found members. If action­if­not­found is given, it is
executed for each of the members that could not be found.

76 Autoconf
includes is a series of include directives, defaulting to AC_INCLUDES_DEFAULT (see
Section 5.1.2 [Default Includes], page 43), which are used prior to the members under
test.
This macro uses M4 lists:
AC_CHECK_MEMBERS([struct stat.st_rdev, struct stat.st_blksize])
5.9 Types
The following macros check for C types, either builtin or typedefs. If there is no macro
specifically defined to check for a type you need, and you don't need to check for any
special properties of it, then you can use a general type­check macro.
5.9.1 Particular Type Checks
These macros check for particular C types in `sys/types.h', `stdlib.h', `stdint.h',
`inttypes.h' and others, if they exist.
The Gnulib stdint module is an alternate way to define many of these symbols; it
is useful if you prefer your code to assume a C99­or­better environment. See Section 2.2
[Gnulib], page 3.
[Macro]
AC_TYPE_GETGROUPS
Define GETGROUPS_T to be whichever of gid_t or int is the base type of the array
argument to getgroups.
This macro caches the base type in the ac_cv_type_getgroups variable.
[Macro]
AC_TYPE_INT8_T
If `stdint.h' or `inttypes.h' does not define the type int8_t, define int8_t to
a signed integer type that is exactly 8 bits wide and that uses two's complement
representation, if such a type exists. If you are worried about porting to hosts that
lack such a type, you can use the results of this macro in C89­or­later code as follows:
#if HAVE_STDINT_H
# include <stdint.h>
#endif
#if defined INT8_MAX || defined int8_t
code using int8_t
#else
complicated alternative using >8­bit 'signed char'
#endif
This macro caches the type in the ac_cv_c_int8_t variable.
[Macro]
AC_TYPE_INT16_T
This is like AC_TYPE_INT8_T, except for 16­bit integers.
[Macro]
AC_TYPE_INT32_T
This is like AC_TYPE_INT8_T, except for 32­bit integers.
[Macro]
AC_TYPE_INT64_T
This is like AC_TYPE_INT8_T, except for 64­bit integers.

Chapter 5: Existing Tests 77
[Macro]
AC_TYPE_INTMAX_T
If `stdint.h' or `inttypes.h' defines the type intmax_t, define HAVE_INTMAX_T.
Otherwise, define intmax_t to the widest signed integer type.
[Macro]
AC_TYPE_INTPTR_T
If `stdint.h' or `inttypes.h' defines the type intptr_t, define HAVE_INTPTR_T.
Otherwise, define intptr_t to a signed integer type wide enough to hold a pointer,
if such a type exists.
[Macro]
AC_TYPE_LONG_DOUBLE
If the C compiler supports a working long double type, define HAVE_LONG_DOUBLE.
The long double type might have the same range and precision as double.
This macro caches its result in the ac_cv_type_long_double variable.
This macro is obsolescent, as current C compilers support long double. New pro­
grams need not use this macro.
[Macro]
AC_TYPE_LONG_DOUBLE_WIDER
If the C compiler supports a working long double type with more range or precision
than the double type, define HAVE_LONG_DOUBLE_WIDER.
This macro caches its result in the ac_cv_type_long_double_wider variable.
[Macro]
AC_TYPE_LONG_LONG_INT
If the C compiler supports a working long long int type, define HAVE_LONG_LONG_
INT. However, this test does not test long long int values in preprocessor #if
expressions, because too many compilers mishandle such expressions. See Section 13.3
[Preprocessor Arithmetic], page 266.
This macro caches its result in the ac_cv_type_long_long_int variable.
[Macro]
AC_TYPE_MBSTATE_T
Define HAVE_MBSTATE_T if <wchar.h> declares the mbstate_t type. Also, define
mbstate_t to be a type if <wchar.h> does not declare it.
This macro caches its result in the ac_cv_type_mbstate_t variable.
[Macro]
AC_TYPE_MODE_T
Define mode_t to a suitable type, if standard headers do not define it.
This macro caches its result in the ac_cv_type_mode_t variable.
[Macro]
AC_TYPE_OFF_T
Define off_t to a suitable type, if standard headers do not define it.
This macro caches its result in the ac_cv_type_off_t variable.
[Macro]
AC_TYPE_PID_T
Define pid_t to a suitable type, if standard headers do not define it.
This macro caches its result in the ac_cv_type_pid_t variable.
[Macro]
AC_TYPE_SIZE_T
Define size_t to a suitable type, if standard headers do not define it.
This macro caches its result in the ac_cv_type_size_t variable.

78 Autoconf
[Macro]
AC_TYPE_SSIZE_T
Define ssize_t to a suitable type, if standard headers do not define it.
This macro caches its result in the ac_cv_type_ssize_t variable.
[Macro]
AC_TYPE_UID_T
Define uid_t and gid_t to suitable types, if standard headers do not define them.
This macro caches its result in the ac_cv_type_uid_t variable.
[Macro]
AC_TYPE_UINT8_T
If `stdint.h' or `inttypes.h' does not define the type uint8_t, define uint8_t to
an unsigned integer type that is exactly 8 bits wide, if such a type exists. This is like
AC_TYPE_INT8_T, except for unsigned integers.
[Macro]
AC_TYPE_UINT16_T
This is like AC_TYPE_UINT8_T, except for 16­bit integers.
[Macro]
AC_TYPE_UINT32_T
This is like AC_TYPE_UINT8_T, except for 32­bit integers.
[Macro]
AC_TYPE_UINT64_T
This is like AC_TYPE_UINT8_T, except for 64­bit integers.
[Macro]
AC_TYPE_UINTMAX_T
If `stdint.h' or `inttypes.h' defines the type uintmax_t, define HAVE_UINTMAX_T.
Otherwise, define uintmax_t to the widest unsigned integer type.
[Macro]
AC_TYPE_UINTPTR_T
If `stdint.h' or `inttypes.h' defines the type uintptr_t, define HAVE_UINTPTR_
T. Otherwise, define uintptr_t to an unsigned integer type wide enough to hold a
pointer, if such a type exists.
[Macro]
AC_TYPE_UNSIGNED_LONG_LONG_INT
If the C compiler supports a working unsigned long long int type, define HAVE_
UNSIGNED_LONG_LONG_INT. However, this test does not test unsigned long long
int values in preprocessor #if expressions, because too many compilers mishandle
such expressions. See Section 13.3 [Preprocessor Arithmetic], page 266.
This macro caches its result in the ac_cv_type_unsigned_long_long_int variable.
5.9.2 Generic Type Checks
These macros are used to check for types not covered by the ``particular'' test macros.
[Macro]
AC_CHECK_TYPE (type, [action­if­found], [action­if­not­found],
[includes = `AC_INCLUDES_DEFAULT'])
Check whether type is defined. It may be a compiler builtin type or defined by the
includes. includes is a series of include directives, defaulting to AC_INCLUDES_DEFAULT
(see Section 5.1.2 [Default Includes], page 43), which are used prior to the type under
test.
In C, type must be a type­name, so that the expression `sizeof (type)' is valid (but
`sizeof ((type))' is not). The same test is applied when compiling for C++, which

Chapter 5: Existing Tests 79
means that in C++ type should be a type­id and should not be an anonymous `struct'
or `union'.
This macro caches its result in the ac_cv_type_type variable, with `*' mapped to `p'
and other characters not suitable for a variable name mapped to underscores.
[Macro]
AC_CHECK_TYPES (types, [action­if­found], [action­if­not­found],
[includes = `AC_INCLUDES_DEFAULT'])
For each type of the types that is defined, define HAVE_type (in all capitals). Each
type must follow the rules of AC_CHECK_TYPE. If no includes are specified, the default
includes are used (see Section 5.1.2 [Default Includes], page 43). If action­if­found
is given, it is additional shell code to execute when one of the types is found. If
action­if­not­found is given, it is executed when one of the types is not found.
This macro uses M4 lists:
AC_CHECK_TYPES([ptrdiff_t])
AC_CHECK_TYPES([unsigned long long int, uintmax_t])
AC_CHECK_TYPES([float_t], [], [], [[#include <math.h>]])
Autoconf, up to 2.13, used to provide to another version of AC_CHECK_TYPE, broken by
design. In order to keep backward compatibility, a simple heuristic, quite safe but not
totally, is implemented. In case of doubt, read the documentation of the former AC_CHECK_
TYPE, see Section 18.4 [Obsolete Macros], page 297.
5.10 Compilers and Preprocessors
All the tests for compilers (AC_PROG_CC, AC_PROG_CXX, AC_PROG_F77) define the output
variable EXEEXT based on the output of the compiler, typically to the empty string if Posix
and `.exe' if a DOS variant.
They also define the output variable OBJEXT based on the output of the compiler, after
`.c' files have been excluded, typically to `o' if Posix, `obj' if a DOS variant.
If the compiler being used does not produce executables, the tests fail. If the executables
can't be run, and cross­compilation is not enabled, they fail too. See Chapter 14 [Manual
Configuration], page 271, for more on support for cross compiling.
5.10.1 Specific Compiler Characteristics
Some compilers exhibit di#erent behaviors.
Static/Dynamic Expressions
Autoconf relies on a trick to extract one bit of information from the C compiler:
using negative array sizes. For instance the following excerpt of a C source
demonstrates how to test whether `int' objects are 4 bytes wide:
static int test_array[sizeof (int) == 4 ? 1 : ­1];
To our knowledge, there is a single compiler that does not support this trick: the
HP C compilers (the real ones, not only the ``bundled'') on HP­UX 11.00. They
incorrectly reject the above program with the diagnostic ``Variable­length arrays
cannot have static storage.'' This bug comes from HP compilers' mishandling of
sizeof (int), not from the ? 1 : ­1, and Autoconf works around this problem
by casting sizeof (int) to long int before comparing it.

80 Autoconf
5.10.2 Generic Compiler Characteristics
[Macro]
AC_CHECK_SIZEOF (type­or­expr, [unused], [includes =
`AC_INCLUDES_DEFAULT'])
Define SIZEOF_type­or­expr (see Section 5.1.1 [Standard Symbols], page 43) to be
the size in bytes of type­or­expr, which may be either a type or an expression returning
a value that has a size. If the expression `sizeof (type­or­expr)' is invalid, the
result is 0. includes is a series of include directives, defaulting to AC_INCLUDES_
DEFAULT (see Section 5.1.2 [Default Includes], page 43), which are used prior to the
expression under test.
This macro now works even when cross­compiling. The unused argument was used
when cross­compiling.
For example, the call
AC_CHECK_SIZEOF([int *])
defines SIZEOF_INT_P to be 8 on DEC Alpha AXP systems.
This macro caches its result in the ac_cv_sizeof_type­or­expr variable, with `*'
mapped to `p' and other characters not suitable for a variable name mapped to un­
derscores.
[Macro]
AC_CHECK_ALIGNOF (type, [includes = `AC_INCLUDES_DEFAULT'])
Define ALIGNOF_type (see Section 5.1.1 [Standard Symbols], page 43) to be the align­
ment in bytes of type. `type y;' must be valid as a structure member declaration. If
`type' is unknown, the result is 0. If no includes are specified, the default includes
are used (see Section 5.1.2 [Default Includes], page 43).
This macro caches its result in the ac_cv_alignof_type­or­expr variable, with `*'
mapped to `p' and other characters not suitable for a variable name mapped to un­
derscores.
[Macro]
AC_COMPUTE_INT (var, expression, [includes =
`AC_INCLUDES_DEFAULT'], [action­if­fails])
Store into the shell variable var the value of the integer expression. The value should
fit in an initializer in a C variable of type signed long. To support cross compilation
(in which case, the macro only works on hosts that use twos­complement arithmetic),
it should be possible to evaluate the expression at compile­time. If no includes are
specified, the default includes are used (see Section 5.1.2 [Default Includes], page 43).
Execute action­if­fails if the value cannot be determined correctly.
[Macro]
AC_LANG_WERROR
Normally Autoconf ignores warnings generated by the compiler, linker, and prepro­
cessor. If this macro is used, warnings count as fatal errors for the current language.
This macro is useful when the results of configuration are used where warnings are
unacceptable; for instance, if parts of a program are built with the GCC `­Werror' op­
tion. If the whole program is built using `­Werror' it is often simpler to put `­Werror'
in the compiler flags (CFLAGS, etc.).

Chapter 5: Existing Tests 81
[Macro]
AC_OPENMP
OpenMP (http://www.openmp.org/) specifies extensions of C, C++, and Fortran
that simplify optimization of shared memory parallelism, which is a common problem
on multicore CPUs.
If the current language is C, the macro AC_OPENMP sets the variable OPENMP_CFLAGS to
the C compiler flags needed for supporting OpenMP. OPENMP_CFLAGS is set to empty
if the compiler already supports OpenMP, if it has no way to activate OpenMP
support, or if the user rejects OpenMP support by invoking `configure' with the
`­­disable­openmp' option.
OPENMP_CFLAGS needs to be used when compiling programs, when preprocessing pro­
gram source, and when linking programs. Therefore you need to add $(OPENMP_
CFLAGS) to the CFLAGS of C programs that use OpenMP. If you preprocess OpenMP­
specific C code, you also need to add $(OPENMP_CFLAGS) to CPPFLAGS. The presence
of OpenMP support is revealed at compile time by the preprocessor macro _OPENMP.
Linking a program with OPENMP_CFLAGS typically adds one more shared library to the
program's dependencies, so its use is recommended only on programs that actually
require OpenMP.
If the current language is C++, AC_OPENMP sets the variable OPENMP_CXXFLAGS, suit­
ably for the C++ compiler. The same remarks hold as for C.
If the current language is Fortran 77 or Fortran, AC_OPENMP sets the variable OPENMP_
FFLAGS or OPENMP_FCFLAGS, respectively. Similar remarks as for C hold, except that
CPPFLAGS is not used for Fortran, and no preprocessor macro signals OpenMP sup­
port.
For portability, it is best to avoid spaces between `#' and `pragma omp'. That is, write
`#pragma omp', not `# pragma omp'. The Sun WorkShop 6.2 C compiler chokes on the
latter.
5.10.3 C Compiler Characteristics
The following macros provide ways to find and exercise a C Compiler. There are a few
constructs that ought to be avoided, but do not deserve being checked for, since they can
easily be worked around.
Don't use lines containing solitary backslashes
They tickle a bug in the HP­UX C compiler (checked on HP­UX 10.20, 11.00,
and 11i). When given the following source:
#ifdef __STDC__
/\
* A comment with backslash­newlines in it. %{ %} *\
\
/
char str[] = "\\
" A string with backslash­newlines in it %{ %} \\
"";
char apostrophe = '\\
\
'\

82 Autoconf
';
#endif
the compiler incorrectly fails with the diagnostics ``Non­terminating comment
at end of file'' and ``Missing `#endif' at end of file.'' Removing the lines with
solitary backslashes solves the problem.
Don't compile several files at once if output matters to you
Some compilers, such as HP's, report names of files being compiled when given
more than one file operand. For instance:
$ cc a.c b.c
a.c:
b.c:
This can cause problems if you observe the output of the compiler to detect fail­
ures. Invoking `cc ­c a.c && cc ­c b.c && cc ­o c a.o b.o' solves the issue.
Don't rely on #error failing
The IRIX C compiler does not fail when #error is preprocessed; it simply
emits a diagnostic and continues, exiting successfully. So, instead of an error
directive like #error "Unsupported word size" it is more portable to use an
invalid directive like #Unsupported word size in Autoconf tests. In ordinary
source code, #error is OK, since installers with inadequate compilers like IRIX
can simply examine these compilers' diagnostic output.
Don't rely on correct #line support
On Solaris, c89 (at least Sun C 5.3 through 5.8) diagnoses #line directives
whose line numbers are greater than 32767. Nothing in Posix makes this invalid.
That is why Autoconf stopped issuing #line directives.
[Macro]
AC_PROG_CC ([compiler­search­list])
Determine a C compiler to use. If CC is not already set in the environment, check for
gcc and cc, then for other C compilers. Set output variable CC to the name of the
compiler found.
This macro may, however, be invoked with an optional first argument which, if spec­
ified, must be a blank­separated list of C compilers to search for. This just gives
the user an opportunity to specify an alternative search list for the C compiler. For
example, if you didn't like the default order, then you could invoke AC_PROG_CC like
this:
AC_PROG_CC([gcc cl cc])
If the C compiler does not handle function prototypes correctly by default, try to add
an option to output variable CC to make it so. This macro tries various options that
select standard­conformance modes on various systems.
After calling this macro you can check whether the C compiler has been set to accept
ANSI C89 (ISO C90); if not, the shell variable ac_cv_prog_cc_c89 is set to `no'. See
also AC_C_PROTOTYPES below.
If using the GNU C compiler, set shell variable GCC to `yes'. If output variable CFLAGS
was not already set, set it to `­g ­O2' for the GNU C compiler (`­O2' on systems where
GCC does not accept `­g'), or `­g' for other compilers. If your package does not like

Chapter 5: Existing Tests 83
this default, then it is acceptable to insert the line `: ${CFLAGS=""}' after AC_INIT
and before AC_PROG_CC to select an empty default instead.
Many Autoconf macros use a compiler, and thus call `AC_REQUIRE([AC_PROG_CC])'
to ensure that the compiler has been determined before the body of the outermost
AC_DEFUN macro. Although AC_PROG_CC is safe to directly expand multiple times, it
performs certain checks (such as the proper value of EXEEXT) only on the first invo­
cation. Therefore, care must be used when invoking this macro from within another
macro rather than at the top level (see Section 20.8 [Expanded Before Required],
page 338).
[Macro]
AC_PROG_CC_C_O
If the C compiler does not accept the `­c' and `­o' options simultaneously, define
NO_MINUS_C_MINUS_O. This macro actually tests both the compiler found by AC_
PROG_CC, and, if di#erent, the first cc in the path. The test fails if one fails. This
macro was created for GNU Make to choose the default C compilation rule.
For the compiler compiler, this macro caches its result in the ac_cv_prog_cc_
compiler_c_o variable.
[Macro]
AC_PROG_CPP
Set output variable CPP to a command that runs the C preprocessor. If `$CC ­E'
doesn't work, `/lib/cpp' is used. It is only portable to run CPP on files with a `.c'
extension.
Some preprocessors don't indicate missing include files by the error status. For such
preprocessors an internal variable is set that causes other macros to check the standard
error from the preprocessor and consider the test failed if any warnings have been
reported. For most preprocessors, though, warnings do not cause include­file tests to
fail unless AC_PROG_CPP_WERROR is also specified.
[Macro]
AC_PROG_CPP_WERROR
This acts like AC_PROG_CPP, except it treats warnings from the preprocessor as errors
even if the preprocessor exit status indicates success. This is useful for avoiding
headers that generate mandatory warnings, such as deprecation notices.
The following macros check for C compiler or machine architecture features. To check
for characteristics not listed here, use AC_COMPILE_IFELSE (see Section 6.4 [Running the
Compiler], page 106) or AC_RUN_IFELSE (see Section 6.6 [Runtime], page 107).
[Macro]
AC_PROG_CC_STDC
If the C compiler cannot compile ISO Standard C (currently C99), try to add an
option to output variable CC to make it work. If the compiler does not support C99,
fall back to supporting ANSI C89 (ISO C90).
After calling this macro you can check whether thâI2|éëÃtuêP>ü.¦ÖG§öÀ¨lôØ5§3ÔÆáÒ¯eY÷õpnf"/ÎîùóáÇOhhãQòcÏ«DTZDeçÅ:ÿølÿ>QTüQ`ÿ²Áú-_þó¤MÐ¤M:hûOåÚläå:e²EB¶Ï²Átß8åíÀþ?P¸*8wÃgiªÍèræ§·ßnXRÚ²æ,ç8;#Ôá¥>o¹Gm`µ=¯~+OhaÛÛ©Ù8W6ì±údo3Ï¢ïçÑ*ç3ì+(9ä)ÂEä¶aúC_¶¨oJ\2TÕu5o<­- ¹ÒX¥´æó´õ +Të&²àøñã×Ìd*¼g05
)Üè4¾V8dmü=²©¤ÊÆÙÈkqK¡
Iï¬I!U7ÔÖt=ª/9Ùõ{·J(½U'ÃJÙ÷ÕoàújNXaH)¨3ÀyîJ@À	/
_ÀÀMP¯xü¾Ú³}¾L&E,{V05ÏÕÌvù³ømÙ5pÉÖ½Ü5L|A8²Û»ÆP[,¸kkdrøm1Âu&¯9ÿa¡Sn=Ùê8âëÌRN£°¥Õïd÷SÁ\ËæKÚï;ÂÐò`]âÃ¼ÒFÀìAd8ñg³êKÝWÃ®¯Åîö>5¼öÇû&ÝàRj*	2tãÜÅ ³Eäç^\'{Ù<¹2þ2­¤@cð¥ÖÉW¼ò:ÑDHSé&À+©âõwz% Gj®	³).xêJFNí3xë(ÃÎãÔ¤³çÛ8[\Ï°)AóJØ3dS"ùh}vyÖ¼ìÊ¦©öálÞ¾(ù6k±O µð%­ÏÕèÓ¹Hüªõ(C!\ü6×o|ÏºTL^nþòPÚAáÃW¯nÍ¨,ÔÄ¡<­÷B·k/xÆ)3RØ÷°¶IVoX÷içsÙåc?¨s?Ê¤©3t|o§³ÄÃËP	¨d|ÒN±¡©4Ö[§Þ×»÷¶>aïøª`@]Ôi ®äë.J±<%?BÞó^°(»õ]ÙRñZRÇÆÌ@O5õmsG'9åñº<¬Ú~n.qp	,A©.@-§fåB	xåI>äó§\I¦'±5ùj¦þ¬ÅGEEåàøÍ-??ù>çÛMnùjÄXÊmÏØ¥­	zmÿÖ|½¥¢>yc<ç¸ºÉÎÅ/®½ëÔÐ`jû=§øÍÕ4ç®µR:âò¤rî7±ÕÒë	¬~:8à¢!'¬3©Ù¶~bZ7ëêEY'î	»©G¬~å¼éºÌ³cîúÑÔá  n¼?/6ÕÜZ¥àÚ×=ä]ÿ^Ò©Ô»«Ù !6»Kß{½nQ öJ@
Ô©pE=;
0ÿBxãBºåòÚ) dÙWÁcóX-u³?~p¹ygÞvþOÉÃ_0Åñ}ÃczQPGÎ¥£Db¿g­¸eËaz±?Õl~«9qÞk_yñ_]¹bË¨`ó7({B½®$´;RùËg\	Y*Ú5µØÚçCÕO5 ¯j0Ëe±õJWWÍ3S[L3oaZ7xÙphç)lC¼,ôh:¡þÖ,uQ%²g8+C½G±%*³ëð¼ä¿»þDl ûqó}æd-]¸a·­(Îå¶»r^]d3"~ñjå\òðáõ¸¦}K©¥ÈÌÈ8ìSÀ#NèNÜÜf²Loí·*dr8õz^,§ìTÖÇ"ß'!]>Bª¹¯Á¹¾S áß= ûzÀôáRÇõ§ËítÕN
äîª»>b5È8¡§ìW?¦¤ö2`4?(ÀÚ3¥Êg¯
;¥ov¬¬ÔÝêØæù­@m=°PÏê
ÙUø²Ôv~¤â ¶:Ê¤£0&}Ñ¦²ýG=ÐÑ ^aòÙÜ¢Þ{F¿5È®kÀ¤È·©õ#'ëÏTÛ\xà_ªãLÊ&+C5M°Ïvr^ÁNËUÍaVÝúÜû&Ü+Åß¤sY¼^0*ü¡ónÅ]wbFCaü©·x:Õc+ DZ~D¡(í»IúrÄXÉ]ÇM¡
Hz­yLvï];uu8
SC²TSðÀ]â[©ü:NÕìq¶oa°1½{ùL»¢UÌ½ãÉ [òÜò»ÿx`Ü;~.	~M#y¹wsHl°<¤WÀ,ÑQ%6N2³vñS¤k;	'¾bÞ×È	Ä½1oÎLuQøiÂGg?ô6$	ÿ&ç/£%¾^dàäô¹±W@0ú9¨Ë^nÌPHJZùµùíXÎ?F©èÇf8Éª²=T{ô÷·ËaT~0D¹	1uî:vó_ÏlçkÅý/èÑ1zó§'
+.òÿw©
endstream
endobj
1520 0 obj <<
/Type /Page
/Contents 1521 0 R
/Resources 1519 0 R
/MediaBox [0 0 595.276 841.89]
/Parent 1510 0 R
/Annots [ 1515 0 R 1522 0 R 1516 0 R 1523 0 R 1517 0 R ]
>> endobj
1515 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [398.44 446.745 525.543 457.654]
/A << /S /GoTo /D (Branching and merging) >>
>> endobj
1522 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [72 433.594 156.776 444.503]
/A << /S /GoTo /D (Branching and merging) >>
>> endobj
1516 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [401.599 433.594 525.543 444.503]
/A << /S /GoTo /D (Branches and revisions) >>
>> endobj
1523 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [72 420.443 159.121 431.352]
/A << /S /GoTo /D (Branches and revisions) >>
>> endobj
1517 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [343.964 139.761 470.134 150.67]
/A << /S /GoTo /D (Tags) >>
>> endobj
47 0 obj <<
/D [1520 0 R /XYZ 72 769.89 null]
>> endobj
582 0 obj <<
/D [1520 0 R /XYZ 72 769.89 null]
>> endobj
586 0 obj <<
/D [1520 0 R /XYZ 72 608.99 null]
>> endobj
590 0 obj <<
/D [1520 0 R /XYZ 72 406.811 null]
>> endobj
594 0 obj <<
/D [1520 0 R /XYZ 72 304.127 null]
>> endobj
1519 0 obj <<
/Font << /F51 5 0 R /F72 4 0 R /F57 6 0 R /F52 13 0 R /F55 1284 0 R >>
/ProcSet [ /PDF /Text ]
>> endobj
1527 0 obj <<
/Length 2807      
/Filter /FlateDecode
>>
stream
xÚ¥ÛnÛÊñ=_á¡ æK.i ¹ôô¡j7@2-H¤ìíÇwnK®äU¢1îevvfvîRW1ü©+\"Ô\Õû7±¬~£d@è@¼¿sóK¦®Tq©®î\÷ë«/A¯ÂD%&	>|¾û÷¾«ÃÐt«¤¦U¦iðyU¤A3mß¼r÷<NÍÇ:xTJ"®¾ÞÿùÍ§û,É¢L§¯Ðk¡^!ºÈ£Rk =âL3áé§HÏ5Ð©m5ÉdK«i ,à¸GF¾ÁJ,ðÆ3.õGð5AS¯B´èá7ÚiËðÿDÖ¢Ä¥H&2.p ²4+0oÝè'	i<ÙUÃ©D>ªW+z!«ùÑSÛmxkh[|Þ#¸S#$ë
XGªÈ®BF
h$zîIfiíx-þ.xqF1¿5]Î°ù"F©«®ë'òÊ+UT&Eý(ªT÷û}+A´¦¢Ô'ÍREq93ZZÁ¯Bñ	5O8©Î©çï¾jy¿´26+UµYÀ¯*DV|ÛÐìjlæÔ¤ãï¡C»fCìuM³æ]ßãØð âÏ·¡êj<²åùoqMsnG9*³â*/ËÈd)H6;²P¡æ±£sdÄÜmuPí?_ÞÏÔ²Ýp´o¬~¾ÕF8Ó/½*¢Ä(z¨W¨?GFÔØTÄê®ô<ÕyÐ 9cMÈä%ëH¯Â,OûU	¦µÿu÷¼_¥	ZüßïZð©YL`ô©bÚQß+¬% ` Ò 'yDW2OéE[<Ö9ò©]Ë*è¨.>ÈBÿÀ+àÙZy¥á:´°¸þA­ck¥m°Ëõ'ó²Úìêl¬EwÙ2Ä"ZJ|êNÄF,]5Ä¬±Ì¦ÂyaÖ¢HZ°·ãÛð øCO2[ëI¸þØXÝZä·, ù&k)Y!?¨918)]ïäyõÜy:M[¡Íq.çî3cI3åIy*µ}»ÙZ?éM®êÈ¢`NÞÉ°w4Ú=)ØÈû"ÜÙÅaÓñ]ÖyÁú0_çÁ;ÁP	|ó£ÚvÚtVc¿Ç[
z3¼|kÉêC-ãßb¥w`0¦xc_}·Ow<øÞ@ë(Ñï°J ¾øqn³(ç°nMO-½0xèw»´U%=yµÔ¯¯·¾8¦yThydá®n#ðyÇ@M¢|¨{¤ôA´ë¦H$ Ôkdõ 1¢ä¼s3ºjÝ>< :_kÖíäÂ)ÿµõþà°mØLH/Ý5?\°wî«\ÀuÚÝFÏÕ
Y.Oðá`òKÎ#/0Ë!Ëa5Ì£%²|Nv¦jsAUÍ>!°¶çïf0«ø3>;ÞE,wÕ¾9=]1±u3HºkÚÃ{ÁÌ¦B3çä»t76g:Mâ Pdclp°âÍs`8¥>þTÊØ®¬ÚÈ=¯]|G±ï§j:z}HZD*×/¯E|p&c´Àaw _°RÌÔ,:mEÇÛrä,	fOÛvÎõ´¼­8à1XÆ&Dhø¤ÁoÃ uÛÐf-²ÙM®}Ã ¨#ÃrñasAJ%Ðã¬f£;¬õÅ§®Î¶wÍÄù$¡Yó"*×/äãæå}°ÆH`°ë@çìó\@ÐnÚÉNüÅHã9Ô>ÉÀÌåÝ[Á6âEê(Ng¬¿¿3,ô°Æl\ '?¡¯s3Ê÷ïî>y}MeÅ2XT@Z-@úôî£×Mj^êÓwäLJÒ±Øk­yåÔ%O­×Ä¬
ZO  glÌ+Ô*	E¤â×oAÃÂoóC©,%bµHÓq:Z­yÀÐ5S¬¼-ÈhQµ!ªÞG~P£¾F~ Ðì{Úà´½ ò²uâ\2vØ(3¢~}ÍÉ9I%ãÉ7Û>1:·`&=ùÍuzÑÏ	fÄ	!e÷I9·3âa&àaÕU»~ÓGËÜ,å³^B©Ïk*AO/«þòê<Ê¥q-IfÏIíRgõíÚ67:]m=#î¶ªz:.!¶rÍh[6P_ãMFÞ¢Âèø¼Ï91;¬Å\3õhv¸	I}#Ûìu¹¶àóà)5àU°Ôü®1ÓEÏ»æU{ªíàÜ¾ZÐÇ±oyVü¨liêè¼Í`ä%Fò	@ý·ª=O$Mr¶¥H²ñÅÍ¥,¢¤'~!	¬SAÚØwrbo7Vn("\*Aÿ2_$^Æ&L° â]E´{°¶Ý3ÃI#ÑüAÖl;ÑxÆ$í,õË m°¿%Ó²øÌñ»W¤:äZ2Kå9ÔÆé«¹8q5 )îË"^üT©lEúÂUk7Ñ¼ì©³Å*(i@m>îÈJ[1òÌdÃÆa#z
øâ¸1PW¦=*,½« V8±/Ï¹ØmS&@é*íõÝØ=Ïâ?
Ç1ä9kqIY	º9/uÛgQZDÔ½xïÄSN+§õÍ±G.Îñô¶¼oUüa/©(Àû<x®#£3Gá	ê4Ê©¼ÏjW;Ôïþ×À_(|£.UQzÊÒìõñh¬èÃÞ2ÝÙÁã
~é×ôc½¶
øWqÚ¸!o2ÌÜf }zù¡¤Æ6]Â¿¡Òòí·èû½Ý=c´u±ãÍ}¦³¾±ÆÌ31rK]o:`¾ñ92¢çòÂñþ<ü"}¥OuÎw¸J/-oü­"{ÑóÆ¶PÅ1É·
0íçÈN{Þp:
£OÓª'R9QC²-åfPøItä½¹kåW²Rô8ø®×2à&úõ¹ ¥)±¥¶\IQÙòcLÚq<6ëËÙBKQ pÔgì{ïìN
¬xí~xÆè.<üú»ôëôyq`°
²!Ï@
9ÌÓ2@îlw¹)gæKüqªHk5ßªú{Ó­£ÚU-ï­ík¢XÆÈÛ¼L ìT[þ°Â_aù9Ðsâ 2£05ON9/âïæüiÍÐ8|üoøüÿÿ>²~iwÍíùíÜ½#
eóïpêÃ5¤d*Ì/ÕgNºn¥Í«ð&ðYpÊH>ÒÏÌàõÅJß¦åmlgeém`þíÃ,7P¿s¹áæxú~ºyîûõs×ÜLõÍÌÑõ£ïÝÔÖßõ}µ¹¾Ñ-wí¢ñ<{ê#ÈÃRsñç¶¿Ð÷¢lüó£èMÿ&·
endstream
endobj
1526 0 obj <<
/Type /Page
/Contents 1527 0 R
/Resources 1525 0 R
/MediaBox [0 0 595.276 841.89]
/Parent 1510 0 R
/Annots [ 1518 0 R 1524 0 R 1528 0 R ]
>> endobj
1518 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [307.958 697.026 518.271 707.935]
/A << /S /GoTo /D (Branching and merging) >>
>> endobj
1524 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [418.154 270.195 525.543 281.105]
/A << /S /GoTo /D (taginfo) >>
>> endobj
1528 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [72 257.045 113.818 267.954]
/A << /S /GoTo /D (taginfo) >>
>> endobj
196 0 obj <<
/D [1526 0 R /XYZ 72 769.89 null]
>> endobj
598 0 obj <<
/D [1526 0 R /XYZ 72 684.197 null]
>> endobj
1525 0 obj <<
/Font << /F51 5 0 R /F52 13 0 R /F72 4 0 R /F57 6 0 R >>
/ProcSet [ /PDF /Text ]
>> endobj
1535 0 obj <<
/Length 2461      
/Filter /FlateDecode
>>
stream
xÚXëÛ¸ÿ¿Â(
TD©·Ò~Ù»Þ-Ð/·ErÀqmÚV=6Ùÿ¾ó¢,kµÙÀÅÇp8CÎüff£ág6y´ÉXq¾ÙÞi}|g¤A8£øéþÝÇ_S³1Zº4ûýÅýnó9øùhÏënÂ8äÓM$ið{ªúªmz6qq~óûý¿Þýr?mF©Jøy<ÕK¡¢¹P&U®.S:MX²_¾UýP5äÜÛCÿ	ØD®Û&Vt#ÚÎÕ¡ÐÄ_tª;Ñá¯7*QG¦¥Êr2.TfÌñ×"Z<?Ûöt®Ýà¸×§í¹Óîù;ýìssÁ`¿M¼õµâ%lYæpX´éö©çìaMÒ¸ðkTÍ¶wtHW»?Ý¤Y`»ª{Ùþ<à}Ê24sË;MJ­â2Údy¢².¶§ÉÙzªpF¶bhKf$öíù|Â±¸&¤»S0³ùmîªo|?á'	>ÿÎò	ÿÚGÖfþÏÝïâ|c{pÜ1±YjéÌl²ì Ì^±VOÎÈV4[2#ëcâL¯T-s÷G×¡lyT={WïÚ·;gû¶áöÐÊ×¸aùóEt¬=Æ³kk7«ÀÊ³,¸åáSë÷=yÞc¿âåfu-#GwÙ·v½(¨2Iä®XµáhÀÁN¸ë0¢{$|O-]øn¬A|úZG¥}°ÑÛL08ä÷Cgw¨¶<- |ið<®øíÜÎ»º={"OÔÕÞÛçmí>RúÚôúqÄG¶$+îøõènY ¼Ks<V	ÕÉîZóò¨PÅµEüAü¤46ÈL¨¹£Ö$¯ù4aãaÊëEb<õoûèöUíÖØ
ÉÝ>ºf§¶ß¡ÙuÕë$Wû®m·Øm×{6/ ùå!¦ÿï!gÂ; Á	§|Î©ÐJGÅ`W¶¢ÈYæº«:·ZBxè-à·;Þ¤}2@áAäpëÀüó¹®,cF+ØßÊd++ÐIêÅkÔàËÕ¸"¶.	FDëf¹ÄÆíØõ¸È3F"3,	°°¤à3wúñXø²R³-s>9ÙÙ:rR"0Ì0ØsÇ8`á'ÏËMåªâ×ÂP3²µð³`¶Hv@ºL"NßÜD?ÿ6Úùü;ZÔé©ÜÀSüàéËØc³d¤!ýz%öU8#[=f{|fJDJ¢ág #Ë.©ÇÑmÛqXsT«¢¼ø²¦ÎÝ"ÉR{è±¦öÆTÁ«)h ÉÙÂnmG =Í__éìYXÏN@ÆnGGBæn]GöH#2æp8jù(#©H§×q	g õhpº`#êsûdÉzd<¾7¹E¾hb bgäö} éÛ±Ûzâm3ÖÜÏü½%`Ì£Òj!Tà|â%¯^¤<±¿aûê¥ÓI¼$NxÙmuò¡³áiöã0vîÓªá$*¿G'+¦ØÖË :ühÀ¹?Ò­j¹]øBµkÊ¡`ÏÅÌBÞc­£q@Â=÷íÉµãÎ¶¶ÕI¸È5RóBg¿åÏÃxðÌäe·QÑ|( âv¶iÚa-öb0¡Hûjt;p»j®&¡è»Î1K2D×]òð-4¦hÃÙOçÇù?*¨@À"&È[÷­!£Þqîù3óAï5¹öIBÄÕ~§¤ÎC7&M"2SdçÓ
a°,}>»Ú)ã²4Ýs.ÖP3²µàµ`Fx±·òÚÜªR	äÇ¥Ä¿.Hx}iî+A\Yì#WZF§/BÎT>65Ü«eP3²µÐµ`&eS<ÄÄë%=ÚVûg¶0\E¤ÎÔ~;\a@Ç
ÿñJTL)*ÿèÄ\	ÍÓyæ[íy¼0|¢[ÌvTgÉ,ê¯ÔaòJÍknæ¬Ì±¹wâÌ´%LB1ÆNô,ký_eê¥ùF!#jÚôóõTálµ@¾fvm¾ôÐ¤J)íï®Ä¤òm3lÈ½8ÎK%ñ\àÓôTo¼d6¯è£Ò²¼3±Wcfå'Å~c|n¸1Ðó
.P¦¹¦!f7¯vaìäUóÈMË¦ÀN>g6±°ýjT/Æ¹ÿi5ûSù¥²"ÃØ]J.|Åó[@Ð®£Rà+V	a÷Øµãá¶¤G;YH|¾qÍ¿ÓCGCÇCO=ÂnÍÒ5&?Oø/Ð­WßY¡¾¯aÑjJHï|{|4ÛG;=BÉHz4^AJÒàÐ¾­ëÎMü:òêºþà3Úòa	y`æ)µ£Y;µY;õiA)bfd À ½¾Òð a÷hÐû[ø>ûÛ¬¥FEDC{â-£u2ÁêÊXX1qúGÜxÆÎkøq\IfªiùKdf#¸¸ÐÊf3¡ F¥³­ù%º,äÎVóK ã^ÀÈ­<LÅINù"·$=%cIæs÷±§GkÕ,"F<Yóû5aJOÀöÜù×~Øm¾óÂØÃÁíÐs¸qfDp(x7ñV¸[& TÜIñ\«¤È®®ÍfVÃñ¾äVÐ`¢	»s¼!27ó5¬·'w£¤.LÇ	n±sñQ[m³àÆJ|@ðÑgn5ûæ÷U]z|Ö@8x%P·ÃéµBûVRXbÑò·æl¸}d\&È~{Ùèèg¼vkPYâëuùf8à´¯àÉ×¸E*/ï2$vVVú+C)-Ý;,ËèË!IòÇ* vuÌ¢+?Í®E=RpÁÖªúUÐ¥o©iö>ëÖWMSõ5 NÚITW³(p4ý2Î¨
endstream
endobj
1534 0 obj <<
/Type /Page
/Contents 1535 0 R
/Resources 1533 0 R
/MediaBox [0 0 595.276 841.89]
/Parent 1510 0 R
/Annots [ 1529 0 R 1537 0 R 1530 0 R 1538 0 R 1531 0 R 1539 0 R 1532 0 R ]
>> endobj
1529 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [490.392 672.223 525.543 682.223]
/A << /S /GoTo /D (Invoking CVS) >>
>> endobj
1537 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [72 658.769 223.061 669.678]
/A << /S /GoTo /D (Invoking CVS) >>
>> endobj
1530 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [477.039 465.095 525.543 476.004]
/A << /S /GoTo /D (Recursive behavior) >>
>> endobj
1538 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [72 451.945 211.364 462.854]
/A << /S /GoTo /D (Recursive behavior) >>
>> endobj
1531 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [462.909 312.675 525.543 322.372]
/A << /S /GoTo /D (checkout options) >>
>> endobj
1539 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [72 298.919 206.855 309.828]
/A << /S /GoTo /D (checkout options) >>
>> endobj
1532 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [221.909 285.768 379.243 296.677]
/A << /S /GoTo /D (Sticky tags) >>
>> endobj
1536 0 obj <<
/D [1534 0 R /XYZ 72 769.89 null]
>> endobj
1533 0 obj <<
/Font << /F51 5 0 R /F52 13 0 R /F57 6 0 R >>
/ProcSet [ /PDF /Text ]
>> endobj
1544 0 obj <<
/Length 2936      
/Filter /FlateDecode
>>
stream
xÚÙnäÆñ}¿be,¹ì×&/Î:ñÃ
~Y/j£!vTHÖòñ©«ä¨Ç#=LÕÕÕuWQmRøWBoÒ$¥)6ÛÓTV¿¼Q2 ^@üõöÍ»ï3µQiR¥ÚÜî(nwO)ob­t¡£?}üï¾Û¡éntM7±1&úé¦4Q3mß¼òñimô¨¥en>ßþãÍßn=)ÎÌèuPÏÖK¢Í\@|¤eÊ÷í±Q7±ÊÆz16±]3$sS©$7ù&l&UA{é&V&Q_Ö´Û,)Uy¹	÷ë\g0Âu
×ü®ýÈúì&K£wWù&?¸I~3ùuëêdF?§Y
+7ÈÝè/~ôÏ¾ÿÂ£C34á;àyIÄäËY?+cYs§Ã*× 2Eb3s¸ÿî{PAecs²EíKÒb¸ªÔk6Îr}| 5ÓQ³m÷Omw`ñ×C=ñhêå·­ýÐdéÐô è/þø®íÔOLÎÚ>ðm¨tÅÜ"©¨ùµ>=iFmÇÓAæ±íÏ#/¬·vÍ	gê©í¾ýA&wÉ©'^Úâ3pA°|E¬ot=r¨ç3[Ü9À~ú±	èë¡e x~f"$Õ3LE&ÀóÔDÿªOÍñ	­þ-nÑpî:æÂáÛÊDµBÏájºsû(¾%`³UI)ÝNu·ã¾¶Ó¡?O<©ûóIÜÑÈnëó¬d¤ÅÊMER7YÐ¸:¶&K¬Z+'q4xl <³X`°àNüÄi=/6[Ò7;Þ ×àôfyål	7²âÂ¬¬ P¡ªè{÷b¾t
¦­»x×?àOBlÿ;$ÐÂ$¹ç]½ýÒt»dbhm­ýãä§ÚÀnTäß4¿¹Â0­c¢ÇÏÀù¾Z[às»~ë4ÿ]ú!&Ôè*ñ40àÚèc£GDI[ê§F²Ó¢QÃ`W;òoýðplñÁ´x:5»ÜØ"ëùØül\%÷KðCÏÍ8ùýç ÷lÝV(ïÒõ/[/ÐÏ ÎÃZÍ?§Ê¢Ù¢râ^ox¿gJpâ|¬ÐîíL$¡¤Ã;ÓâþîÇÕF0?aðÏ®:y&v8ÂLp5jMÀ×!sP*§~éßÐuµSÐ,ÊåúÃ¡îÆ=1¯f¥õÕË¶5Ç:àÒ+B§x$-»J=T&y *K¶ô#ñÌDb·ÓÖGÖ/çáa Í"ÁÂ¼ùr¸þÂ8w}í¶è!¡° @Ñýõa!3Þ/Td$t$°#È7"aôAã8È5*¤¥]Ùöy¨3Ø«*À3wqìÃª\\(¬Îªt*&g{>P #2Å*R Sí¯*XÒ·Ä©ÁèÈ°e¹ ¤7:Rú/²¹|ïÏÝSö¯±©òg%±ü}Ï{'8!³ª}I +¤ðKïy$«kwµ÷L îäÝ8>µãT;¢0Å°
ü§ó<w%\áèdò2©O â``Rà³e`B¼ýØ¿#;Ëª*.¢(rýÌyo.¹¬  X`¹²ÆlYsîkÌÞ'^]« n¯ýÞEÞS¡²JLñB¤Ó
Ò¥ÊICbîØGÓ'~ItÚ
yzá#Í¾w/jå0ph¼Q dàU¥jíÁþÈÅ¹PôÄ~æ§±)ÿòÐ{Í)M[8öÂvzt'Õã'OG}kvåm?ä:3ñ	Ð£aèÁ²o!Æý!\AêÈ¸ê(ÿÿª£;,¤
ª')HÅæþVYTÎeQÈÛëÄÏká·*qQ2ø"À^kJ÷ÊË\k¢ÐsþÙ¢~6p/ÒÙ
,LXm1þ=VÍnuËz^:­æ	ºÞSÉ¾!¯²ºtH¸.TtÄð5ñØñnSIQs¼Æ9P¹r®}ä;Ø±£ã}þ
9és>âî¶gÿ>Z¸<i=åÿ9bÙézþA aáNüÃ"1wçÔ\N^å+KÌmÑNA!á9rüÃîN÷,%Ã²6¬.¾gÛ<Ñ¤*k×.«û
qá¸ü+üÊHypC;¥«8ekBPªËªUqRq«\eW`ñæ²gq=É6ºL£slÌikÑ1cxhò­ÑS?úPñ-¶W¬OÀèØâÁÅØQ/uXðù-³ú¡¾$´ÒÄ«LCÁXlt±¯È®4üT¼ <à#Dü­?ø¨É¡5ãvh]7´rþ|
Z\lbàN§ñwZ®ÉJp$fG2¹5ÁËÕ[L¯ÈÏI¼N¥óÍvÕn]Tw°ÛIö>dp8jç¢³OH!o)^"NÃcç8Ì]Zà:6Hµñ#û`é½CöcG«ÖÑÙUÄÍG^å4GÒPáÜN¥eRäsn÷Ý«r;ÄË=+h58Òó'^RÂ6_Ò²8¼£ëy÷TOãKC¯Ú\Ý÷çn÷»IfF°cÌò$Ïòµõ9%1¤$ÈÏkbØUwãÔÔ»µÞ·÷]?pr°T@Î¿®¡»VáeÃÕZ¢àsçÑ§÷AD+Ö/Ô÷Rªðõç`ÿ0eùºãÐjã´Ï¬ÛÇ÷$0Pûqç	«,!»S%²À>gÁ¥Ý©'¼H ¶[UÙEjuêKÆÉbM3`åFÍíÀEfuú5ÄË{j	E	E{µVÝ»¡î|ÓÙRÛZCzîÖ<R8
Ãôîm9Ã,Ð8ÉRnÊW9Ú5&¾©ùÊQJë¨çäP¾lU¿Ö¯BxM1¾HLC­ëDB\ò/ÀBqþÙ:Òã¾å.Üáa\HÉò«Xo}¬7X¯³*© R¶JÀ\õ*^qlLp²0	¼k¯ÕXðúFT*n+=l
ÚqìÝHÂçüá&åþ.ø§°2·eÒ¹í_rÉ¿¨MoÙÎÜxÃUvP¿>I|%Ë/l,ÜIfCýùâ.®tYò´|E ~ú¼ºB¤MÊÔ	gx4o$»ÀïUYýÀB"wBÍ¨f*¤÷M=¥·s·þ0ôwõµYòRJX:Gñauqæ	©èpiË©À#¾-[.¡À`Óõ7àvôIÜt3Y¥G»4×³¯¿ÊÑå×?÷GéÍô3zÜÕRãêÈ÷×;é×äA%ÕèÜfãK³EÏ³ó¹çh#þdÕ¥óPËwrº#µø°¡ÄètõD­>öÈák%½ëÔ5Óè¾å ä×÷ïÐ©WGb¨Ö97Dç TÜ7]3¸zêº¦ê&T_æ{@þsôr÷Ä$..z·î+Aóë¶q,íýÁ'H-"ÝÖ^[Üçp_.+%,jè@?nà_ú2qk.ÛnSþúÎ¬Ê
endstream
endobj
1543 0 obj <<
/Type /Page
/Contents 1544 0 R
/Resources 1542 0 R
/MediaBox [0 0 595.276 841.89]
/Parent 1510 0 R
/Annots [ 1540 0 R 1545 0 R 1541 0 R 1546 0 R ]
>> endobj
1540 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [417.5 277.598 525.543 288.508]
/A << /S /GoTo /D (Common options) >>
>> endobj
1545 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [72 264.448 152.667 275.357]
/A << /S /GoTo /D (Common options) >>
>> endobj
1541 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [470.527 160.081 525.543 169.778]
/A << /S /GoTo /D (Common options) >>
>> endobj
1546 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [72 146.324 259.964 157.233]
/A << /S /GoTo /D (Common options) >>
>> endobj
197 0 obj <<
/D [1543 0 R /XYZ 72 769.89 null]
>> endobj
602 0 obj <<
/D [1543 0 R /XYZ 72 592.256 null]
>> endobj
606 0 obj <<
/D [1543 0 R /XYZ 72 357.735 null]
>> endobj
1542 0 obj <<
/Font << /F51 5 0 R /F52 13 0 R /F72 4 0 R /F57 6 0 R /F58 1303 0 R /F55 1284 0 R >>
/ProcSet [ /PDF /Text ]
>> endobj
1550 0 obj <<
/Length 3447      
/Filter /FlateDecode
>>
stream
xÚíZKä¶¾ï¯¬¦Q¢Di}Ê:ÙdÄg ÑHênyÔÒ@RÏ¸ÿ}êEêÑÝMàK MñQ,ëñIuÀOÝðÎ¤Fæ®8¿¤öéÒ:ìg=><¼ûýÇXÝ©ÀÏLÝ=æ$Ê»¼ïNùóXõ»}E~¿Ûk{?T/õPwí Õ*C/Êv??üõÝÜTqû±¾ÀíuÃ°¡´é$´LÄÒ¾Ùíã$ôþX5ÕX·Ç{`ÄÄÞ¹ÛEÊ{*ò¶äB_µùêùkÌ2¼^|p·W¯Â§ù¾ëÏyÓ\qñ©×µÊòºÝ>L½jà¶¹pæú²>Ð C3ù ´8õNPª~­P·B¼Gª0òzÙqK_ØHåñ$,@×ËÝaÕÚWÏÄF7ÔÔVJK|ë¥¥±``KF{¥HkÔK]ÏíÅòö8ïS^«¼zí½bÏîÒ÷Üx¬Úª'1¦'u"°È{d9òÇë)ÆiH5~äí.¡ø´PLkXQ+xEé°õ%1¾P©Ç	uÌö8ÖÞ¹>"Æ¶Gæí+|ÒîÀÿë©æõó'k.®gÎ°ÝR¨Î²}Þ×¤B8°ÞEQU$GQ0¨}¾Ã4®sï:Û:VÈn7p×wvO¼¨PßÈ.ùÐõÕ=wýD ©'[;Ë+Ù3IågÇÊF	`É¾Ø^ÛÒl{~Üãýáï?}ÿgt"V]±Pìb0¨ótrà\"w©¥f¨°S1Óá¼Ç
¡P^VTÑ]o¡Îù+·>SO0å¶jÇF*ËzyC¡Sr%UMåÍÝÔíóZ)½zä
Ürå£0eý@%Å¥$Sx&»a¨éKÆm²HàôRÉ ¯öÌÝ«?{ò5:ó>¸áJ6löð²_f¾_QúZ%°`Zhñ2líj¨üÄD¶S^OÝ³ªê0ð4q´æÍAª÷<7s¤wÎ¯\àµX.N%²j[â ìçPÍGXÁ×z<¹n\ø§°.D~eÐ]ÜÐ­jXM¦lÇo&l n*[ÖÊjû jùJ»$ý@QP0C³Øg{ígÝ8 /Y#~þ>7äæ;â'oDLw®·?ÉRÆmÅ&ò#®%6Xéz*ÎüT¥wIúi¼¿m¯ý¬ÛÆÖÄ% ò·¢0 ?5+÷þÑ£<ÖxãÄ{ìw«Bb°sÑ¶J¨(ñu¨íNïË-òuÏµCã³ÈçgLÅªÆ`³5Uªa]ÙÜÂ?sj0µÈÙc×o3ïGItC±däÐØî'>dÅÁW¿æçç¦z¿5* 8ZlM£¯¢à%!×TÍ>ØkþÍ½A# ;Þ]òûÊ	¡Ý?öykã05ºU®QÓ	Î2±%ÀÞ¡GwºÔÂ¹KSmîgâqêIñeÍ3Z´ç
½n+ùÈ¥´±rPÞTñ5ØÖÜÿVmÑ]"`ÂùJÂÆ2
ÔÀàK°ê~¬-·ô  Í/e{4³õ
BÄa`CKúz.K«ñ×aÜ¹DüòÐ\ìPùd¦¢^¥òOg3%ráqèËX5´
ÜBöÅ§Và'ó @ö-ºeG)ÊëÛRiÈJFûûÚ8?æSYIx÷Ê0àcrÚHöIÆèZºUA5§(eP»Ø$µO¤æDÅ`kJÍ zajeÝÇ´èx¡Ï¬öä§D³ÓìÈ©ºÔ¾>mÖúÝXe´Ë~¦¢,ó|ÀfE¨,¸zàFièý­{aõOÑ'þ@©vWgÑlhöw J0sÒSèÅð		?­êZ#hÔê²m}£O« í'j¥OdäF&´úZ§mÊd$:	XÒ:Á¤êkÛ~f¯ó%øücLó3g®G®FÀV¸,[v§Ðûftì10Ùrvg@#e#¸æÜ2 àìýBs¬ ZèuÆÝ. øõJà
djÀr"#Àö¹©tdÓï2t}ÍÛq>8Ý¼«¶²æOUëÒv§öCvx"ñHøfBóTqkJî~+¬»lËx íÔäO®][Ïsg©²¹hìI®]·.¯ÈPÞ7öö@Pê@ï¬ VárÿÝ3hzÃ°P:Ê!aÌM¹D) =KCj£F¹ÓGqé-ÏT­u¸L*·"®ÔÁtÓø¿}C¹röôOU[ú@l"ÖsTÙ¼3Pþ?\óêâ­Ï1Ü±/EqÜÁÿiãñ«ÖÅÏFÌ_ Ñ~Yö,Õ5üeF9ç?|vhCÐå$´IMµV)µø´ËÛfùrXÿñMl¨ç"r6pËò8· híÞL3"(F¿}¡û4ã~aÚÈ"F	,ýrÄRÏb çX«ø@Û;¶³7²)éùÄ$ù_¬ÊµÌqL-áôÄ Á c±a,e,JH,tLÒHÈ)rb?Û`jØb¨"oÇÃ§ÅñÏd`'PwÆ28Û`ÿ	®ÏQìüp9´üf	CÖ¡h«C¡x~é¤J×¡g!ZÄåÂ,,ÌQz8Gé<D 8Y«¡®Ãÿ"1k<oubqöV( »RÓqÚ=Âì±"~L>Ö±v`kÇÚbm(Y¬g7É3udÝãfQØZ'¦¤Rø:ZùôÙép/YÛnÐêtn³Ì#'þûGÊÿ£[ýrßBîÿÄVé7IÑ··ñãTOÇYdc[2óUÍ±6JÝTLXf¬íÔ ärÜÈà[ä¾Mo@wlë42Ö¡ÊAn»c<VÇÔù°¸gßÈÕ]3íì®R*O"¾âÂê	Hã­N>÷ñÔ¡KÜhÓT%Oåî£ãµ.ñmlSQº­«Ýbu ×ûlÄ4S'.|ñ8ÿwuX{¤·Ù²4WönØ£å3´ °fZt»ÒY(}Ü5ÒB¬(* KÐT}óuU¯nÈÖ*/sY-Â&FÆbºÙ÷_Y ùt+ü+*S`oöx2»x¯%)\8íôwùÙ|gaF®2±Û¹Or®ÌtÅ63áÂ122FîÕû'ùCÙd	áàpãabûÎÃ¦ÔÉ®]5F HÂ@L®ÅÇ@àu5LÌÛØ»1!/É'"$&ïoiÍWßBÌ.>s! ¦Ýã¶L×wkV>s£qKÏú/¬ÈµFh 	Lìß¬<ì2?Ç£{â©äe¹®D³^µpô°< øCðGÃåÕÐû<T(FÂwÎ°òD·X!ê5Ml¬-D·³b£eku¬ìíAÙ®Ó¢+Äî\qð%þâÒWßnmÐ¼Ë`pJÏy?naÈÇ­n±Îò¸
AíÃgÃHO#0¥¢IA XñÄtÀÿ¯§Ñrá-òÜ:ãdÔ4
$0Cyò=²gèdY8ÏÅ]ü@Íá2 {õíAÄÐ@-üÅ«ïê_ñ~I*If{àÂdàâv×RP~=Cõü´-#*ãé+)$J<êZÑíÙdµäP#{nç\GÉ	÷±fîÀçÜÑCTÆîÁU(/*KÈûÀÇX
zy7Ë«¼È¨æ)c)tüÕUÞukVRIwâ&öZk­hK=o\²7NÃü´o>ª|\Ý{CLfÈ'\{eß[ñÃ±ùº=1ÙxÖEG^ö}#í^Dàµ|]¶ßH÷Äm¢Æ³¹O¤D!9
¯}Ïfr G#5!!6.K9ÿÑm&¾áÚ³Mtù üÏ^õZ
¦pÍÈÄ©Ë³=\YNfee>7¤½,ådóA»ú µ@²yÖ2{ZI*Ü9å*ò0«ÂÿìJ §3c\=&OAÂs+äìó¸À¸ñmÇÿxíiD 9P°¸òÄnÖýñ,»Ù³êXÚ·
endstream
endobj
1549 0 obj <<
/Type /Page
/Contents 1550 0 R
/Resources 1548 0 R
/MediaBox [0 0 595.276 841.89]
/Parent 1552 0 R
/Annots [ 1547 0 R 1551 0 R ]
>> endobj
1547 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [462.147 619.289 525.543 630.199]
/A << /S /GoTo /D (taginfo) >>
>> endobj
1551 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [72 606.139 159.818 617.048]
/A << /S /GoTo /D (taginfo) >>
>> endobj
198 0 obj <<
/D [1549 0 R /XYZ 72 769.89 null]
>> endobj
610 0 obj <<
/D [1549 0 R /XYZ 72 769.89 null]
>> endobj
614 0 obj <<
/D [1549 0 R /XYZ 72 169.92 null]
>> endobj
1548 0 obj <<
/Font << /F51 5 0 R /F72 4 0 R /F54 123 0 R /F57 6 0 R /F52 13 0 R /F55 1284 0 R >>
/ProcSet [ /PDF /Text ]
>> endobj
1558 0 obj <<
/Length 3550      
/Filter /FlateDecode
>>
stream
xÚ­Zmoã¸þ¾¿"
¬ñE´@ìË-îW\ÒíUl:ÖÅ¶|¼9·ýñ7êÅQ.Y´»L5Î<óÌ0ê"ÿê"ÓYnâÜdËÝ«Dzï_)i-`Âb4ãÝÍ««©ºPI\$º¸Y¸Y]|lr¹ÐJg:zÿÓõÞ×ûå±iüþRçQw¹0ÆD?]æ&òM[Õû{®OmçwØ¶Ñ++sùùæO¯¾½éEIu§Ö<#oõ¡µÔ²Ð]y_WYÔø5HÆí®ßFµÖ-ì1üºnüÙ$Ên¥ý.eµrµò«×ÐÖ*ªìss+ëÎ7Ü¬ºe¿«/áÛ_°Ó¯âË5EôýGOØ[ù¡=0iY­O¨MÐÐBX*xÓøufÑ?qT¤Ç*ÒÐÌ5¼CsÌ¨Q©Ø
eÎ7¼Z}èàd±íP3K§ðQáµå±Oaæ+ÖÄÎÂô×¨zÂïer6l8,=³ nÍôbÃW[\âä¥÷aS-Q­~ÜøÀêç[V³ßócs©pDExPaæJÄ.÷«þ[¿Å±³ìOµ®V$6VÇ©ÉåØÂ©U¢¯CSßnýMÀ¦ÑÇËÜ²aù_ËÝaë_óÄzï¹±«î6½#ÚGòÈ@QÎd# U¾ûöíÙsR0Ûõj­y6»|z6¾»¥jÅF°AYÁoþ 4µGPqF?û%êµãázÍ¿àXÕþgz±³w
N#Ê±¢VÛ´Ñ±±öåÖÅÉ`Ëz·!`£ä´("?ÏúYÄÚõ[OúY:ò3Ú¿ø®<Ø(©Õäm`ác»ÙùáÖ¢bkþ]n}ÙHêÚ&r\Ø³nê·X½%sgï"üvÙqë^·2k_KöþPµÅeäíòîÌ¥j0céÍx½È¨}Ä¨34|5õ°Ç{aoµç¾e½ÿlä¸_±4z¨ºÏÆTÇ¹Îìã°{Ø2¢V²^ül)òw <É	Ö±GöFçA/±'9v!<ù^ÑêcÇ³{r&NõUfø)a$¦Ùa±Áßu¤äÉÈÔP+ÙÛÎã<¶]µÝ÷×s	Ïø§¯·«0ïKCdlJ´?ÖTÆugZ¢ mI=Ø5":­ËeºÊûdÐa:7å;%zàñÌ·!"|Ï«zÿM¿hµ¿ï-ó/x_ÚÚ¶lNÜU­ùwö\­Î _Çé WC@1b¬jl\£áæÛ Nàúh¢ü%»ûhó1K4LY@[§Q
pp]ÀúÂÉl\ ê;]w nFE÷¸ß,å=³x_çüþu½óÈ«H0~LÕÍ=/t,ëEáop.ØrPÃ¸ÂWÄHÿk×ÈJ«²+ù²mkÚá²*eÓ`¶ªî57ÖkaWç¤ÈYèCÔ·!¬Ü6å~¸	a.MZïÏ	´Ô*´¾HS ÈyÌ:ipD Ã¬ÅhÚ>_äz¿)Ì^A¸ùô®î<J úæz?£~TÊ;øöý7 P0w$Öý³þ|1Ô¦D:§=¶íjÉg
òäÀ/qÁ@Ï¡©ê¦Ä\(e|txd©è#<!ynÝ¢NÜ'ye¦'¿¼gX[Ì2GÍ±kÃÚ$êSßÐ ¢'þÇ÷äl1µ´ðÎ/Ëc+ûã½
=@m'ÿ³	^S=ß¤9û	tÃ¶òLZëØé3,Ìhcë9bîÜSø` QSæìØ>Ã ÁÇbXFøyøodW>]	Ã.P¥ÓT¦{µ·ûÓl²9¸ðfÛV*òæ¿Ô­`QcÊP~I ¤¯U{ß
ªU#÷<§¾%ìÝCò.K÷ÎzÎÉÁ´u±.òL¦âlñ¡ÃC +a{ µô¥sìBfG;óßQzè©¸1rÀ_ÿµÀ ¿'&´ü Ò`nÊØC¬ZºóÒ¿ÆÚ¨?7Þ&¾³+%Äy¼Qìæ%è~/³íÄ2ØhÚcBQ vFå)èbà­Î$Êë4.\våãdW¡lmÃD43I8mîDé×ÃÔ-&9®müîw½|n@
kÅ®ÿõ"6ðF¶Q1¸H^9W%N>º5Cü¨(ço½ØRx@bZ¸ý¦2½B6Î /]e#Kµ¾{3'öB%@ä;uíß_beQlÈv¨½jª/¾sLáÿû¿É²¼êÇjëß} j(ýí°èê\ «HrÌTbH_y¥8ÂÎ MDØøõkl| ÈkCNªxcÒ7	OòÇ÷×<>|Ãêóo\¯@§M]wW§úT¯N{Õ-¯Â®^S*òQ<l\à¦¼{C<>0°]¨E²8f9tâgQ
}íý¹?ÞÌ¸ÊÀGï=~íJqñ´ïß<·~`LqæÀÚLÌY¬í+ÓÎÈ´ñMÛ*"ÊÈ,$É`òglk¸wQqx¨Àè1´ÚN^å±ßúÎó ¬ÇÙ9ôÍò#¹ËpÉpü,òØ@Ö1Ñþâír#*¸jV.H¦Mç="¿hY^¬/¸1 ¡+éE¹å1æÓB*ºãlû+ÖeÍouAÆ]åyÈ&3Bú\ø;ªØýÌ¨Ý÷÷\£Y¤@PÍY¢Ï{RåÄÍ?LðÑÈ^s1SÚ¦0,:U#×Óàñ±Íí.¢áóéNµMKÎc·óR2B±ÞÆZqëÓ
ÿYÌFvçZgã4H:ÚYÏHj]çÊM%]åíøÂÕ¸àhþ´"Aª$½bßú©hk~Ãå14VÃíp6¥©aBQµ/¤·Í4Aô°bÓØ16'|ÌBïh¥§çU¨Ô­åQÅÇù5>s5,<8ç'ü6hÍÈ-V¾]6¤ùR¶ªö²vccÆa³ÚOeí2k16µ-vnÆYÆÞ.Ëæ PVÐo?Ka-v6²kíÆ¢Ï¥ì2ëÑÏ»Y¸ÄMx=øFÄÐ·ã£ãjbÔ¤X)eÇÉÕTU7ò°82o'¥.9¿Ýblõ#ñÕÇÆÄØAJz`ª½º>ïqã¼G,ÌÕ	¥{¢|Â¡]tä5Á×$iu£Ü¯6ä´.ZUzÝ°ÚN²e¡nqFIª¶ÞR@çi¿jë·kî`«}µÕíöÄ`á]y[m«Ñ±¢Üshº¯àkªáelìJÕút ßt oÖÐçD¢%É7{eðód°fHÙ®¿Àïº{,Cö4Á8ù.¾åÔr`­yôî(BP6(>|K;tðÐ]³ë]µÞoOáú£iç\  	O ß6ÞmKàh?¤°§´5±¡Ú¸Ø Å9ß(B[¾¡.ÆÙ=N$kðìH;×kqJ_)PÕç'ªs{×ÆwD àVDxiÅJ$Ê:cÀTè
¾X]¯Bf30ã3 ÐE}yä±séYêÙ²L°Nø»ß57'8$?PDè¢m?­WLÑkêc/bgõ9[Ôo p»QÈ}-zÏÿ"Öé[§Ìwgñ³ð©¢?W÷}ï© ¨%ã)ÈzÇòÍpq·t^xóQ7«øù¿`°ð:«Îr·aZÝÌMe°¾¤;_hu£ª¡ïúÛôQ©««;>
5Su¤óyÒHUgÅè¯/¨ü¹©qy$Õ®ÌØ!Ñ9Ë¾ªkúz·±}]¨¿ÂÜ­/UÿëcwµàøWÛVÈ£uqBzÄÿz9H÷Àp:B/gåÇ·â8B«fØ{Ó\ÅUèÂ5ÄÙüIãû~§KAü^E)Ã£ú ö0r$ÎÈEpj`*ÑÂÄÖÇrd¯¦R®òe)E>8jìÃËnµaµþZ]åOù3¥^bäi,Æel¬óüÞg!É7#ÓÅ?{·õ¹íP»fÛÀ)d§#¶¤pÝ:w^Gl/©,ÂæXªÐbÇ|±/¤ÎÖ5¤v¿]m8@þmBåI^ëjë¥ùGn?.)ý¿*ÜÂÉÙã×ÉfæÿøþúÔþ®ºÝu¶ÜWÝ©¯Û­«¦í@h¯ÞG-¯h-.Üa2ò_ñ!8g
endstream
endobj
1557 0 obj <<
/Type /Page
/Contents 1558 0 R
/Resources 1556 0 R
/MediaBox [0 0 595.276 841.89]
/Parent 1552 0 R
/Annots [ 1553 0 R 1554 0 R 1555 0 R ]
>> endobj
1553 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [152.922 552.861 363.414 563.77]
/A << /S /GoTo /D (Branching and merging) >>
>> endobj
1554 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [310.484 287.687 464.574 298.596]
/A << /S /GoTo /D (update) >>
>> endobj
1555 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [134.174 244.407 333.226 255.316]
/A << /S /GoTo /D (Accessing branches) >>
>> endobj
199 0 obj <<
/D [1557 0 R /XYZ 72 769.89 null]
>> endobj
618 0 obj <<
/D [1557 0 R /XYZ 72 601.686 null]
>> endobj
1556 0 obj <<
/Font << /F51 5 0 R /F52 13 0 R /F57 6 0 R /F72 4 0 R /F55 1284 0 R /F54 123 0 R >>
/ProcSet [ /PDF /Text ]
>> endobj
1562 0 obj <<
/Length 611       
/Filter /FlateDecode
>>
stream
xÚTMo0½ï¯àP)¦
®?öÖ*U[©dÕK©d×diaH±ÇìÂª»ÆÃ7o<æ?²4ÊrAsE§ÞVÉ$âãzõî³âg´`ÖÕb½®É§]Ùö¦!ïãDJE.ÍsmëfoÁÍJäñíúÛêb}H¥REÿá3FýM*âÑ¨iÊD^?..¯ N}v@L¸ êñoç¿YF¼q¾S\@®4¬òìK§9ùí&N8yöVwîÊ/H¿«½ÔvÖ£Ùï¦´µ±Þ!Dé/q.H ¨+}qÍ/e JûPïïÑÞ)\ý6X%.mýi@jãPwÆ/Î¦Øh{þNKZH9ÓÈü)ÚGãBãÛÁ"Sò3H7k.(ãDö_Võ£áK
§9Õâvæ ¹+ ÂûÒÀ*1Î;ê@7,:Çµ©p³ç½pN lNág)ùºSjSÚíØêûwqâÚÞã8¸47T®È¨1fp°Ø7:ÀXÔ8±¢I~-Æ9pö'¢ZÓöXKÑ,B+Ê`¾ÂgC»-{³/$ú÷ sIª¦Cìjè ð²­íf°öØs:üBIW­2*xêfrù­ÉècL2	Z¸æ@ÛÙV4Gãú»éîrÆµAÇxìí9ö+ÍS}Ú®¶¼7áËNâ,}d¤¥¤\óÜfcT2	[(êÌg§cÊWH¿[°
endstream
endobj
1561 0 obj <<
/Type /Page
/Contents 1562 0 R
/Resources 1560 0 R
/MediaBox [0 0 595.276 841.89]
/Parent 1552 0 R
/Annots [ 1559 0 R 1564 0 R ]
>> endobj
1559 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [354.8 654.585 525.543 665.494]
/A << /S /GoTo /D (Merging two revisions) >>
>> endobj
1564 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [72 642.04 108.364 651.192]
/A << /S /GoTo /D (Merging two revisions) >>
>> endobj
1563 0 obj <<
/D [1561 0 R /XYZ 72 769.89 null]
>> endobj
1560 0 obj <<
/Font << /F51 5 0 R /F52 13 0 R >>
/ProcSet [ /PDF /Text ]
>> endobj
1567 0 obj <<
/Length 149       
/Filter /FlateDecode
>>
stream
xÚm±
Â0E÷|Å!1ï½¤«E×.âT#´´
oÅ"ä.ÃårìOàÀÚNØÅÞ.¤ç^5¶Qlö­)m/ëx£,HiBò$«¦~UCßÞsN½¢ '¥Y6*°Ly¼ýø5õsR÷áB>Ð du±¿+qÿÿûi.y
endstream
endobj
1566 0 obj <<
/Type /Page
/Contents 1567 0 R
/Resources 1565 0 R
/MediaBox [0 0 595.276 841.89]
/Parent 1552 0 R
>> endobj
1568 0 obj <<
/D [1566 0 R /XYZ 72 769.89 null]
>> endobj
1565 0 obj <<
/Font << /F51 5 0 R >>
/ProcSet [ /PDF /Text ]
>> endobj
1574 0 obj <<
/Length 3428      
/Filter /FlateDecode
>>
stream
xÚZYÜ¸~÷¯è Ö ÓDRód/²Hlò°,ïÑ¨ÕÝÚQKòçS©cÔ>Ü<T±XÇWÅ	wüwÚ%©öSìË@FÞÒÚÁ~FñááÍÂ]øY»ã|Ãî£÷Ã9¿ew·×Z{Ñ»»½1÷¡ËâN¥Þ¹jN<7n\ÊîD£*R*ð¾ûíáoþúàTäGFSKõ]`0L|FÆ²«b?À²Ýí£X{îBxÔ¡å1GhX382?°Æý4Ò¼_ñ©ªTè±b"ÊëºEi<÷pê8ó^°ÓØI½¡åÁªoë|(y7§R´XÚ©úòw²&ój8SÕH§=2É¡üt§¯¬Ûë¥ä=îa&½§yjdËärh~_î<îz·Î®o`¹Ðú J{¿áë@¼Û¸$ÌvûPû!¬$*'èÙá±¯¼_ÐÔ(AÐ`Î?ÂJ¬Þ=eÞpn{YÊS"G8´üÛ´ï_¯(¯Ì;±Î%S\òÊucó$T°dÝ`½ì}:khüÌ8iäÇô9YÔthìyÃ]Ë'ü¯©¹2àÀ±k/Üj¡yìàüN0²àTÞLç®ú¿QÐÊWòiO4¡¬Æ/[²wgÅ[å£.­h©#)X¨ëHd¼¬gÐ:MvbhkÖágPº¯O'ðo¦Ï¨ùgÀ	øYæt|Ðx=Ùhm¼ýï[&¯Çà=%¿x°a-±Å%M°K.öñ(m÷T!ß'6	kß$+8T]Ym÷rjPxÿÁ69«1ïZ`9íåRv4VW~ªúªmîÅÒÑË1r8öÜ+A®¾XÃx¯´W¾tû)ùÒÂA&â²Õ2U;<a°<Ú¤>Ë}¶ñµ).6{ËÄeû!:måýr·o§ÒMÐÄÑ}w%7N(tbDÅ3ù·ÝÖ]#wª¿÷ó(.¼	B¥	Puó°òÀÇó<:[
þ=£3ÅGv-x=8~É%Üdl²é&q<GãMñôÉs5áí[þ%O·ß½GýH½k7d~CøEW²î=;!ÊYå»v¼ÖB'EpyîQ3í½?2°Ë÷|®ì*qt2_ýÐ	õÜí¼¸IÆbP8c¥ØÃâ8Zñávó!¯±©½Çñ<p1³g,IíxLÁÝr{tèbqzÇ¾,×E%±(@*QFvÐ&gÅRígdj½ë "E"`ÇøÙùø'ÊOýoèTä]ó°¬ã5&Ð`QÉÉe©¾Âäz3bã~	,4Ü6âòøFxÅ	j1A¸Ä¿?WÑaìÔLÑ­St#CÛÂ´áGr!èªO)AÆá3òæ¦BïoudU(ë;4À:gXV]'(¬ëfò)KßSA5ê
lÂ5{¢LLiât}(Ý^Æ	|Gãg -bsØfÜ³ågÁ-ÅPxD4h/] |$;#¡ÜzàIÔùÁ~ÍBè\ÄÞG#`Fö¨zË÷I¦t'/s.6=ÝY64ÃÊí²^hÖÏå¨¡gÍ¦¡%ÉÝ¶ºMÉÊx n¦øþz fpÎB°!ÒCË}¼5üÍùn¹B_1ælH\WO¢N²[/{d3ëoyÃè¤´ÃøÁ5DCKÚÆ~\öïD¹Câ¶ü]Y
¤ÄO]Ëäåm·dðíte,´Ü1Ë d?^yÔùR$_£ÀïP¹ge0Óf`å|sTIR÷Cìt½¬h¥ú2Ã¸Ø® #¦:T=¸GÊN[&Èª[¬ãQ0è3%24/ÁÖý 4È/VýM5å;0IgÇÈ­dóV*{5àcxmÕm'³?áæ²acl0Ú±§Â!<Õ½Ø$ðpq÷Ê+/¼tµþn§ÇýÀj£EM¹7ÿL¨îÚà­QÃM¬WýggÑçÍ´Á?E¹ø©ýã|W%ÚÿIÙÕåçÀL)rÎû~¼¸hÁÛN¸µ7[.%UÀçÄ$¿Ûâ°Ô(@§£?¡âFü`8ý½îÃ}°¿æCq.7ë¨Ri¯]),öúk]Òn1À&ß),¤}ñçHÜ0¥DÔxcew¨6ï«|7±9¨Ç=;üa_'MÚ%gP¹¾®ÆP_Ä þ»uibuáFÐLí·¾p%~å=þ*ìÚé÷bÀ;â: þÍ@öÀ0Âe1ØW*xäTÊ5ÐU\û°Þ]i³£³SÃuÔÖT6ÖLtº)îù¥¡¯t÷d­%JHàgVñá¾h4I¢t¥D0áè^UÏãÌ ¬È3µçb½LDðë\kBøSAå{5KÀúF¹EÑl	_ÅN]òqh÷R$S)\|´LF!sñ,ózk.Ìe©Ä? D$Ò¦Y=@/É)JoÀÊnÐûñÖ	D AÕ³»Xd{ðoæt/¾JBÄ>hãýVüÝÈ·ÒÌu¼ÓàûÁV¶³-¡ÙODiÌr£U¦õk_³|_ ì§[%_@#ÉÌ¾®a+°k 7¹%ú2Ï«­¤`ÆV@¬]xåí ×}+ÄG½
0iBsG ÿMaálÃ.çe©@Qªu¤'Lß-û5;?
]Í®Ãpµe:
j;êTûQ.å³Ý«x¸ïqq;Hr(-¾9Xn
í8ì;+oþêÆÆÿÔ¡ÿ·\,ésjÏ=qòÔªdlÈp\n}9ë°Ó1m9£i/K1åÃ"íÊ^Ðë%Üt6ASW DM!©Ðt¶©[â<jÒ·äªbJ:dû¦fP» ^Ú^æ»²¢õÝá¡÷?^Wo{hC)sc_ÇZ6ny07sYô-rB
y,C?VÙÑ×«(Íµ£ñKÐùÌ)M´Zë·ixÕ,Æ¯\'t`à¹²Éùìiî&Ùj-5.Ç¼ÊËÝ¼Çl.MÉ÷`+ÛV&¦sd¾¡a²°¬{grÃ77ÖÐã&ÒCß@ìÆê/î<uÝo²úi~Õ§ñC¥=\Ëpþ`háQ © Õo3¥Ó0óû­§ú.j]<ëIòÃdÏõJEKÍÿjy
°Ú¾ B¦KÙÑöÑ\WgÓÄ÷l+LS	¡âÔ¶kÀ|¿oà-	»Ñ×®]û*úÂã0eõºtx«
¾­løUÎY-æÂaÇn×¥~nïe
&rDö°ef¸GUH+m-¯>ò#©ÏEbôxH)!pä8òÃ,¡<ì/Qµ&ïóêp2 ÝmËÙê(þãIý"#_ú*XUlbl+-cý¥,2¾2Îü·c4r4wäèpæ]Écît5ÕÔÄg«ÚÄÂÊÌO''ÎÚÖo0·8Nþ@ìÛ(Ç`BCþkUÑ\y!êÅàíÊ2W¶ï©ÈÄÊÖµPhCW.¯Yýâ2EÜ±ægm$ ]Ç¢²+ß¯ÊÎ|ÞÁ4cû<YF$Ý*©u3¶ñ!½ìåÓb½±;Äöf¦òøêYsv#ºmöW06@Wýàñ"a#Øî6¸ÓtË({«·]ù¦»Ád&yKE(ól,ïú" e¡JE@É$ Fú0Ã¯üzo«¸¸t[ËñÍd°à5'yí{¥æÏ2dXp¶íà®ôoKÇm9ÄÓÑ2ïØâÚÔT*à·ÌýqZù	ì8 î²¤8/$ÏkLëâÓ­Hø©Éviì'pØB´¨¶òÌåV[É±äxVyDÇß òjÆøÖã¤}ñÕVîiòFN¦¾VêË9¡SÁ­|ðûS@aêß!ÑÈ«ð)$g¼©^¸sÎçDÓü³¬í¤»
||cï¤²Å¶ÇF-%#r¸+CM÷SÅ_n¸ûhÿXnZhQz|@â¤.¼Nn£oÉf÷ÎªËÿS%æ
endstream
endobj
1573 0 obj <<
/Type /Page
/Contents 1574 0 R
/Resources 1572 0 R
/MediaBox [0 0 595.276 841.89]
/Parent 1552 0 R
/Annots [ 1569 0 R 1570 0 R 1571 0 R ]
>> endobj
1569 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [276.721 556.752 403.347 567.661]
/A << /S /GoTo /D (Tags) >>
>> endobj
1570 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [89.636 316.353 285.606 327.262]
/A << /S /GoTo /D (Accessing branches) >>
>> endobj
1571 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [227.849 84.024 419.122 94.933]
/A << /S /GoTo /D (Creating a branch) >>
>> endobj
48 0 obj <<
/D [1573 0 R /XYZ 72 769.89 null]
>> endobj
622 0 obj <<
/D [1573 0 R /XYZ 72 769.89 null]
>> endobj
626 0 obj <<
/D [1573 0 R /XYZ 72 620.849 null]
>> endobj
630 0 obj <<
/D [1573 0 R /XYZ 72 451.704 null]
>> endobj
634 0 obj <<
/D [1573 0 R /XYZ 72 161.691 null]
>> endobj
1572 0 obj <<
/Font << /F51 5 0 R /F72 4 0 R /F57 6 0 R /F55 1284 0 R /F52 13 0 R /F54 123 0 R >>
/ProcSet [ /PDF /Text ]
>> endobj
1580 0 obj <<
/Length 2096      
/Filter /FlateDecode
>>
stream
xÚÝXKã6¾Ï¯ða[I=È!Iì%À¶w. áH´-´-9ztÇÈþø­b²d«'Ìî%ÝSd±^üªXE¾à¯Òxfe"]Ç7}zÃÝ(pBñÝæÍý¯xÄò(ç«ÍvÊbS®>R®ÃÇi¼ûðøwM]mkêuý:BÖLÛUMÝÑÌã¹ëÍÇ2xæÇõ/¾ù~3ª¢bÅ¢¯§ºU:*Í£e zÂ"%Iï¬qsP<w4N¥îÃ~[sy'Ý{ãûU½vKg !ä²$4-Yk~ªçµR>8¿ÎÇLË[^Ér*,¹`øË,Y <3ÌøÏ0Ë²SÎô~Ö?ê¾7hgÕ[ö{Cë/hoÓ>Uõ&æSçq9´cÚ´Õ®ªõáà~GfG]ù©v¨ü.é©»æèÈØØZ\²\Ê¹Û>µº.P=2ÁôCÒrèO`r4¨â3Ò"(ãQ×%}¼TÀ=8¡À-kÕ;¶Í½j}4%IºhÂÖaËà[Ï¾«ÕA·Ö#&~Z³`u	²í×%x		 ³#0Dzº;(oó[øJå2÷D°8Ê¯ø[üí3©®åM»³K@×(¨ ¹ÃìHp¶Ø`¯ñëÉã¥Kc×j{&^ol¶ÞÄúç«ªè;A¶Hç yH9³à$ÏÂ¢@ cË,txú©.p»'JÀÇö0£ég?01øê+!5³}'ÝöUaÑßÜC|.Q	á[QÕ9&Î:©ªÃ¶½9¸iàòj|Ùð{©: x°ÙW6Ð8em%fÑöº§I
 ¼ã±?OÖ3%í¡$Û¶9z.¦®Ò"w¥nV Ô¥cViÍsEWÔBµÉÅ¹UW`ÌZ0^|
«/ûêàÀq0ÚæÌVØBZÂ¢ËcÈÏå1X¥s¶ìð¬Sj¨5 T¢7åë(ÛàÈ² È¥eáº´ýâÜÍ³ ¬hþlÞÎÊ§ìLÑ°jA×ô1tc_NN\1ÉÇüÔõººWóæùÉ	åAãQð£»lNvA©a3;Ü¡?=a
æÆÞ.2ØÚë%óyèOs(iÅi+À)ã¹H¼ÒOg ½[²R)Æ3>³E«¨3æºR<g¹+¨Ê2,]TJ*-w×ÌHaÀ[E¬ odüG´ÃFçÙùHïº_Ozç&£keáM5Qd¡²sD¢î+«-¸è?HQÚ;¦tVóÈ(³R&w'ÖQ'ñÅÅw®¥ÆGFïÖ+äÈÊGþ%:G¦¼*®RHå¶ûËx;e<É"7u¶ÕeYAP=n±Öa¤ËÕ¦/$]R!ùL¿e[=ôõIO¦.Ùb]úÍ×ÿ-±ýìÃ2ÄêëÖþ}
û&ôUÎ*Át¨®¡ãôØ(
8K!öØûÙ¼7Ë ìE<{Õî+Ïã%ÿõî.d<p?ÜÛ¦éïÏÍ¹)Ïµ¹ï{oÐÛç%¶>o çÞ!×ôµ.sÍí{çÍb·åâñ{ð×ÔMmn¶-(ôÓ	Szß¸´uêûï¯ºÞ"ÕYC0¥sÊçbnL²/·pÎNGn³¿ñ/ÛÇÍ¡T,ãé\åÿ?/áD'ûÕî46¹4wVË?Dü¯Z~Ð£EWþ Z¾~ÜDË¯C´|%àqoÊ/Û{óP r¤K
Ãh9¾oê»kA¨ZmeèÚª-¥_¢Çö"ÃÚq«ÞOé~¶H%ð¤¥FúÇÃY}¢W¶s°ZÃ]Fû¿è¤±nÔ²²4ÖnXÊÛ¿Mq}²XÌÉ(aù¥°YgÉMqÆKÍwçóJÄ¹³´¥?¿ËÅc¥ qòËÄY­éNä"(àèãpÆsÅ*£Z½'ó%³n ÷cujXð#LtúÝµ¯iKÅ×çÞ2e7À1}ã$K_ÕÐ,§+ìK²dòª.­ËroaÐhöü"eª[±x@¤¥ÔmçvWÇ}®ðáÀýò|S]j4×»Âï øE&ÝuE"}A×Ü7íy)`°ÄpÐwznqæÎ(ÎÔ¼Gu¤Hnø/$h2La¯4Ùë^¿2|ýº¼Kà¼ù]åxôq.Á«nºÐAiÊ¡0×p¹åSKóñÉh,æð:Î&àF¦{]ÒÀe()Æ"É~õpÓïÛfØí]Þ´®¿:PïzóåNN¤Läc4Îêß3%Õ´Âëºm.ÏHUç&­8ÕótVVÑÖè±çy*X«yùþxÛrÈU B10c¹/t$áH³ÐeÍØ\uR
« !Eðñ»ùôÏ0ßWl(Ç¶IuÓÒÆúßø¢øBèi>«¹4©æÔÑKDj¯«CG*x¸ÛXÄh_~_h}v6R^2Ãì²û«EÏP·a×·Ãøz6ÿPØaÓ
endstream
endobj
1579 0 obj <<
/Type /Page
/Contents 1580 0 R
/Resources 1578 0 R
/MediaBox [0 0 595.276 841.89]
/Parent 1552 0 R
/Annots [ 1575 0 R 1576 0 R ]
>> endobj
1575 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [319.953 540.861 480.15 551.77]
/A << /S /GoTo /D (Sticky tags) >>
>> endobj
1576 0 obj <<
/Type /Annot
/Subtype /Link
/Border [0 0 0]
/Rect [106.45 65.793 321.182 76.702]
/A << /S /GoTo /D (Branches and revis